{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/201806/WX20180605-100350.png","path":"images/201806/WX20180605-100350.png","modified":0,"renderable":0},{"_id":"source/images/201806/WX20180605-100532.png","path":"images/201806/WX20180605-100532.png","modified":0,"renderable":0},{"_id":"source/images/201806/WX20180615-115151.png","path":"images/201806/WX20180615-115151.png","modified":0,"renderable":0},{"_id":"source/images/201806/WX20180615-143708.png","path":"images/201806/WX20180615-143708.png","modified":0,"renderable":0},{"_id":"source/images/aliyun/WX20180531-160800.png","path":"images/aliyun/WX20180531-160800.png","modified":0,"renderable":0},{"_id":"source/images/aliyun/WX20180531-155652.png","path":"images/aliyun/WX20180531-155652.png","modified":0,"renderable":0},{"_id":"source/images/aliyun/WX20180531-180301.png","path":"images/aliyun/WX20180531-180301.png","modified":0,"renderable":0},{"_id":"source/images/aliyun/WX20180601-105924.png","path":"images/aliyun/WX20180601-105924.png","modified":0,"renderable":0},{"_id":"source/images/aliyun/WX20180531-161602.png","path":"images/aliyun/WX20180531-161602.png","modified":0,"renderable":0},{"_id":"themes/maupassant-hexo/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant-hexo/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532687662000},{"_id":"source/.DS_Store","hash":"20ec5348130377863dd3f19602ac4bcb143b3b9d","modified":1532686313000},{"_id":"source/_posts/ERR-registry-error-parsing-json.md","hash":"c9c5fc601ed8be2100743a35bdee39d1ad4ae394","modified":1526982777000},{"_id":"source/_posts/GIT-error-pathspec-xxx-did-not-match-any-file-s-known-to-git.md","hash":"f450fc77964767d30d69ba3f5678ec91e107e499","modified":1532687662000},{"_id":"source/_posts/command-not-found-shell-returned-127.md","hash":"1a66e7eb23dcd97f09412d137a4179f0ca3cbac1","modified":1532687663000},{"_id":"source/_posts/Jade入门学习.md","hash":"a8e9e8c335bc4f5d0ca1e0f66c3875ba5ee35c9b","modified":1532687663000},{"_id":"source/_posts/git常用操作命令.md","hash":"488e18c317bfec24e0e5cdde14be625539dd1982","modified":1532687663000},{"_id":"source/_posts/使用scss为css样式自动添加浏览器前缀.md","hash":"4527836ef1945124eb54914792e6e83359c57e1f","modified":1532687663000},{"_id":"source/_posts/前端小问题总结.md","hash":"504fed6fb383d1e20dac727f08914cf00a965c83","modified":1532687663000},{"_id":"source/_posts/常用的linux命令.md","hash":"0cd19bd251b5e95e5a2c305c61124530e9442d59","modified":1532687663000},{"_id":"source/_posts/自己封装myLocalStorage，使其有有效期.md","hash":"5479356ee4ece649a7a5b8c540c5415f9c98645f","modified":1532687663000},{"_id":"source/_posts/论Object-keys-Object-getOwnPropertyNames-for-in-Object-getOwnPropertySymbol-区别.md","hash":"49397901b8548cf5da9b9dea68b7aa60f161c887","modified":1532687663000},{"_id":"source/_posts/vue学习笔记（一）.md","hash":"faaeb0d78784ab7f0a316259a2bedde34cf06ff6","modified":1532692112000},{"_id":"source/_posts/阿里云搭建大概步骤.md","hash":"4d0ea1ec12c9ed1bb44e479b4ceba1e59ba72ade","modified":1532687663000},{"_id":"source/_posts/阿里云服务器搭建所遇见问题.md","hash":"ef363c01a2c5570d634b9feb2d1accb6993661b9","modified":1532687663000},{"_id":"source/about/index.md","hash":"4c47489fabd648744cdc5b1efae72f8ca101b8a9","modified":1532687663000},{"_id":"source/images/.DS_Store","hash":"fee7e0c524be55599612453e8b95e85dc3cc0018","modified":1532686321000},{"_id":"themes/maupassant-hexo/.DS_Store","hash":"a534dcd0c404c83500ac54f1c68fae5e1235bc9b","modified":1527146205000},{"_id":"themes/maupassant-hexo/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1526883226000},{"_id":"themes/maupassant-hexo/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1526883226000},{"_id":"themes/maupassant-hexo/README.md","hash":"a3dcfa9b646980ee5811ec03b4c5786618b85ff9","modified":1526883226000},{"_id":"themes/maupassant-hexo/_config.yml","hash":"25617f93d9be36dcf1eaa512aa0e20c6ad6fabcc","modified":1526955152000},{"_id":"source/images/201806/WX20180605-100350.png","hash":"09d27bc91d4cc9ee5ceb0378cff0bd7300781c47","modified":1532687663000},{"_id":"source/images/201806/WX20180605-100532.png","hash":"e5209aecfcb6c17c42d477e11b60c64c5c8f77c7","modified":1532687663000},{"_id":"source/images/201806/WX20180615-115151.png","hash":"fe8aeeffeda0090f27cd75633f4969c2394a25f9","modified":1532687663000},{"_id":"source/images/201806/WX20180615-143708.png","hash":"58e98397906b86b0a1598bc40696fcc361a1af7b","modified":1532687663000},{"_id":"source/images/aliyun/WX20180531-160800.png","hash":"1ce706cae183dc7ba5765af2dff2bb03e7f5256b","modified":1532687663000},{"_id":"source/images/aliyun/WX20180531-155652.png","hash":"c8c6413cb1bee1a54660e1a905be4792be092885","modified":1532687663000},{"_id":"themes/maupassant-hexo/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1526883226000},{"_id":"source/images/aliyun/WX20180531-180301.png","hash":"2240f1f9f7e8b6bbe4ddae2b61cb3581ccbaf555","modified":1532687663000},{"_id":"source/images/aliyun/WX20180601-105924.png","hash":"04e0b8d4ad766fec721f185027b263791965f354","modified":1532687663000},{"_id":"source/images/aliyun/WX20180531-161602.png","hash":"105e66f6d9fa2b8618d560d1a082132e51837eaf","modified":1532687663000},{"_id":"themes/maupassant-hexo/layout/archive.pug","hash":"665582bb4092fcd81bfaf4d08fc1689abee1e6c4","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/about.pug","hash":"ead043c9083507b919f5c504b89a50f90d928e57","modified":1526896019000},{"_id":"themes/maupassant-hexo/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/index.pug","hash":"0435a4e5f5c6976e05b3079d335453c246f5ba6e","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/post.pug","hash":"ead043c9083507b919f5c504b89a50f90d928e57","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1526883226000},{"_id":"themes/maupassant-hexo/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1526883226000},{"_id":"themes/maupassant-hexo/languages/en.yml","hash":"c3fb5c155560a00889a75882c680afe1197ebf1a","modified":1526883226000},{"_id":"themes/maupassant-hexo/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1526883226000},{"_id":"themes/maupassant-hexo/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1526883226000},{"_id":"themes/maupassant-hexo/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1526883226000},{"_id":"themes/maupassant-hexo/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1526883226000},{"_id":"themes/maupassant-hexo/languages/zh-CN.yml","hash":"710b204e637c18b86ac7c681f7d1cf8dfeddf4bb","modified":1526883226000},{"_id":"themes/maupassant-hexo/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/.DS_Store","hash":"33601944404ef879153a085dd46b01b3d0c69b1b","modified":1526888414000},{"_id":"themes/maupassant-hexo/source/css/style.scss","hash":"03c8b344f02c07994099caf577200b47c4eaa22c","modified":1529997106000},{"_id":"themes/maupassant-hexo/source/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/donate/index.html","hash":"bd5cbe475b7bce89a8c96375c56c8e3e188d6afc","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/after_footer.pug","hash":"bf5e24891d18c19b31ef7887cd22ae2a74f9ad4b","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/comments.pug","hash":"69fa52eac8dfcf8073db7e540a4b0e87f41654f6","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/footer.pug","hash":"a695107d8cc4707ffebbd26a554ad7c1b61d8db7","modified":1526886255000},{"_id":"themes/maupassant-hexo/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/mathjax.pug","hash":"e3a5e2d44ac261e3168a0b10e968f9a57bc5a237","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/mathjax2.pug","hash":"75cfa2cda3ff0681d03bbe89326818b824e5e524","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/wordcount.pug","hash":"004c8a3edc19d428179b83a0f97eae3c1a6d3cfa","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1526883226000},{"_id":"themes/maupassant-hexo/layout/_partial/head.pug","hash":"e672914a8451b269c1033cd8c55e026beb3a9135","modified":1526883226000},{"_id":"themes/maupassant-hexo/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1526883226000},{"_id":"public/about/index.html","hash":"f303ad8743658a21f73253c21394d1752a5d8f07","modified":1532691427422},{"_id":"public/2018/06/05/常用的linux命令/index.html","hash":"5a44c24d8014792e3b68034741bf17f743d1b086","modified":1532691427422},{"_id":"public/2018/06/05/GIT-error-pathspec-xxx-did-not-match-any-file-s-known-to-git/index.html","hash":"f43d9a365ae51c0cc0c7b94b9ea2090756a2565d","modified":1532691427422},{"_id":"public/2018/06/01/阿里云搭建大概步骤/index.html","hash":"5c4b6cc9e5681c58d09e1eb7df9e9b33173724a6","modified":1532691427423},{"_id":"public/2018/05/31/command-not-found-shell-returned-127/index.html","hash":"eb6ce8757558573d0b7da94738b8af1cc090170e","modified":1532691427423},{"_id":"public/2018/05/31/阿里云服务器搭建所遇见问题/index.html","hash":"ca4e6a5238f4f9a407d7f856cce348337ebfa83f","modified":1532691427423},{"_id":"public/2018/05/24/git常用操作命令/index.html","hash":"5d159c0a43782cee3a4f1ec9a9762093d90b5e73","modified":1532691427423},{"_id":"public/2018/05/22/ERR-registry-error-parsing-json/index.html","hash":"8fe00994004bff1658097d7cfa84b8f52f566113","modified":1532691427423},{"_id":"public/archives/index.html","hash":"ccee85bfc6460bdafcc90a15a9bf072fc3fdb574","modified":1532691427423},{"_id":"public/archives/page/2/index.html","hash":"9f4e656b9dfbf59edf9015339aac43ed31b0660b","modified":1532691427423},{"_id":"public/archives/2018/index.html","hash":"cfc7ea217064aadee9e96450832e00a4df36b6fc","modified":1532691427423},{"_id":"public/archives/2018/page/2/index.html","hash":"119558f759443d0b6395f73d58bca316eff8c3e0","modified":1532691427423},{"_id":"public/archives/2018/05/index.html","hash":"f1ecb89c6cfa37757cb2cfbfb392d0f32dc9e40b","modified":1532691427423},{"_id":"public/archives/2018/06/index.html","hash":"3e054c5e2d453b30d0f1e8e8a48716997070365f","modified":1532691427423},{"_id":"public/archives/2018/07/index.html","hash":"e78a2ed12c48426ef24798c07daf23a218a2dcf8","modified":1532691427423},{"_id":"public/index.html","hash":"cbbacb013e71d4f8f2f3efb1530185a2247ea10b","modified":1532691427423},{"_id":"public/page/2/index.html","hash":"3a92d167f0a58bdd25e6d53f3afe3926a7476ee6","modified":1532691427424},{"_id":"public/tags/npm/index.html","hash":"3dc914198af7f009e716d7f3740ff8e2b28301cd","modified":1532691427424},{"_id":"public/tags/git/index.html","hash":"055080844ccc0f2608681fe960a5138c81208aa3","modified":1532691427424},{"_id":"public/tags/ssh/index.html","hash":"b83963fb25b203bb257b14faf4c35e5d8d170664","modified":1532691427424},{"_id":"public/tags/ques/index.html","hash":"39bca7dad5b024bdbc31e3e300b9c2e7a8641a7e","modified":1532691427424},{"_id":"public/tags/jade/index.html","hash":"0ad6dfbb1a3a19982e0973864625485b63bf523d","modified":1532691427424},{"_id":"public/tags/pug/index.html","hash":"f2a1471b7b3549f7f7250bab2e6da19929fdec33","modified":1532691427424},{"_id":"public/tags/scss/index.html","hash":"92bd5fa0f4bcdd5806aeb10a4b2435e67dcba6b1","modified":1532691427424},{"_id":"public/tags/js/index.html","hash":"5ed8ff3b735724a693bd3dd25899e2e511b9fbfd","modified":1532691427424},{"_id":"public/tags/console/index.html","hash":"0f8e74e297f5744c40a3c2936f94b6c4951de79e","modified":1532691427424},{"_id":"public/tags/跨域/index.html","hash":"e1b764b5e356d9ec5df11952eac8e0c5ba8355df","modified":1532691427424},{"_id":"public/tags/linux/index.html","hash":"2224f9259a536a7ab40536386ff6ca16892744e4","modified":1532691427424},{"_id":"public/tags/localStorage/index.html","hash":"092df13f309f9416a999cf14e7be434b995d9e7f","modified":1532691427424},{"_id":"public/tags/cookie/index.html","hash":"486267d2a48179eebc308ab70342be3ee1dc1fd4","modified":1532691427424},{"_id":"public/tags/es6/index.html","hash":"8c724aec59df36dc184b7bf77717edf0e33b053c","modified":1532691427425},{"_id":"public/tags/阿里云/index.html","hash":"761ba8bfe6175c3f3a6ca15d7a410b0781b99fd9","modified":1532691427425},{"_id":"public/tags/vue/index.html","hash":"d653122fb93d895a41c581524886d8fee47dcef0","modified":1532691427425},{"_id":"public/tags/vue-cli/index.html","hash":"72ccc11e7cf5df1ff3118ed63cd7b63238161fc0","modified":1532691427425},{"_id":"public/2018/07/27/vue学习笔记（一）/index.html","hash":"200a8201ce28590c6b71d72e51d3ea034d064f90","modified":1532692148268},{"_id":"public/2018/07/20/自己封装myLocalStorage，使其有有效期/index.html","hash":"d989921059ff01dd7fed0257c5059baf50a1abda","modified":1532691427425},{"_id":"public/2018/06/15/使用scss为css样式自动添加浏览器前缀/index.html","hash":"8570e9a093c5575832309178a4f7a0aad58c0b8d","modified":1532691427425},{"_id":"public/2018/06/12/论Object-keys-Object-getOwnPropertyNames-for-in-Object-getOwnPropertySymbol-区别/index.html","hash":"53414afb7962aa12270b6b3e073a51ff933c6ebb","modified":1532691427425},{"_id":"public/2018/05/17/前端小问题总结/index.html","hash":"ea355bd976304fc03b90f2157c3c581b3cb5285b","modified":1532691427425},{"_id":"public/2018/05/17/Jade入门学习/index.html","hash":"fd05789e740e9b24c0db00fafa6a5d756e013cb5","modified":1532691427425},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532691427425},{"_id":"public/images/201806/WX20180605-100350.png","hash":"09d27bc91d4cc9ee5ceb0378cff0bd7300781c47","modified":1532691427446},{"_id":"public/images/201806/WX20180605-100532.png","hash":"e5209aecfcb6c17c42d477e11b60c64c5c8f77c7","modified":1532691427446},{"_id":"public/images/201806/WX20180615-115151.png","hash":"fe8aeeffeda0090f27cd75633f4969c2394a25f9","modified":1532691427446},{"_id":"public/images/201806/WX20180615-143708.png","hash":"58e98397906b86b0a1598bc40696fcc361a1af7b","modified":1532691427446},{"_id":"public/images/aliyun/WX20180531-160800.png","hash":"1ce706cae183dc7ba5765af2dff2bb03e7f5256b","modified":1532691427446},{"_id":"public/images/aliyun/WX20180531-155652.png","hash":"c8c6413cb1bee1a54660e1a905be4792be092885","modified":1532691427446},{"_id":"public/images/aliyun/WX20180531-180301.png","hash":"2240f1f9f7e8b6bbe4ddae2b61cb3581ccbaf555","modified":1532691427446},{"_id":"public/images/aliyun/WX20180601-105924.png","hash":"04e0b8d4ad766fec721f185027b263791965f354","modified":1532691427446},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1532691427446},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1532691427447},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1532691427447},{"_id":"public/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1532691427447},{"_id":"public/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1532691427447},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1532691427447},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1532691427447},{"_id":"public/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1532691427447},{"_id":"public/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1532691427447},{"_id":"public/images/aliyun/WX20180531-161602.png","hash":"105e66f6d9fa2b8618d560d1a082132e51837eaf","modified":1532691427450},{"_id":"public/donate/index.html","hash":"bd5cbe475b7bce89a8c96375c56c8e3e188d6afc","modified":1532691427457},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1532691427457},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1532691427458},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1532691427459},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1532691427459},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1532691427463},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1532691427464},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1532691427464},{"_id":"public/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1532691427464},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1532691427476},{"_id":"public/css/style.css","hash":"d13656e1709cf37f81f0cf6ce1ffe31937006112","modified":1532691427746},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1532691427797}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-05-21T08:25:06.000Z","_content":"\n<ul class='about'>\n    <li>NickName: Mobro Zhu</li>\n    <li>QQ: 599045606</li>\n    <li>Blog: [http://blog.mobro.site](http://blog.mobro.site)</li>\n    <li>Github: [https://github.com/MobroChu](https://github.com/MobroChu?tab=repositories)</li>\n</ul>","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-05-21 16:25:06\n---\n\n<ul class='about'>\n    <li>NickName: Mobro Zhu</li>\n    <li>QQ: 599045606</li>\n    <li>Blog: [http://blog.mobro.site](http://blog.mobro.site)</li>\n    <li>Github: [https://github.com/MobroChu](https://github.com/MobroChu?tab=repositories)</li>\n</ul>","updated":"2018-07-27T10:34:23.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjk3wwg1l000h66fylqng0s0j","content":"<ul class=\"about\"><br>    <li>NickName: Mobro Zhu</li><br>    <li>QQ: 599045606</li><br>    <li>Blog: <a href=\"http://blog.mobro.site\" target=\"_blank\" rel=\"noopener\">http://blog.mobro.site</a></li><br>    <li>Github: <a href=\"https://github.com/MobroChu?tab=repositories\" target=\"_blank\" rel=\"noopener\">https://github.com/MobroChu</a></li><br></ul>","site":{"data":{}},"excerpt":"","more":"<ul class=\"about\"><br>    <li>NickName: Mobro Zhu</li><br>    <li>QQ: 599045606</li><br>    <li>Blog: <a href=\"http://blog.mobro.site\" target=\"_blank\" rel=\"noopener\">http://blog.mobro.site</a></li><br>    <li>Github: <a href=\"https://github.com/MobroChu?tab=repositories\" target=\"_blank\" rel=\"noopener\">https://github.com/MobroChu</a></li><br></ul>"}],"Post":[{"title":"ERR! registry error parsing json","date":"2018-05-22T09:30:14.000Z","_content":"\n#### 报错日志：\nERR! registry error parsing json  \nERR! registry error parsing json\n\n#### 解决过程：\n从github上克隆一个项目，在npm i的时候，一直报npm err! registry error parsing json。请注意，在这儿有【registry】这个关键字哦，所以猜测是registry的问题，而公司用的网download是完全没有问题的。所以接下来我就试了一下淘宝镜像。\n\n``` npm\n    npm config set registry http://registry.cnpmjs.org/\n```\n\n然而，天不随人意。依然没有解决问题，接着，我找了度娘，度娘也告诉我就是 registry 的问题，那肿么办呢？我原本用的是无镜像的，那我抱着试试的态度，再来了一次。但是我将registry的值改了一下：\n\n``` npm \nnpm config set registry https://registry.npm.taobao.org/\n```\n\n咦，这是一个什么鬼。居然成功了！！！\n对头，mmp，他就是成功了。\n希望能帮助到和我遇见同样问题的菜鸟。\n并希望有料的大佬，能帮我解答一下，why...\n\n#### 扩展：\n``` \n// 查看当前配置\nnpm config list \n\n// 安装镜像\nnpm config set registry https://registry.npm.taobao.org/ \nnpm config set disturl https://npm.taobao.org/dist\n\n// 删除镜像\nnpm config delete registry \nnpm config delete disturl  \n\n```\n\n","source":"_posts/ERR-registry-error-parsing-json.md","raw":"---\ntitle: ERR! registry error parsing json\ndate: 2018-05-22 17:30:14\ntags: npm \n---\n\n#### 报错日志：\nERR! registry error parsing json  \nERR! registry error parsing json\n\n#### 解决过程：\n从github上克隆一个项目，在npm i的时候，一直报npm err! registry error parsing json。请注意，在这儿有【registry】这个关键字哦，所以猜测是registry的问题，而公司用的网download是完全没有问题的。所以接下来我就试了一下淘宝镜像。\n\n``` npm\n    npm config set registry http://registry.cnpmjs.org/\n```\n\n然而，天不随人意。依然没有解决问题，接着，我找了度娘，度娘也告诉我就是 registry 的问题，那肿么办呢？我原本用的是无镜像的，那我抱着试试的态度，再来了一次。但是我将registry的值改了一下：\n\n``` npm \nnpm config set registry https://registry.npm.taobao.org/\n```\n\n咦，这是一个什么鬼。居然成功了！！！\n对头，mmp，他就是成功了。\n希望能帮助到和我遇见同样问题的菜鸟。\n并希望有料的大佬，能帮我解答一下，why...\n\n#### 扩展：\n``` \n// 查看当前配置\nnpm config list \n\n// 安装镜像\nnpm config set registry https://registry.npm.taobao.org/ \nnpm config set disturl https://npm.taobao.org/dist\n\n// 删除镜像\nnpm config delete registry \nnpm config delete disturl  \n\n```\n\n","slug":"ERR-registry-error-parsing-json","published":1,"updated":"2018-05-22T09:52:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwfzq000066fy6clfdjif","content":"<h4 id=\"报错日志：\"><a href=\"#报错日志：\" class=\"headerlink\" title=\"报错日志：\"></a>报错日志：</h4><p>ERR! registry error parsing json<br>ERR! registry error parsing json</p>\n<h4 id=\"解决过程：\"><a href=\"#解决过程：\" class=\"headerlink\" title=\"解决过程：\"></a>解决过程：</h4><p>从github上克隆一个项目，在npm i的时候，一直报npm err! registry error parsing json。请注意，在这儿有【registry】这个关键字哦，所以猜测是registry的问题，而公司用的网download是完全没有问题的。所以接下来我就试了一下淘宝镜像。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http://registry.cnpmjs.org/</span><br></pre></td></tr></table></figure>\n<p>然而，天不随人意。依然没有解决问题，接着，我找了度娘，度娘也告诉我就是 registry 的问题，那肿么办呢？我原本用的是无镜像的，那我抱着试试的态度，再来了一次。但是我将registry的值改了一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n<p>咦，这是一个什么鬼。居然成功了！！！<br>对头，mmp，他就是成功了。<br>希望能帮助到和我遇见同样问题的菜鸟。<br>并希望有料的大佬，能帮我解答一下，why…</p>\n<h4 id=\"扩展：\"><a href=\"#扩展：\" class=\"headerlink\" title=\"扩展：\"></a>扩展：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看当前配置</span><br><span class=\"line\">npm config list </span><br><span class=\"line\"></span><br><span class=\"line\">// 安装镜像</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org/ </span><br><span class=\"line\">npm config set disturl https://npm.taobao.org/dist</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除镜像</span><br><span class=\"line\">npm config delete registry </span><br><span class=\"line\">npm config delete disturl</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"报错日志：\"><a href=\"#报错日志：\" class=\"headerlink\" title=\"报错日志：\"></a>报错日志：</h4><p>ERR! registry error parsing json<br>ERR! registry error parsing json</p>\n<h4 id=\"解决过程：\"><a href=\"#解决过程：\" class=\"headerlink\" title=\"解决过程：\"></a>解决过程：</h4><p>从github上克隆一个项目，在npm i的时候，一直报npm err! registry error parsing json。请注意，在这儿有【registry】这个关键字哦，所以猜测是registry的问题，而公司用的网download是完全没有问题的。所以接下来我就试了一下淘宝镜像。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http://registry.cnpmjs.org/</span><br></pre></td></tr></table></figure>\n<p>然而，天不随人意。依然没有解决问题，接着，我找了度娘，度娘也告诉我就是 registry 的问题，那肿么办呢？我原本用的是无镜像的，那我抱着试试的态度，再来了一次。但是我将registry的值改了一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n<p>咦，这是一个什么鬼。居然成功了！！！<br>对头，mmp，他就是成功了。<br>希望能帮助到和我遇见同样问题的菜鸟。<br>并希望有料的大佬，能帮我解答一下，why…</p>\n<h4 id=\"扩展：\"><a href=\"#扩展：\" class=\"headerlink\" title=\"扩展：\"></a>扩展：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看当前配置</span><br><span class=\"line\">npm config list </span><br><span class=\"line\"></span><br><span class=\"line\">// 安装镜像</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org/ </span><br><span class=\"line\">npm config set disturl https://npm.taobao.org/dist</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除镜像</span><br><span class=\"line\">npm config delete registry </span><br><span class=\"line\">npm config delete disturl</span><br></pre></td></tr></table></figure>\n"},{"title":"GIT: error: pathspec 'xxx did not match any file(s) known to git","date":"2018-06-05T02:00:56.000Z","description":"切换分支的时候，报了标题这么个错误，现记录一下解决方法。","_content":"\n切换分支的时候，报了标题这么个错误，error: pathspec ''xxx did not match any file(s) known to git.\n![](/images/201806/WX20180605-100532.png)\n看见不能切换分支，我首先 `git status` 查看了一下当前状态，如下图\n![](/images/201806/WX20180605-100350.png)  \n然后，就会发现，其实我的这个错误非常明显，就是在我的 `beat` 分支下有文件修改，所以切换不了。ok，解决方法：\n1. 如果修改的这些文件没什么用，完全可以删除。（我这儿的这些文件就是 mac 自动生成的，完全就可以使用这种方法）\n``` bash\nrm -rf img/newIndex/.DS_Store img/newIndex/mobile/.DS_Store .DS_Store img/.DS_Store  \n```\n2. 根目录下添加 `.gitignore` 文件，将 `.DS_Store` 文件忽略即可\n\n我这儿问题比较简单。接下来，记录一下此类问题的其他解决方案。参考了[文章](https://stackoverflow.com/questions/33628862/git-error-pathspec-xxx-did-not-match-any-files-known-to-git)\n``` bash\n## 清除缓存\ngit rm -r --cached .  \n## git add\ngit add .\n## git commit\ngit commit -m \"hopefully fixed pathspec error\"\n```\n\n","source":"_posts/GIT-error-pathspec-xxx-did-not-match-any-file-s-known-to-git.md","raw":"---\ntitle: 'GIT: error: pathspec ''xxx did not match any file(s) known to git'\ndate: 2018-06-05 10:00:56\ntags: git\ndescription: 切换分支的时候，报了标题这么个错误，现记录一下解决方法。\n---\n\n切换分支的时候，报了标题这么个错误，error: pathspec ''xxx did not match any file(s) known to git.\n![](/images/201806/WX20180605-100532.png)\n看见不能切换分支，我首先 `git status` 查看了一下当前状态，如下图\n![](/images/201806/WX20180605-100350.png)  \n然后，就会发现，其实我的这个错误非常明显，就是在我的 `beat` 分支下有文件修改，所以切换不了。ok，解决方法：\n1. 如果修改的这些文件没什么用，完全可以删除。（我这儿的这些文件就是 mac 自动生成的，完全就可以使用这种方法）\n``` bash\nrm -rf img/newIndex/.DS_Store img/newIndex/mobile/.DS_Store .DS_Store img/.DS_Store  \n```\n2. 根目录下添加 `.gitignore` 文件，将 `.DS_Store` 文件忽略即可\n\n我这儿问题比较简单。接下来，记录一下此类问题的其他解决方案。参考了[文章](https://stackoverflow.com/questions/33628862/git-error-pathspec-xxx-did-not-match-any-files-known-to-git)\n``` bash\n## 清除缓存\ngit rm -r --cached .  \n## git add\ngit add .\n## git commit\ngit commit -m \"hopefully fixed pathspec error\"\n```\n\n","slug":"GIT-error-pathspec-xxx-did-not-match-any-file-s-known-to-git","published":1,"updated":"2018-07-27T10:34:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwfzv000166fy0m25x8io","content":"<p>切换分支的时候，报了标题这么个错误，error: pathspec ‘’xxx did not match any file(s) known to git.<br><img src=\"/images/201806/WX20180605-100532.png\" alt=\"\"><br>看见不能切换分支，我首先 <code>git status</code> 查看了一下当前状态，如下图<br><img src=\"/images/201806/WX20180605-100350.png\" alt=\"\"><br>然后，就会发现，其实我的这个错误非常明显，就是在我的 <code>beat</code> 分支下有文件修改，所以切换不了。ok，解决方法：</p>\n<ol>\n<li><p>如果修改的这些文件没什么用，完全可以删除。（我这儿的这些文件就是 mac 自动生成的，完全就可以使用这种方法）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf img/newIndex/.DS_Store img/newIndex/mobile/.DS_Store .DS_Store img/.DS_Store</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根目录下添加 <code>.gitignore</code> 文件，将 <code>.DS_Store</code> 文件忽略即可</p>\n</li>\n</ol>\n<p>我这儿问题比较简单。接下来，记录一下此类问题的其他解决方案。参考了<a href=\"https://stackoverflow.com/questions/33628862/git-error-pathspec-xxx-did-not-match-any-files-known-to-git\" target=\"_blank\" rel=\"noopener\">文章</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 清除缓存</span></span><br><span class=\"line\">git rm -r --cached .  </span><br><span class=\"line\"><span class=\"comment\">## git add</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"comment\">## git commit</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"hopefully fixed pathspec error\"</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>切换分支的时候，报了标题这么个错误，error: pathspec ‘’xxx did not match any file(s) known to git.<br><img src=\"/images/201806/WX20180605-100532.png\" alt=\"\"><br>看见不能切换分支，我首先 <code>git status</code> 查看了一下当前状态，如下图<br><img src=\"/images/201806/WX20180605-100350.png\" alt=\"\"><br>然后，就会发现，其实我的这个错误非常明显，就是在我的 <code>beat</code> 分支下有文件修改，所以切换不了。ok，解决方法：</p>\n<ol>\n<li><p>如果修改的这些文件没什么用，完全可以删除。（我这儿的这些文件就是 mac 自动生成的，完全就可以使用这种方法）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf img/newIndex/.DS_Store img/newIndex/mobile/.DS_Store .DS_Store img/.DS_Store</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根目录下添加 <code>.gitignore</code> 文件，将 <code>.DS_Store</code> 文件忽略即可</p>\n</li>\n</ol>\n<p>我这儿问题比较简单。接下来，记录一下此类问题的其他解决方案。参考了<a href=\"https://stackoverflow.com/questions/33628862/git-error-pathspec-xxx-did-not-match-any-files-known-to-git\" target=\"_blank\" rel=\"noopener\">文章</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 清除缓存</span></span><br><span class=\"line\">git rm -r --cached .  </span><br><span class=\"line\"><span class=\"comment\">## git add</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"comment\">## git commit</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"hopefully fixed pathspec error\"</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"command not found shell returned 127","date":"2018-05-31T10:00:26.000Z","description":"遇见问题，总结问题，简历错题库","_content":"\n在 vim 修改某个文件后，退出时，报了如此一个错误。日志如下：\n![](/images/WX20180531-180301.png)\n\n并不是什么大问题，只是在刚入坑 ssh 时，真的被人代入坑里了。\n``` ssh\n# 强制退出并保存\n:wq!\n```\n不是 `:!wq`，不知道有没有有缘的小伙伴和我看到同一篇博客，那肯定是会入坑的。若你更有缘，看见此篇，请务必与我联系。我要和你结拜！哈哈哈以此记录一下，算是在程序这条路上遇到的一点小插曲，顺便给自己增长一点乐趣，方便以后回味。 >..< ","source":"_posts/command-not-found-shell-returned-127.md","raw":"---\ntitle: command not found shell returned 127\ndate: 2018-05-31 18:00:26\ntags: [ssh, ques]\ndescription: 遇见问题，总结问题，简历错题库\n---\n\n在 vim 修改某个文件后，退出时，报了如此一个错误。日志如下：\n![](/images/WX20180531-180301.png)\n\n并不是什么大问题，只是在刚入坑 ssh 时，真的被人代入坑里了。\n``` ssh\n# 强制退出并保存\n:wq!\n```\n不是 `:!wq`，不知道有没有有缘的小伙伴和我看到同一篇博客，那肯定是会入坑的。若你更有缘，看见此篇，请务必与我联系。我要和你结拜！哈哈哈以此记录一下，算是在程序这条路上遇到的一点小插曲，顺便给自己增长一点乐趣，方便以后回味。 >..< ","slug":"command-not-found-shell-returned-127","published":1,"updated":"2018-07-27T10:34:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwg01000366fymr7u6c9m","content":"<p>在 vim 修改某个文件后，退出时，报了如此一个错误。日志如下：<br><img src=\"/images/WX20180531-180301.png\" alt=\"\"></p>\n<p>并不是什么大问题，只是在刚入坑 ssh 时，真的被人代入坑里了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 强制退出并保存</span><br><span class=\"line\">:wq!</span><br></pre></td></tr></table></figure></p>\n<p>不是 <code>:!wq</code>，不知道有没有有缘的小伙伴和我看到同一篇博客，那肯定是会入坑的。若你更有缘，看见此篇，请务必与我联系。我要和你结拜！哈哈哈以此记录一下，算是在程序这条路上遇到的一点小插曲，顺便给自己增长一点乐趣，方便以后回味。 &gt;..&lt; </p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 vim 修改某个文件后，退出时，报了如此一个错误。日志如下：<br><img src=\"/images/WX20180531-180301.png\" alt=\"\"></p>\n<p>并不是什么大问题，只是在刚入坑 ssh 时，真的被人代入坑里了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 强制退出并保存</span><br><span class=\"line\">:wq!</span><br></pre></td></tr></table></figure></p>\n<p>不是 <code>:!wq</code>，不知道有没有有缘的小伙伴和我看到同一篇博客，那肯定是会入坑的。若你更有缘，看见此篇，请务必与我联系。我要和你结拜！哈哈哈以此记录一下，算是在程序这条路上遇到的一点小插曲，顺便给自己增长一点乐趣，方便以后回味。 &gt;..&lt; </p>\n"},{"title":"Jade入门学习","date":"2018-05-17T12:09:31.000Z","_content":"jade是超高性能的node JavaScript模板引擎，有着非常强大的API和大量杰出的特性。它主要针对node的服务端。由于商标的原因，改为Pug，哈巴狗。Pug有它本身的缺点——可移植性差，调试困难，性能并不出色，但使用它可以加快开发效率。  \n## 标签嵌套\n使用缩进来表示标签间的嵌套关系，这样可以构建一个 HTML 代码的 __树状结构__ 语法  \n``` html\nul\n    li item A\n    li item B\n```\n为了节省空间， Pug 嵌套标签提供了一种 __内联式__ 语法\n``` html\na: img\n```   \nPug知道哪些元素是自闭合的，为了语法的完整性，也可以通过在标签后加上 / 来明确声明此标签是 __自闭合__ 的\n``` html\nimg\nimg/\ninput \ninput/\n```\nHTML5的 __DOCTYPE__ 书写如下\n``` html\ndoctype html\n```\n当然，也可以自定义一个 doctype 字面值。\n``` html\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\n```\n## 内容\nPug 提供了三种常用的方式来放置内容  \n+ 【管道文本】  \n  这是最简单的向模板添加纯文本的方法。只需要在每行前面加一个 | 字符，这个字符在类 Unix 系统下常用作“管道”功能，因此得名  \n``` html\n| 纯文本当然也可以包括 <strong>HTML</strong> 内容。\np\n  | 但它必须单独起一行。\n```\n+ 【标签内文本】\n这实际上是最常见的情况，文本只需要和标签名隔开一个空格即可.\n``` html\np 纯文本 <strong>HTML</strong> 内容\n```\n+ 【嵌入大段文本】\n有时可能想要写一个大段文本块。比如嵌入脚本或者样式。只需在标签后面接一个 .即可。 注意： 不能有空格  \n``` jade\nscript.\n    if (usingPug)\n        console.log('请用Pug')\n    else \n        console.log('傻不拉几')\n```\n\n## 属性\n1. 标签属性和 HTML 语法非常相似，它们的值就是普通的 JavaScript 表达式。可以用逗号作为属性分隔符，也可以不加逗号\n2. 如果有很多属性，可以把它们分几行写\n3. 如果有一个很长的属性，并且JavaScript运行时引擎支持ES2015模板字符串，可以使用它来写属性值\n\n``` jade\n// 1. \na(href='baidu.com') 百度\n= '\\n'\na(class='button' href='baidu.com') 百度\n= '\\n'\na(class='button', href='baidu.com') 百度\n\n// 2. \ninput(\n  type='checkbox'\n  name='agreement'\n  checked\n)\n\n// 3. \ninput(data-json=`\n  {\n    \"非常\": \"长的\",\n    \"数据\": true\n  }\n`)\n\n```\n4. 默认情况下，所有的属性都经过转义（即把特殊字符转换成转义序列）来防止诸如跨站脚本攻击之类的攻击方式。如果要使用特殊符号，需要使用 != 而不是 =  \n\n注意： 未经转义的缓存代码十分危险。必须正确处理和过滤用户的输入来避免跨站脚本攻击\n``` jade\ndiv(escaped=\"<code>\")\ndiv(unescaped!=\"<code>\")\n```\n5. 在Pug中，布尔值属性是经过映射的，这样布尔值(true和false)就能接受了。没有指定值时，默认是true\n\n``` jade\ninput(type='checkbox' checked)\n= '\\n'\ninput(type='checkbox' checked=true)\n= '\\n'\ninput(type='checkbox' checked=false)\n= '\\n'\ninput(type='checkbox' checked=true.toString())\n```\n6. style（样式）属性可以是一个字符串（就像其他普通的属性一样）还可以是一个对象\n\n``` jade\na(style={color: 'red', background: 'green'})\n```\n\n7. 标签嵌入\n\n#[标签名(标签属性)  标签内容]  \n8. 空格调整  \nPug 默认会去除一个标签前后的所有空格，而标签嵌入功能可以在需要嵌入的位置上处理前后空格\n\n``` jade\np\n  | 如果我不用嵌入功能来书写，一些标签比如\n  strong strong\n  | 和\n  em em\n  | 可能会产生意外的结果。\np.\n  如果用了嵌入，在 #[strong strong] 和 #[em em] 旁的空格就会让我舒服多了。\n```\n效果，前者strong前后无空格，后者有空格。（啦strong啦啦，啦 strong 啦）\n\n9. 注释\n``` jade \n// 注释\n//- 注释不输出，即不会出现在结果中\n// \n    块注释\n    继续写块注释\n```\n\nps： 所有以 < 开头的行都会被当作纯文本，因此直接写一个 HTML 风格的条件注释也是没问题的\n``` jade\n<!--[if IE 8]>\n<html lang=\"en\" class=\"lt-ie9\">\n<![endif]-->\n<!--[if gt IE 8]><!-->\n<html lang=\"en\">\n<!--<![endif]-->\n```\n10. 使用=或#{}来进行变量的真实值替换  \n在 #{ 和 } 里面的代码也会被求值、转义，并最终嵌入到模板的渲染输出中.Pug 足够聪明来分辨到底哪里才是嵌入表达式的结束，所以不用担心表达式中有 }，也不需要额外的转义;使用!{}嵌入没有转义的文本进入模板中\n\n## 变量\n变量来源有三种，分别是pug文件内部、命令行参数和外部JSON文件。\n``` jade\n// 文件内部\n-var val = \"aaaa\";\np= val\n\n// 命令行\npug test.pug -P -w --obj '{val: \"fldasj\"}'\n\n// 外部json文件\npug test.pug -P -w -O test.json\n```\n\n## include\n包含（include）功能允许把另外的文件内容插入进来,被包含的如果不是 Pug 文件，那么就只会当作文本内容来引入 \n``` jade\n//- index.pug\ndoctype html\nhtml\n  include includes/head.pug\n  body\n    h1 我的网站\n    p 欢迎来到我这简陋得不能再简陋的网站。\n    include includes/foot.pug\n\n//- includes/head.pug\nhead\n  title 我的网站\n  script(src='/javascripts/jquery.js')\n  script(src='/javascripts/app.js')\n  \n//- includes/foot.pug\nfooter#footer\n  p Copyright (c) foobar\n```\n\n## 继承\nPug 支持使用 block 和 extends 关键字进行模板的继承。一个称之为“块”（block）的代码块，可以被子模板覆盖、替换。这个过程是递归的。   \n``` jade\n复制代码\n//- layout.pug\nhtml\n  head\n　　 meta(charset=\"UTF-8\")\n    title 我的站点 - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p 一些页脚的内容\n\n//- page-a.pug\nextends layout.pug\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  - var pets = ['猫', '狗']\n  each petName in pets\n    include pet.pug\n\n//- pet.pug\np= petName  // 或者 p #{petName}\n```  \n\n值得注意的是，因为这里的 foot 块 没有 被重定义，所以会依然输出“一些页脚的内容”  \n\n## 扩展\nPug 允许去替换（默认的行为）、prepend（向头部添加内容），或者 append（向尾部添加内容）一个块。\n\n\n\n\n\n\n\n\n\n\n**`参考文献：`**   [jade](https://www.cnblogs.com/xiaohuochai/p/7222227.html)\n","source":"_posts/Jade入门学习.md","raw":"---\ntitle: Jade入门学习\ndate: 2018-05-17 20:09:31\ntags: [jade, pug]\n---\njade是超高性能的node JavaScript模板引擎，有着非常强大的API和大量杰出的特性。它主要针对node的服务端。由于商标的原因，改为Pug，哈巴狗。Pug有它本身的缺点——可移植性差，调试困难，性能并不出色，但使用它可以加快开发效率。  \n## 标签嵌套\n使用缩进来表示标签间的嵌套关系，这样可以构建一个 HTML 代码的 __树状结构__ 语法  \n``` html\nul\n    li item A\n    li item B\n```\n为了节省空间， Pug 嵌套标签提供了一种 __内联式__ 语法\n``` html\na: img\n```   \nPug知道哪些元素是自闭合的，为了语法的完整性，也可以通过在标签后加上 / 来明确声明此标签是 __自闭合__ 的\n``` html\nimg\nimg/\ninput \ninput/\n```\nHTML5的 __DOCTYPE__ 书写如下\n``` html\ndoctype html\n```\n当然，也可以自定义一个 doctype 字面值。\n``` html\ndoctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\n```\n## 内容\nPug 提供了三种常用的方式来放置内容  \n+ 【管道文本】  \n  这是最简单的向模板添加纯文本的方法。只需要在每行前面加一个 | 字符，这个字符在类 Unix 系统下常用作“管道”功能，因此得名  \n``` html\n| 纯文本当然也可以包括 <strong>HTML</strong> 内容。\np\n  | 但它必须单独起一行。\n```\n+ 【标签内文本】\n这实际上是最常见的情况，文本只需要和标签名隔开一个空格即可.\n``` html\np 纯文本 <strong>HTML</strong> 内容\n```\n+ 【嵌入大段文本】\n有时可能想要写一个大段文本块。比如嵌入脚本或者样式。只需在标签后面接一个 .即可。 注意： 不能有空格  \n``` jade\nscript.\n    if (usingPug)\n        console.log('请用Pug')\n    else \n        console.log('傻不拉几')\n```\n\n## 属性\n1. 标签属性和 HTML 语法非常相似，它们的值就是普通的 JavaScript 表达式。可以用逗号作为属性分隔符，也可以不加逗号\n2. 如果有很多属性，可以把它们分几行写\n3. 如果有一个很长的属性，并且JavaScript运行时引擎支持ES2015模板字符串，可以使用它来写属性值\n\n``` jade\n// 1. \na(href='baidu.com') 百度\n= '\\n'\na(class='button' href='baidu.com') 百度\n= '\\n'\na(class='button', href='baidu.com') 百度\n\n// 2. \ninput(\n  type='checkbox'\n  name='agreement'\n  checked\n)\n\n// 3. \ninput(data-json=`\n  {\n    \"非常\": \"长的\",\n    \"数据\": true\n  }\n`)\n\n```\n4. 默认情况下，所有的属性都经过转义（即把特殊字符转换成转义序列）来防止诸如跨站脚本攻击之类的攻击方式。如果要使用特殊符号，需要使用 != 而不是 =  \n\n注意： 未经转义的缓存代码十分危险。必须正确处理和过滤用户的输入来避免跨站脚本攻击\n``` jade\ndiv(escaped=\"<code>\")\ndiv(unescaped!=\"<code>\")\n```\n5. 在Pug中，布尔值属性是经过映射的，这样布尔值(true和false)就能接受了。没有指定值时，默认是true\n\n``` jade\ninput(type='checkbox' checked)\n= '\\n'\ninput(type='checkbox' checked=true)\n= '\\n'\ninput(type='checkbox' checked=false)\n= '\\n'\ninput(type='checkbox' checked=true.toString())\n```\n6. style（样式）属性可以是一个字符串（就像其他普通的属性一样）还可以是一个对象\n\n``` jade\na(style={color: 'red', background: 'green'})\n```\n\n7. 标签嵌入\n\n#[标签名(标签属性)  标签内容]  \n8. 空格调整  \nPug 默认会去除一个标签前后的所有空格，而标签嵌入功能可以在需要嵌入的位置上处理前后空格\n\n``` jade\np\n  | 如果我不用嵌入功能来书写，一些标签比如\n  strong strong\n  | 和\n  em em\n  | 可能会产生意外的结果。\np.\n  如果用了嵌入，在 #[strong strong] 和 #[em em] 旁的空格就会让我舒服多了。\n```\n效果，前者strong前后无空格，后者有空格。（啦strong啦啦，啦 strong 啦）\n\n9. 注释\n``` jade \n// 注释\n//- 注释不输出，即不会出现在结果中\n// \n    块注释\n    继续写块注释\n```\n\nps： 所有以 < 开头的行都会被当作纯文本，因此直接写一个 HTML 风格的条件注释也是没问题的\n``` jade\n<!--[if IE 8]>\n<html lang=\"en\" class=\"lt-ie9\">\n<![endif]-->\n<!--[if gt IE 8]><!-->\n<html lang=\"en\">\n<!--<![endif]-->\n```\n10. 使用=或#{}来进行变量的真实值替换  \n在 #{ 和 } 里面的代码也会被求值、转义，并最终嵌入到模板的渲染输出中.Pug 足够聪明来分辨到底哪里才是嵌入表达式的结束，所以不用担心表达式中有 }，也不需要额外的转义;使用!{}嵌入没有转义的文本进入模板中\n\n## 变量\n变量来源有三种，分别是pug文件内部、命令行参数和外部JSON文件。\n``` jade\n// 文件内部\n-var val = \"aaaa\";\np= val\n\n// 命令行\npug test.pug -P -w --obj '{val: \"fldasj\"}'\n\n// 外部json文件\npug test.pug -P -w -O test.json\n```\n\n## include\n包含（include）功能允许把另外的文件内容插入进来,被包含的如果不是 Pug 文件，那么就只会当作文本内容来引入 \n``` jade\n//- index.pug\ndoctype html\nhtml\n  include includes/head.pug\n  body\n    h1 我的网站\n    p 欢迎来到我这简陋得不能再简陋的网站。\n    include includes/foot.pug\n\n//- includes/head.pug\nhead\n  title 我的网站\n  script(src='/javascripts/jquery.js')\n  script(src='/javascripts/app.js')\n  \n//- includes/foot.pug\nfooter#footer\n  p Copyright (c) foobar\n```\n\n## 继承\nPug 支持使用 block 和 extends 关键字进行模板的继承。一个称之为“块”（block）的代码块，可以被子模板覆盖、替换。这个过程是递归的。   \n``` jade\n复制代码\n//- layout.pug\nhtml\n  head\n　　 meta(charset=\"UTF-8\")\n    title 我的站点 - #{title}\n    block scripts\n      script(src='/jquery.js')\n  body\n    block content\n    block foot\n      #footer\n        p 一些页脚的内容\n\n//- page-a.pug\nextends layout.pug\n\nblock scripts\n  script(src='/jquery.js')\n  script(src='/pets.js')\n\nblock content\n  h1= title\n  - var pets = ['猫', '狗']\n  each petName in pets\n    include pet.pug\n\n//- pet.pug\np= petName  // 或者 p #{petName}\n```  \n\n值得注意的是，因为这里的 foot 块 没有 被重定义，所以会依然输出“一些页脚的内容”  \n\n## 扩展\nPug 允许去替换（默认的行为）、prepend（向头部添加内容），或者 append（向尾部添加内容）一个块。\n\n\n\n\n\n\n\n\n\n\n**`参考文献：`**   [jade](https://www.cnblogs.com/xiaohuochai/p/7222227.html)\n","slug":"Jade入门学习","published":1,"updated":"2018-07-27T10:34:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwg03000466fypuwthzdu","content":"<p>jade是超高性能的node JavaScript模板引擎，有着非常强大的API和大量杰出的特性。它主要针对node的服务端。由于商标的原因，改为Pug，哈巴狗。Pug有它本身的缺点——可移植性差，调试困难，性能并不出色，但使用它可以加快开发效率。  </p>\n<h2 id=\"标签嵌套\"><a href=\"#标签嵌套\" class=\"headerlink\" title=\"标签嵌套\"></a>标签嵌套</h2><p>使用缩进来表示标签间的嵌套关系，这样可以构建一个 HTML 代码的 <strong>树状结构</strong> 语法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul</span><br><span class=\"line\">    li item A</span><br><span class=\"line\">    li item B</span><br></pre></td></tr></table></figure></p>\n<p>为了节省空间， Pug 嵌套标签提供了一种 <strong>内联式</strong> 语法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: img</span><br><span class=\"line\">```   </span><br><span class=\"line\">Pug知道哪些元素是自闭合的，为了语法的完整性，也可以通过在标签后加上 / 来明确声明此标签是 __自闭合__ 的</span><br><span class=\"line\">``` html</span><br><span class=\"line\">img</span><br><span class=\"line\">img/</span><br><span class=\"line\">input </span><br><span class=\"line\">input/</span><br></pre></td></tr></table></figure></p>\n<p>HTML5的 <strong>DOCTYPE</strong> 书写如下<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doctype html</span><br></pre></td></tr></table></figure></p>\n<p>当然，也可以自定义一个 doctype 字面值。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><p>Pug 提供了三种常用的方式来放置内容  </p>\n<ul>\n<li><p>【管道文本】<br>这是最简单的向模板添加纯文本的方法。只需要在每行前面加一个 | 字符，这个字符在类 Unix 系统下常用作“管道”功能，因此得名  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 纯文本当然也可以包括 <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span> 内容。</span><br><span class=\"line\">p</span><br><span class=\"line\">  | 但它必须单独起一行。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>【标签内文本】<br>这实际上是最常见的情况，文本只需要和标签名隔开一个空格即可.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p 纯文本 <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span> 内容</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>【嵌入大段文本】<br>有时可能想要写一个大段文本块。比如嵌入脚本或者样式。只需在标签后面接一个 .即可。 注意： 不能有空格  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script.</span><br><span class=\"line\">    if (usingPug)</span><br><span class=\"line\">        console.log(&apos;请用Pug&apos;)</span><br><span class=\"line\">    else </span><br><span class=\"line\">        console.log(&apos;傻不拉几&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ol>\n<li>标签属性和 HTML 语法非常相似，它们的值就是普通的 JavaScript 表达式。可以用逗号作为属性分隔符，也可以不加逗号</li>\n<li>如果有很多属性，可以把它们分几行写</li>\n<li>如果有一个很长的属性，并且JavaScript运行时引擎支持ES2015模板字符串，可以使用它来写属性值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. </span><br><span class=\"line\">a(href=&apos;baidu.com&apos;) 百度</span><br><span class=\"line\">= &apos;\\n&apos;</span><br><span class=\"line\">a(class=&apos;button&apos; href=&apos;baidu.com&apos;) 百度</span><br><span class=\"line\">= &apos;\\n&apos;</span><br><span class=\"line\">a(class=&apos;button&apos;, href=&apos;baidu.com&apos;) 百度</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. </span><br><span class=\"line\">input(</span><br><span class=\"line\">  type=&apos;checkbox&apos;</span><br><span class=\"line\">  name=&apos;agreement&apos;</span><br><span class=\"line\">  checked</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. </span><br><span class=\"line\">input(data-json=`</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;非常&quot;: &quot;长的&quot;,</span><br><span class=\"line\">    &quot;数据&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">`)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>默认情况下，所有的属性都经过转义（即把特殊字符转换成转义序列）来防止诸如跨站脚本攻击之类的攻击方式。如果要使用特殊符号，需要使用 != 而不是 =  </li>\n</ol>\n<p>注意： 未经转义的缓存代码十分危险。必须正确处理和过滤用户的输入来避免跨站脚本攻击<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div(escaped=&quot;&lt;code&gt;&quot;)</span><br><span class=\"line\">div(unescaped!=&quot;&lt;code&gt;&quot;)</span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li>在Pug中，布尔值属性是经过映射的，这样布尔值(true和false)就能接受了。没有指定值时，默认是true</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input(type=&apos;checkbox&apos; checked)</span><br><span class=\"line\">= &apos;\\n&apos;</span><br><span class=\"line\">input(type=&apos;checkbox&apos; checked=true)</span><br><span class=\"line\">= &apos;\\n&apos;</span><br><span class=\"line\">input(type=&apos;checkbox&apos; checked=false)</span><br><span class=\"line\">= &apos;\\n&apos;</span><br><span class=\"line\">input(type=&apos;checkbox&apos; checked=true.toString())</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>style（样式）属性可以是一个字符串（就像其他普通的属性一样）还可以是一个对象</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a(style=&#123;color: &apos;red&apos;, background: &apos;green&apos;&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>标签嵌入</li>\n</ol>\n<p>#[标签名(标签属性)  标签内容]  </p>\n<ol start=\"8\">\n<li>空格调整<br>Pug 默认会去除一个标签前后的所有空格，而标签嵌入功能可以在需要嵌入的位置上处理前后空格</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p</span><br><span class=\"line\">  | 如果我不用嵌入功能来书写，一些标签比如</span><br><span class=\"line\">  strong strong</span><br><span class=\"line\">  | 和</span><br><span class=\"line\">  em em</span><br><span class=\"line\">  | 可能会产生意外的结果。</span><br><span class=\"line\">p.</span><br><span class=\"line\">  如果用了嵌入，在 #[strong strong] 和 #[em em] 旁的空格就会让我舒服多了。</span><br></pre></td></tr></table></figure>\n<p>效果，前者strong前后无空格，后者有空格。（啦strong啦啦，啦 strong 啦）</p>\n<ol start=\"9\">\n<li>注释<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注释</span><br><span class=\"line\">//- 注释不输出，即不会出现在结果中</span><br><span class=\"line\">// </span><br><span class=\"line\">    块注释</span><br><span class=\"line\">    继续写块注释</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>ps： 所有以 &lt; 开头的行都会被当作纯文本，因此直接写一个 HTML 风格的条件注释也是没问题的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--[if IE 8]&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot; class=&quot;lt-ie9&quot;&gt;</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br><span class=\"line\">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;!--&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"10\">\n<li>使用=或#{}来进行变量的真实值替换<br>在 #{ 和 } 里面的代码也会被求值、转义，并最终嵌入到模板的渲染输出中.Pug 足够聪明来分辨到底哪里才是嵌入表达式的结束，所以不用担心表达式中有 }，也不需要额外的转义;使用!{}嵌入没有转义的文本进入模板中</li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量来源有三种，分别是pug文件内部、命令行参数和外部JSON文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文件内部</span><br><span class=\"line\">-var val = &quot;aaaa&quot;;</span><br><span class=\"line\">p= val</span><br><span class=\"line\"></span><br><span class=\"line\">// 命令行</span><br><span class=\"line\">pug test.pug -P -w --obj &apos;&#123;val: &quot;fldasj&quot;&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 外部json文件</span><br><span class=\"line\">pug test.pug -P -w -O test.json</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a>include</h2><p>包含（include）功能允许把另外的文件内容插入进来,被包含的如果不是 Pug 文件，那么就只会当作文本内容来引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//- index.pug</span><br><span class=\"line\">doctype html</span><br><span class=\"line\">html</span><br><span class=\"line\">  include includes/head.pug</span><br><span class=\"line\">  body</span><br><span class=\"line\">    h1 我的网站</span><br><span class=\"line\">    p 欢迎来到我这简陋得不能再简陋的网站。</span><br><span class=\"line\">    include includes/foot.pug</span><br><span class=\"line\"></span><br><span class=\"line\">//- includes/head.pug</span><br><span class=\"line\">head</span><br><span class=\"line\">  title 我的网站</span><br><span class=\"line\">  script(src=&apos;/javascripts/jquery.js&apos;)</span><br><span class=\"line\">  script(src=&apos;/javascripts/app.js&apos;)</span><br><span class=\"line\">  </span><br><span class=\"line\">//- includes/foot.pug</span><br><span class=\"line\">footer#footer</span><br><span class=\"line\">  p Copyright (c) foobar</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>Pug 支持使用 block 和 extends 关键字进行模板的继承。一个称之为“块”（block）的代码块，可以被子模板覆盖、替换。这个过程是递归的。   </p>\n<pre><code class=\"jade\">复制代码\n//- layout.pug\nhtml\n  head\n　　 meta(charset=&quot;UTF-8&quot;)\n    title 我的站点 - #{title}\n    block scripts\n      script(src=&apos;/jquery.js&apos;)\n  body\n    block content\n    block foot\n      #footer\n        p 一些页脚的内容\n\n//- page-a.pug\nextends layout.pug\n\nblock scripts\n  script(src=&apos;/jquery.js&apos;)\n  script(src=&apos;/pets.js&apos;)\n\nblock content\n  h1= title\n  - var pets = [&apos;猫&apos;, &apos;狗&apos;]\n  each petName in pets\n    include pet.pug\n\n//- pet.pug\np= petName  // 或者 p #{petName}\n</code></pre>\n<p>值得注意的是，因为这里的 foot 块 没有 被重定义，所以会依然输出“一些页脚的内容”  </p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>Pug 允许去替换（默认的行为）、prepend（向头部添加内容），或者 append（向尾部添加内容）一个块。</p>\n<p><strong><code>参考文献：</code></strong>   <a href=\"https://www.cnblogs.com/xiaohuochai/p/7222227.html\" target=\"_blank\" rel=\"noopener\">jade</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>jade是超高性能的node JavaScript模板引擎，有着非常强大的API和大量杰出的特性。它主要针对node的服务端。由于商标的原因，改为Pug，哈巴狗。Pug有它本身的缺点——可移植性差，调试困难，性能并不出色，但使用它可以加快开发效率。  </p>\n<h2 id=\"标签嵌套\"><a href=\"#标签嵌套\" class=\"headerlink\" title=\"标签嵌套\"></a>标签嵌套</h2><p>使用缩进来表示标签间的嵌套关系，这样可以构建一个 HTML 代码的 <strong>树状结构</strong> 语法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul</span><br><span class=\"line\">    li item A</span><br><span class=\"line\">    li item B</span><br></pre></td></tr></table></figure></p>\n<p>为了节省空间， Pug 嵌套标签提供了一种 <strong>内联式</strong> 语法<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: img</span><br><span class=\"line\">```   </span><br><span class=\"line\">Pug知道哪些元素是自闭合的，为了语法的完整性，也可以通过在标签后加上 / 来明确声明此标签是 __自闭合__ 的</span><br><span class=\"line\">``` html</span><br><span class=\"line\">img</span><br><span class=\"line\">img/</span><br><span class=\"line\">input </span><br><span class=\"line\">input/</span><br></pre></td></tr></table></figure></p>\n<p>HTML5的 <strong>DOCTYPE</strong> 书写如下<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doctype html</span><br></pre></td></tr></table></figure></p>\n<p>当然，也可以自定义一个 doctype 字面值。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><p>Pug 提供了三种常用的方式来放置内容  </p>\n<ul>\n<li><p>【管道文本】<br>这是最简单的向模板添加纯文本的方法。只需要在每行前面加一个 | 字符，这个字符在类 Unix 系统下常用作“管道”功能，因此得名  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 纯文本当然也可以包括 <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span> 内容。</span><br><span class=\"line\">p</span><br><span class=\"line\">  | 但它必须单独起一行。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>【标签内文本】<br>这实际上是最常见的情况，文本只需要和标签名隔开一个空格即可.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p 纯文本 <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span> 内容</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>【嵌入大段文本】<br>有时可能想要写一个大段文本块。比如嵌入脚本或者样式。只需在标签后面接一个 .即可。 注意： 不能有空格  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script.</span><br><span class=\"line\">    if (usingPug)</span><br><span class=\"line\">        console.log(&apos;请用Pug&apos;)</span><br><span class=\"line\">    else </span><br><span class=\"line\">        console.log(&apos;傻不拉几&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ol>\n<li>标签属性和 HTML 语法非常相似，它们的值就是普通的 JavaScript 表达式。可以用逗号作为属性分隔符，也可以不加逗号</li>\n<li>如果有很多属性，可以把它们分几行写</li>\n<li>如果有一个很长的属性，并且JavaScript运行时引擎支持ES2015模板字符串，可以使用它来写属性值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. </span><br><span class=\"line\">a(href=&apos;baidu.com&apos;) 百度</span><br><span class=\"line\">= &apos;\\n&apos;</span><br><span class=\"line\">a(class=&apos;button&apos; href=&apos;baidu.com&apos;) 百度</span><br><span class=\"line\">= &apos;\\n&apos;</span><br><span class=\"line\">a(class=&apos;button&apos;, href=&apos;baidu.com&apos;) 百度</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. </span><br><span class=\"line\">input(</span><br><span class=\"line\">  type=&apos;checkbox&apos;</span><br><span class=\"line\">  name=&apos;agreement&apos;</span><br><span class=\"line\">  checked</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. </span><br><span class=\"line\">input(data-json=`</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;非常&quot;: &quot;长的&quot;,</span><br><span class=\"line\">    &quot;数据&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">`)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>默认情况下，所有的属性都经过转义（即把特殊字符转换成转义序列）来防止诸如跨站脚本攻击之类的攻击方式。如果要使用特殊符号，需要使用 != 而不是 =  </li>\n</ol>\n<p>注意： 未经转义的缓存代码十分危险。必须正确处理和过滤用户的输入来避免跨站脚本攻击<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div(escaped=&quot;&lt;code&gt;&quot;)</span><br><span class=\"line\">div(unescaped!=&quot;&lt;code&gt;&quot;)</span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li>在Pug中，布尔值属性是经过映射的，这样布尔值(true和false)就能接受了。没有指定值时，默认是true</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input(type=&apos;checkbox&apos; checked)</span><br><span class=\"line\">= &apos;\\n&apos;</span><br><span class=\"line\">input(type=&apos;checkbox&apos; checked=true)</span><br><span class=\"line\">= &apos;\\n&apos;</span><br><span class=\"line\">input(type=&apos;checkbox&apos; checked=false)</span><br><span class=\"line\">= &apos;\\n&apos;</span><br><span class=\"line\">input(type=&apos;checkbox&apos; checked=true.toString())</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>style（样式）属性可以是一个字符串（就像其他普通的属性一样）还可以是一个对象</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a(style=&#123;color: &apos;red&apos;, background: &apos;green&apos;&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>标签嵌入</li>\n</ol>\n<p>#[标签名(标签属性)  标签内容]  </p>\n<ol start=\"8\">\n<li>空格调整<br>Pug 默认会去除一个标签前后的所有空格，而标签嵌入功能可以在需要嵌入的位置上处理前后空格</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p</span><br><span class=\"line\">  | 如果我不用嵌入功能来书写，一些标签比如</span><br><span class=\"line\">  strong strong</span><br><span class=\"line\">  | 和</span><br><span class=\"line\">  em em</span><br><span class=\"line\">  | 可能会产生意外的结果。</span><br><span class=\"line\">p.</span><br><span class=\"line\">  如果用了嵌入，在 #[strong strong] 和 #[em em] 旁的空格就会让我舒服多了。</span><br></pre></td></tr></table></figure>\n<p>效果，前者strong前后无空格，后者有空格。（啦strong啦啦，啦 strong 啦）</p>\n<ol start=\"9\">\n<li>注释<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注释</span><br><span class=\"line\">//- 注释不输出，即不会出现在结果中</span><br><span class=\"line\">// </span><br><span class=\"line\">    块注释</span><br><span class=\"line\">    继续写块注释</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>ps： 所有以 &lt; 开头的行都会被当作纯文本，因此直接写一个 HTML 风格的条件注释也是没问题的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--[if IE 8]&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot; class=&quot;lt-ie9&quot;&gt;</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br><span class=\"line\">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;!--&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"10\">\n<li>使用=或#{}来进行变量的真实值替换<br>在 #{ 和 } 里面的代码也会被求值、转义，并最终嵌入到模板的渲染输出中.Pug 足够聪明来分辨到底哪里才是嵌入表达式的结束，所以不用担心表达式中有 }，也不需要额外的转义;使用!{}嵌入没有转义的文本进入模板中</li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量来源有三种，分别是pug文件内部、命令行参数和外部JSON文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文件内部</span><br><span class=\"line\">-var val = &quot;aaaa&quot;;</span><br><span class=\"line\">p= val</span><br><span class=\"line\"></span><br><span class=\"line\">// 命令行</span><br><span class=\"line\">pug test.pug -P -w --obj &apos;&#123;val: &quot;fldasj&quot;&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 外部json文件</span><br><span class=\"line\">pug test.pug -P -w -O test.json</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a>include</h2><p>包含（include）功能允许把另外的文件内容插入进来,被包含的如果不是 Pug 文件，那么就只会当作文本内容来引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//- index.pug</span><br><span class=\"line\">doctype html</span><br><span class=\"line\">html</span><br><span class=\"line\">  include includes/head.pug</span><br><span class=\"line\">  body</span><br><span class=\"line\">    h1 我的网站</span><br><span class=\"line\">    p 欢迎来到我这简陋得不能再简陋的网站。</span><br><span class=\"line\">    include includes/foot.pug</span><br><span class=\"line\"></span><br><span class=\"line\">//- includes/head.pug</span><br><span class=\"line\">head</span><br><span class=\"line\">  title 我的网站</span><br><span class=\"line\">  script(src=&apos;/javascripts/jquery.js&apos;)</span><br><span class=\"line\">  script(src=&apos;/javascripts/app.js&apos;)</span><br><span class=\"line\">  </span><br><span class=\"line\">//- includes/foot.pug</span><br><span class=\"line\">footer#footer</span><br><span class=\"line\">  p Copyright (c) foobar</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>Pug 支持使用 block 和 extends 关键字进行模板的继承。一个称之为“块”（block）的代码块，可以被子模板覆盖、替换。这个过程是递归的。   </p>\n<pre><code class=\"jade\">复制代码\n//- layout.pug\nhtml\n  head\n　　 meta(charset=&quot;UTF-8&quot;)\n    title 我的站点 - #{title}\n    block scripts\n      script(src=&apos;/jquery.js&apos;)\n  body\n    block content\n    block foot\n      #footer\n        p 一些页脚的内容\n\n//- page-a.pug\nextends layout.pug\n\nblock scripts\n  script(src=&apos;/jquery.js&apos;)\n  script(src=&apos;/pets.js&apos;)\n\nblock content\n  h1= title\n  - var pets = [&apos;猫&apos;, &apos;狗&apos;]\n  each petName in pets\n    include pet.pug\n\n//- pet.pug\np= petName  // 或者 p #{petName}\n</code></pre>\n<p>值得注意的是，因为这里的 foot 块 没有 被重定义，所以会依然输出“一些页脚的内容”  </p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>Pug 允许去替换（默认的行为）、prepend（向头部添加内容），或者 append（向尾部添加内容）一个块。</p>\n<p><strong><code>参考文献：</code></strong>   <a href=\"https://www.cnblogs.com/xiaohuochai/p/7222227.html\" target=\"_blank\" rel=\"noopener\">jade</a></p>\n"},{"title":"git常用操作命令","date":"2018-05-24T07:22:30.000Z","description":"本文为自我学习篇，当做自己做的笔记。仅供自己以后翻阅","_content":"\n*Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。*\n\n下面，请跟着 Mobro 一起了解常用的 git 命令：\n\n### 初始化\n``` git\ngit config --global \"user.name\"         # 全局配置用户名\ngit config --global \"user.email\"        # email\ngit config user.name/user.email         # 查看用户名/邮箱\nssh-keygen -t rsa -C \"mobro_chu@163.com\"    # 创建ssh key\n    ## 公钥是要放在 github 上，密钥就不必了\nssh -T git@github.com       # 检查连接是否成功\ngit remote add origin git@server-name:path/repo-name.git    \n# 与远程仓库建立连接\n# eg: git remote add origin git@github.com:MobroChu/mine.git\n```\n\n### git分支相关\n\n``` git\ngit branch          # 查看当前分支  \ngit branch <name>   # 创建一个 name 的分支  \ngit branch -m A B   # 将原来为A的分支，改名成 B  \ngit branch -m C     # 将当前分支改名为 C\ngit branch -d E     # 删除分支，不是当前正打开的分支\ngit branch -D F     # 删除分支，当前正打开的分支\ngit branch <branch_name> <hash_value>   # 恢复被删除的分支\ngit push origin :G  # 删除远程仓库的G分支\ngit checkout -b A   # 创建A分支，并切换到A分支下\ngit checkout A      # 从当前分支切换到A分支下\ngit merge A         # 将A分支合并到当前分支\n```\n\n### 版本相关\n``` git\ngit status          # 查看当前仓库状态\ngit log             # 查看日志\ngit reflog          # 查看命令记录\ngit diff <filename> # 查看暂存区filename这个文件与仓库中filename文件的不同\ngit diff HEAD -- <filename> # 查看工作区和版本库里面最新版本中filename的区别\ngit reset HEAD <filename>   # 撤销缓存区的修改\ngit reset --hard HEAD/HEAD~100/版本号   #版本回退\n    ## HEAD 指向的是当前版本\n    ## HEAD~100 从当前版本向前退100个版本\n    ## 版本号 不用全部复制，只需要版本号的前几位就好了\ngit add             # 将文件添加到要提交的队列中\ngit commit -m \"xxx\" # 提交的到暂存区，并添加注释xxx\ngit commit -am \"xxx\"       \n===>   git add <modify files> , git commit -m \"xxx\"\ngit push -u origin A    # 推送到远程仓库\n    ## -u 一般情况下，第一次才有，方便以后推送或者拉去，可以简化命令\n    ## origin 远程仓库名，可以换，但很少有人去换\n    ## A 要推送到A分支下\n```\n\n### 常使用到的暂存命令\n``` git\ngit stash           # 添加储藏\ngit stash push -m \"注释内容\"\ngit stash list      # 查看储藏\n# 使用 num 这个版本号的 stash， 其中 num 为数字\n## pop 会删除 stash 队列中的 num 这个缓存版本，apply 不会。\ngit stash pop stash@{num}\ngit stash apply stash@{num}\n```\n\n### 其他\n``` git\ngit pull            # 拉取远程当前分支的最新代码\n# 把所有的remote变化都拉下来，并且将你最新的commit置于最顶上\ngit pull --rebase   \n```\n\n还有许多命令，待后续补齐。just 未完待续、\n\n","source":"_posts/git常用操作命令.md","raw":"---\ntitle: git常用操作命令\ndate: 2018-05-24 15:22:30\ntags: git\ndescription: 本文为自我学习篇，当做自己做的笔记。仅供自己以后翻阅\n---\n\n*Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。*\n\n下面，请跟着 Mobro 一起了解常用的 git 命令：\n\n### 初始化\n``` git\ngit config --global \"user.name\"         # 全局配置用户名\ngit config --global \"user.email\"        # email\ngit config user.name/user.email         # 查看用户名/邮箱\nssh-keygen -t rsa -C \"mobro_chu@163.com\"    # 创建ssh key\n    ## 公钥是要放在 github 上，密钥就不必了\nssh -T git@github.com       # 检查连接是否成功\ngit remote add origin git@server-name:path/repo-name.git    \n# 与远程仓库建立连接\n# eg: git remote add origin git@github.com:MobroChu/mine.git\n```\n\n### git分支相关\n\n``` git\ngit branch          # 查看当前分支  \ngit branch <name>   # 创建一个 name 的分支  \ngit branch -m A B   # 将原来为A的分支，改名成 B  \ngit branch -m C     # 将当前分支改名为 C\ngit branch -d E     # 删除分支，不是当前正打开的分支\ngit branch -D F     # 删除分支，当前正打开的分支\ngit branch <branch_name> <hash_value>   # 恢复被删除的分支\ngit push origin :G  # 删除远程仓库的G分支\ngit checkout -b A   # 创建A分支，并切换到A分支下\ngit checkout A      # 从当前分支切换到A分支下\ngit merge A         # 将A分支合并到当前分支\n```\n\n### 版本相关\n``` git\ngit status          # 查看当前仓库状态\ngit log             # 查看日志\ngit reflog          # 查看命令记录\ngit diff <filename> # 查看暂存区filename这个文件与仓库中filename文件的不同\ngit diff HEAD -- <filename> # 查看工作区和版本库里面最新版本中filename的区别\ngit reset HEAD <filename>   # 撤销缓存区的修改\ngit reset --hard HEAD/HEAD~100/版本号   #版本回退\n    ## HEAD 指向的是当前版本\n    ## HEAD~100 从当前版本向前退100个版本\n    ## 版本号 不用全部复制，只需要版本号的前几位就好了\ngit add             # 将文件添加到要提交的队列中\ngit commit -m \"xxx\" # 提交的到暂存区，并添加注释xxx\ngit commit -am \"xxx\"       \n===>   git add <modify files> , git commit -m \"xxx\"\ngit push -u origin A    # 推送到远程仓库\n    ## -u 一般情况下，第一次才有，方便以后推送或者拉去，可以简化命令\n    ## origin 远程仓库名，可以换，但很少有人去换\n    ## A 要推送到A分支下\n```\n\n### 常使用到的暂存命令\n``` git\ngit stash           # 添加储藏\ngit stash push -m \"注释内容\"\ngit stash list      # 查看储藏\n# 使用 num 这个版本号的 stash， 其中 num 为数字\n## pop 会删除 stash 队列中的 num 这个缓存版本，apply 不会。\ngit stash pop stash@{num}\ngit stash apply stash@{num}\n```\n\n### 其他\n``` git\ngit pull            # 拉取远程当前分支的最新代码\n# 把所有的remote变化都拉下来，并且将你最新的commit置于最顶上\ngit pull --rebase   \n```\n\n还有许多命令，待后续补齐。just 未完待续、\n\n","slug":"git常用操作命令","published":1,"updated":"2018-07-27T10:34:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwg1j000g66fyftb94nhk","content":"<p><em>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</em></p>\n<p>下面，请跟着 Mobro 一起了解常用的 git 命令：</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global &quot;user.name&quot;         # 全局配置用户名</span><br><span class=\"line\">git config --global &quot;user.email&quot;        # email</span><br><span class=\"line\">git config user.name/user.email         # 查看用户名/邮箱</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;mobro_chu@163.com&quot;    # 创建ssh key</span><br><span class=\"line\">    ## 公钥是要放在 github 上，密钥就不必了</span><br><span class=\"line\">ssh -T git@github.com       # 检查连接是否成功</span><br><span class=\"line\">git remote add origin git@server-name:path/repo-name.git    </span><br><span class=\"line\"># 与远程仓库建立连接</span><br><span class=\"line\"># eg: git remote add origin git@github.com:MobroChu/mine.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"git分支相关\"><a href=\"#git分支相关\" class=\"headerlink\" title=\"git分支相关\"></a>git分支相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch          # 查看当前分支  </span><br><span class=\"line\">git branch &lt;name&gt;   # 创建一个 name 的分支  </span><br><span class=\"line\">git branch -m A B   # 将原来为A的分支，改名成 B  </span><br><span class=\"line\">git branch -m C     # 将当前分支改名为 C</span><br><span class=\"line\">git branch -d E     # 删除分支，不是当前正打开的分支</span><br><span class=\"line\">git branch -D F     # 删除分支，当前正打开的分支</span><br><span class=\"line\">git branch &lt;branch_name&gt; &lt;hash_value&gt;   # 恢复被删除的分支</span><br><span class=\"line\">git push origin :G  # 删除远程仓库的G分支</span><br><span class=\"line\">git checkout -b A   # 创建A分支，并切换到A分支下</span><br><span class=\"line\">git checkout A      # 从当前分支切换到A分支下</span><br><span class=\"line\">git merge A         # 将A分支合并到当前分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"版本相关\"><a href=\"#版本相关\" class=\"headerlink\" title=\"版本相关\"></a>版本相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status          # 查看当前仓库状态</span><br><span class=\"line\">git log             # 查看日志</span><br><span class=\"line\">git reflog          # 查看命令记录</span><br><span class=\"line\">git diff &lt;filename&gt; # 查看暂存区filename这个文件与仓库中filename文件的不同</span><br><span class=\"line\">git diff HEAD -- &lt;filename&gt; # 查看工作区和版本库里面最新版本中filename的区别</span><br><span class=\"line\">git reset HEAD &lt;filename&gt;   # 撤销缓存区的修改</span><br><span class=\"line\">git reset --hard HEAD/HEAD~100/版本号   #版本回退</span><br><span class=\"line\">    ## HEAD 指向的是当前版本</span><br><span class=\"line\">    ## HEAD~100 从当前版本向前退100个版本</span><br><span class=\"line\">    ## 版本号 不用全部复制，只需要版本号的前几位就好了</span><br><span class=\"line\">git add             # 将文件添加到要提交的队列中</span><br><span class=\"line\">git commit -m &quot;xxx&quot; # 提交的到暂存区，并添加注释xxx</span><br><span class=\"line\">git commit -am &quot;xxx&quot;       </span><br><span class=\"line\">===&gt;   git add &lt;modify files&gt; , git commit -m &quot;xxx&quot;</span><br><span class=\"line\">git push -u origin A    # 推送到远程仓库</span><br><span class=\"line\">    ## -u 一般情况下，第一次才有，方便以后推送或者拉去，可以简化命令</span><br><span class=\"line\">    ## origin 远程仓库名，可以换，但很少有人去换</span><br><span class=\"line\">    ## A 要推送到A分支下</span><br></pre></td></tr></table></figure>\n<h3 id=\"常使用到的暂存命令\"><a href=\"#常使用到的暂存命令\" class=\"headerlink\" title=\"常使用到的暂存命令\"></a>常使用到的暂存命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash           # 添加储藏</span><br><span class=\"line\">git stash push -m &quot;注释内容&quot;</span><br><span class=\"line\">git stash list      # 查看储藏</span><br><span class=\"line\"># 使用 num 这个版本号的 stash， 其中 num 为数字</span><br><span class=\"line\">## pop 会删除 stash 队列中的 num 这个缓存版本，apply 不会。</span><br><span class=\"line\">git stash pop stash@&#123;num&#125;</span><br><span class=\"line\">git stash apply stash@&#123;num&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull            # 拉取远程当前分支的最新代码</span><br><span class=\"line\"># 把所有的remote变化都拉下来，并且将你最新的commit置于最顶上</span><br><span class=\"line\">git pull --rebase</span><br></pre></td></tr></table></figure>\n<p>还有许多命令，待后续补齐。just 未完待续、</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</em></p>\n<p>下面，请跟着 Mobro 一起了解常用的 git 命令：</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global &quot;user.name&quot;         # 全局配置用户名</span><br><span class=\"line\">git config --global &quot;user.email&quot;        # email</span><br><span class=\"line\">git config user.name/user.email         # 查看用户名/邮箱</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;mobro_chu@163.com&quot;    # 创建ssh key</span><br><span class=\"line\">    ## 公钥是要放在 github 上，密钥就不必了</span><br><span class=\"line\">ssh -T git@github.com       # 检查连接是否成功</span><br><span class=\"line\">git remote add origin git@server-name:path/repo-name.git    </span><br><span class=\"line\"># 与远程仓库建立连接</span><br><span class=\"line\"># eg: git remote add origin git@github.com:MobroChu/mine.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"git分支相关\"><a href=\"#git分支相关\" class=\"headerlink\" title=\"git分支相关\"></a>git分支相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch          # 查看当前分支  </span><br><span class=\"line\">git branch &lt;name&gt;   # 创建一个 name 的分支  </span><br><span class=\"line\">git branch -m A B   # 将原来为A的分支，改名成 B  </span><br><span class=\"line\">git branch -m C     # 将当前分支改名为 C</span><br><span class=\"line\">git branch -d E     # 删除分支，不是当前正打开的分支</span><br><span class=\"line\">git branch -D F     # 删除分支，当前正打开的分支</span><br><span class=\"line\">git branch &lt;branch_name&gt; &lt;hash_value&gt;   # 恢复被删除的分支</span><br><span class=\"line\">git push origin :G  # 删除远程仓库的G分支</span><br><span class=\"line\">git checkout -b A   # 创建A分支，并切换到A分支下</span><br><span class=\"line\">git checkout A      # 从当前分支切换到A分支下</span><br><span class=\"line\">git merge A         # 将A分支合并到当前分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"版本相关\"><a href=\"#版本相关\" class=\"headerlink\" title=\"版本相关\"></a>版本相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status          # 查看当前仓库状态</span><br><span class=\"line\">git log             # 查看日志</span><br><span class=\"line\">git reflog          # 查看命令记录</span><br><span class=\"line\">git diff &lt;filename&gt; # 查看暂存区filename这个文件与仓库中filename文件的不同</span><br><span class=\"line\">git diff HEAD -- &lt;filename&gt; # 查看工作区和版本库里面最新版本中filename的区别</span><br><span class=\"line\">git reset HEAD &lt;filename&gt;   # 撤销缓存区的修改</span><br><span class=\"line\">git reset --hard HEAD/HEAD~100/版本号   #版本回退</span><br><span class=\"line\">    ## HEAD 指向的是当前版本</span><br><span class=\"line\">    ## HEAD~100 从当前版本向前退100个版本</span><br><span class=\"line\">    ## 版本号 不用全部复制，只需要版本号的前几位就好了</span><br><span class=\"line\">git add             # 将文件添加到要提交的队列中</span><br><span class=\"line\">git commit -m &quot;xxx&quot; # 提交的到暂存区，并添加注释xxx</span><br><span class=\"line\">git commit -am &quot;xxx&quot;       </span><br><span class=\"line\">===&gt;   git add &lt;modify files&gt; , git commit -m &quot;xxx&quot;</span><br><span class=\"line\">git push -u origin A    # 推送到远程仓库</span><br><span class=\"line\">    ## -u 一般情况下，第一次才有，方便以后推送或者拉去，可以简化命令</span><br><span class=\"line\">    ## origin 远程仓库名，可以换，但很少有人去换</span><br><span class=\"line\">    ## A 要推送到A分支下</span><br></pre></td></tr></table></figure>\n<h3 id=\"常使用到的暂存命令\"><a href=\"#常使用到的暂存命令\" class=\"headerlink\" title=\"常使用到的暂存命令\"></a>常使用到的暂存命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash           # 添加储藏</span><br><span class=\"line\">git stash push -m &quot;注释内容&quot;</span><br><span class=\"line\">git stash list      # 查看储藏</span><br><span class=\"line\"># 使用 num 这个版本号的 stash， 其中 num 为数字</span><br><span class=\"line\">## pop 会删除 stash 队列中的 num 这个缓存版本，apply 不会。</span><br><span class=\"line\">git stash pop stash@&#123;num&#125;</span><br><span class=\"line\">git stash apply stash@&#123;num&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull            # 拉取远程当前分支的最新代码</span><br><span class=\"line\"># 把所有的remote变化都拉下来，并且将你最新的commit置于最顶上</span><br><span class=\"line\">git pull --rebase</span><br></pre></td></tr></table></figure>\n<p>还有许多命令，待后续补齐。just 未完待续、</p>\n"},{"title":"使用scss为css样式自动添加浏览器前缀","date":"2018-06-15T03:55:21.000Z","description":"当一个浏览器实现一个新的属性、值或者选择器，而这个特征还不是处于候选推荐标准状态的时候，这属性的前面会添加一个前缀以便于它的渲染引擎识别。浏览器使用前缀来尝试一些新属性、值和选择器，即使他们还没有最终定稿——这是一个好的测试方法，在必要时也可以对他们进行修正或者重新定义。如果浏览器一上来就直接使用标准属性，那他们就会被直接锁定在这个特征的实现上而不易变更。","_content":"_当一个浏览器实现一个新的属性、值或者选择器，而这个特征还不是处于候选推荐标准状态的时候，这属性的前面会添加一个前缀以便于它的渲染引擎识别。_  \n\n浏览器使用前缀来尝试一些新属性、值和选择器，即使他们还没有最终定稿——这是一个好的测试方法，在必要时也可以对他们进行修正或者重新定义。如果浏览器一上来就直接使用标准属性，那他们就会被直接锁定在这个特征的实现上而不易变更。\n\n开发这可能会立即使用无前缀的属性，而且也会一直期望它能够保持同样的表现不再变更。如果浏览器在之后对这个属性做了变更，不管是由于它的实现存在缺陷，或者是由于规范本身发生了变更，所有现存的使用了这个属性的网站都有可能面临出问题的风险。除了会出现这样的锁定问题外，这种方式也有可能强迫其他浏览器和W3C去适配它的实现。\n\n##### 1. 使用 scss 来实现为样式添加浏览器前缀，废话不多说，直接上代码。\n\n``` scss\n@mixin prefix($stylename, $value, $options: webkit moz o ms) {\n    #{$stylename}: $value;\n\n    @each $option in $options {\n        @if $option == webkit {\n            -webkit-#{$stylename}: $value;\n        }\n        @else if $option == moz {\n            -moz-#{$stylename}: #{$value};\n        }\n        @else if $option == o {\n            -o-#{$stylename}: #{$value};\n        }\n        @else if $option == ms {\n            -ms-#{$stylename}: #{$value};\n        }\n    }\n}\n\n.test {\n    @include prefix(background, blue);\n}\n``` \n\n编译后的结果：\n\n``` css\n.test {\n  background: blue;\n  -webkit-background: blue;\n  -moz-background: blue;\n  -o-background: blue;\n  -ms-background: blue; \n}\n```\n\nps:  \n1. 很明显，上述代码中 `$stylename` 要用 #{} 包起来的。  \n2. 形参中 $options 可以是 [webkit moz o ms]，但是却不能写成数组的形式，这可能是 scss 语法的原因吧。 \n3. $option 有默认值，所以可以不用传参，若要指定生成哪些浏览器前缀，可以使用 `@include prefix(background, blue, webkit moz)` \n\n有的样式值有兼容性该怎么写呢？或者是新增了属性值，而不是属性时，怎么来写呢？\n\n比如 `background`, 当值为渐变色时，就存在兼容性，而且是 background 的值是新增的，所以应该写成下图所示的样子。\n![](/images/201806/WX20180615-115151.png)  \n那么此时就只需要：\n``` scss\n.test {\n    // @include prefix(background, linear-gradient())\n    皮一下，很开森。\n    其实这种情况下，用这个封装的前缀就不太合适了，还是老老实实分开单独写吧，或者封装一个background linear-gradient的mixin。\n    因为这里liner-gradient值是不一样的，并不只是前缀的问题。\n}\n```\n\n写成 `left , to right` 这种形式各浏览器之间有兼容性问题，所以我们可以改写成 `90deg` 这种形式。\n![](/images/201806/WX20180615-143708.png)\n\n##### 2. 封装一个动画 prefix-frames\n``` scss\n@mixin prefix-keyframes($name, $options: [webkit moz o ms]) {\n    @keyframes #{$name} {\n        @content;\n    }\n    @each $option in $options {\n        @if $option == webkit {\n            @-webkit-keyframes #{$name} {\n                @content;\n            }\n        }\n        @else if $option == moz {\n            @-moz-keyframes #{$name} {\n                @content;\n            }\n        }\n        @else if $option == o {\n            @-o-keyframes #{$name} {\n                @content;\n            }\n        }\n        @else if $option == ms {\n            @-ms-keyframes #{$name} {\n                @content;\n            }\n        }\n    }\n}\n\n@include prefix-keyframes(colorchange) {\n    from {\n        color: red;\n    }\n    to {\n        color: black;\n    }\n};\n```\n\n解析后的css \n``` css\n@keyframes colorchange {\n  from {\n    color: red; }\n  to {\n    color: black; } }\n\n@-webkit-keyframes colorchange {\n  from {\n    color: red; }\n  to {\n    color: black; } }\n\n@-moz-keyframes colorchange {\n  from {\n    color: red; }\n  to {\n    color: black; } }\n\n@-o-keyframes colorchange {\n  from {\n    color: red; }\n  to {\n    color: black; } }\n\n@-ms-keyframes colorchange {\n  from {\n    color: red; }\n  to {\n    color: black; } }\n```\n\n##### 3. 分享几个我常用的 mixin\n``` scss\n// 浮动\n@mixin float($f: left) {\n    float: $f;\n}\n.test {\n    @include float();\n    @include float(right);\n}\n\n// 清除浮动\n@mixin clearfix() {\n    zoom: 1;\n    &:after {\n        content: '';\n        display: block;\n        clear: both;\n    }\n}\n.test {\n    @include clearfix();\n}\n\n// 三角形\n@mixin triangle($size, $dir, $color) {\n    display: block;\n    width: 0;\n    height: 0;\n    border: $size solid transparent;\n    border-#{$dir}: $size solid #{$color};\n}\n.test {\n    @include triangle(20px, left, red);\n}\n\n// 设置宽高\n@mixin size($w, $h: auto) {\n    width: $w;\n    height: $h;\n}\n.test {\n    @include size(200px);\n    @include size(200px, 200px);\n}\n// 标题一行，多余用省略号\n@mixin text-overflow {\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n// 文字不换行\n@mixin word-break {\n    word-break: break-all;\n    word-wrap: break-word;\n    white-space: normal;\n}\n// 圆角\n@mixin border-radius($radius) {\n    -webkit-border-radius: $radius;\n    -moz-border-radius: $radius;\n    border-radius: $radius;\n    // 这样写是不是就更完美了。\n    // @include prefix(border-radius, $radius); \n}\n```\n\n---\n\n世界上只有一种真正的英雄主义，那就是在认清生活真相之后依然热爱生活 —— 罗曼罗兰\n","source":"_posts/使用scss为css样式自动添加浏览器前缀.md","raw":"---\ntitle: 使用scss为css样式自动添加浏览器前缀\ndate: 2018-06-15 11:55:21\ntags: scss \ndescription: 当一个浏览器实现一个新的属性、值或者选择器，而这个特征还不是处于候选推荐标准状态的时候，这属性的前面会添加一个前缀以便于它的渲染引擎识别。浏览器使用前缀来尝试一些新属性、值和选择器，即使他们还没有最终定稿——这是一个好的测试方法，在必要时也可以对他们进行修正或者重新定义。如果浏览器一上来就直接使用标准属性，那他们就会被直接锁定在这个特征的实现上而不易变更。\n---\n_当一个浏览器实现一个新的属性、值或者选择器，而这个特征还不是处于候选推荐标准状态的时候，这属性的前面会添加一个前缀以便于它的渲染引擎识别。_  \n\n浏览器使用前缀来尝试一些新属性、值和选择器，即使他们还没有最终定稿——这是一个好的测试方法，在必要时也可以对他们进行修正或者重新定义。如果浏览器一上来就直接使用标准属性，那他们就会被直接锁定在这个特征的实现上而不易变更。\n\n开发这可能会立即使用无前缀的属性，而且也会一直期望它能够保持同样的表现不再变更。如果浏览器在之后对这个属性做了变更，不管是由于它的实现存在缺陷，或者是由于规范本身发生了变更，所有现存的使用了这个属性的网站都有可能面临出问题的风险。除了会出现这样的锁定问题外，这种方式也有可能强迫其他浏览器和W3C去适配它的实现。\n\n##### 1. 使用 scss 来实现为样式添加浏览器前缀，废话不多说，直接上代码。\n\n``` scss\n@mixin prefix($stylename, $value, $options: webkit moz o ms) {\n    #{$stylename}: $value;\n\n    @each $option in $options {\n        @if $option == webkit {\n            -webkit-#{$stylename}: $value;\n        }\n        @else if $option == moz {\n            -moz-#{$stylename}: #{$value};\n        }\n        @else if $option == o {\n            -o-#{$stylename}: #{$value};\n        }\n        @else if $option == ms {\n            -ms-#{$stylename}: #{$value};\n        }\n    }\n}\n\n.test {\n    @include prefix(background, blue);\n}\n``` \n\n编译后的结果：\n\n``` css\n.test {\n  background: blue;\n  -webkit-background: blue;\n  -moz-background: blue;\n  -o-background: blue;\n  -ms-background: blue; \n}\n```\n\nps:  \n1. 很明显，上述代码中 `$stylename` 要用 #{} 包起来的。  \n2. 形参中 $options 可以是 [webkit moz o ms]，但是却不能写成数组的形式，这可能是 scss 语法的原因吧。 \n3. $option 有默认值，所以可以不用传参，若要指定生成哪些浏览器前缀，可以使用 `@include prefix(background, blue, webkit moz)` \n\n有的样式值有兼容性该怎么写呢？或者是新增了属性值，而不是属性时，怎么来写呢？\n\n比如 `background`, 当值为渐变色时，就存在兼容性，而且是 background 的值是新增的，所以应该写成下图所示的样子。\n![](/images/201806/WX20180615-115151.png)  \n那么此时就只需要：\n``` scss\n.test {\n    // @include prefix(background, linear-gradient())\n    皮一下，很开森。\n    其实这种情况下，用这个封装的前缀就不太合适了，还是老老实实分开单独写吧，或者封装一个background linear-gradient的mixin。\n    因为这里liner-gradient值是不一样的，并不只是前缀的问题。\n}\n```\n\n写成 `left , to right` 这种形式各浏览器之间有兼容性问题，所以我们可以改写成 `90deg` 这种形式。\n![](/images/201806/WX20180615-143708.png)\n\n##### 2. 封装一个动画 prefix-frames\n``` scss\n@mixin prefix-keyframes($name, $options: [webkit moz o ms]) {\n    @keyframes #{$name} {\n        @content;\n    }\n    @each $option in $options {\n        @if $option == webkit {\n            @-webkit-keyframes #{$name} {\n                @content;\n            }\n        }\n        @else if $option == moz {\n            @-moz-keyframes #{$name} {\n                @content;\n            }\n        }\n        @else if $option == o {\n            @-o-keyframes #{$name} {\n                @content;\n            }\n        }\n        @else if $option == ms {\n            @-ms-keyframes #{$name} {\n                @content;\n            }\n        }\n    }\n}\n\n@include prefix-keyframes(colorchange) {\n    from {\n        color: red;\n    }\n    to {\n        color: black;\n    }\n};\n```\n\n解析后的css \n``` css\n@keyframes colorchange {\n  from {\n    color: red; }\n  to {\n    color: black; } }\n\n@-webkit-keyframes colorchange {\n  from {\n    color: red; }\n  to {\n    color: black; } }\n\n@-moz-keyframes colorchange {\n  from {\n    color: red; }\n  to {\n    color: black; } }\n\n@-o-keyframes colorchange {\n  from {\n    color: red; }\n  to {\n    color: black; } }\n\n@-ms-keyframes colorchange {\n  from {\n    color: red; }\n  to {\n    color: black; } }\n```\n\n##### 3. 分享几个我常用的 mixin\n``` scss\n// 浮动\n@mixin float($f: left) {\n    float: $f;\n}\n.test {\n    @include float();\n    @include float(right);\n}\n\n// 清除浮动\n@mixin clearfix() {\n    zoom: 1;\n    &:after {\n        content: '';\n        display: block;\n        clear: both;\n    }\n}\n.test {\n    @include clearfix();\n}\n\n// 三角形\n@mixin triangle($size, $dir, $color) {\n    display: block;\n    width: 0;\n    height: 0;\n    border: $size solid transparent;\n    border-#{$dir}: $size solid #{$color};\n}\n.test {\n    @include triangle(20px, left, red);\n}\n\n// 设置宽高\n@mixin size($w, $h: auto) {\n    width: $w;\n    height: $h;\n}\n.test {\n    @include size(200px);\n    @include size(200px, 200px);\n}\n// 标题一行，多余用省略号\n@mixin text-overflow {\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n// 文字不换行\n@mixin word-break {\n    word-break: break-all;\n    word-wrap: break-word;\n    white-space: normal;\n}\n// 圆角\n@mixin border-radius($radius) {\n    -webkit-border-radius: $radius;\n    -moz-border-radius: $radius;\n    border-radius: $radius;\n    // 这样写是不是就更完美了。\n    // @include prefix(border-radius, $radius); \n}\n```\n\n---\n\n世界上只有一种真正的英雄主义，那就是在认清生活真相之后依然热爱生活 —— 罗曼罗兰\n","slug":"使用scss为css样式自动添加浏览器前缀","published":1,"updated":"2018-07-27T10:34:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwg1n000i66fy00uh4tj8","content":"<p><em>当一个浏览器实现一个新的属性、值或者选择器，而这个特征还不是处于候选推荐标准状态的时候，这属性的前面会添加一个前缀以便于它的渲染引擎识别。</em>  </p>\n<p>浏览器使用前缀来尝试一些新属性、值和选择器，即使他们还没有最终定稿——这是一个好的测试方法，在必要时也可以对他们进行修正或者重新定义。如果浏览器一上来就直接使用标准属性，那他们就会被直接锁定在这个特征的实现上而不易变更。</p>\n<p>开发这可能会立即使用无前缀的属性，而且也会一直期望它能够保持同样的表现不再变更。如果浏览器在之后对这个属性做了变更，不管是由于它的实现存在缺陷，或者是由于规范本身发生了变更，所有现存的使用了这个属性的网站都有可能面临出问题的风险。除了会出现这样的锁定问题外，这种方式也有可能强迫其他浏览器和W3C去适配它的实现。</p>\n<h5 id=\"1-使用-scss-来实现为样式添加浏览器前缀，废话不多说，直接上代码。\"><a href=\"#1-使用-scss-来实现为样式添加浏览器前缀，废话不多说，直接上代码。\" class=\"headerlink\" title=\"1. 使用 scss 来实现为样式添加浏览器前缀，废话不多说，直接上代码。\"></a>1. 使用 scss 来实现为样式添加浏览器前缀，废话不多说，直接上代码。</h5><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> prefix(<span class=\"variable\">$stylename</span>, <span class=\"variable\">$value</span>, <span class=\"variable\">$options</span>: webkit moz o ms) &#123;</span><br><span class=\"line\">    #&#123;<span class=\"variable\">$stylename</span>&#125;: <span class=\"variable\">$value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"keyword\">each</span> <span class=\"variable\">$option</span> in <span class=\"variable\">$options</span> &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">if</span> <span class=\"variable\">$option</span> == webkit &#123;</span><br><span class=\"line\">            -webkit-#&#123;<span class=\"variable\">$stylename</span>&#125;: <span class=\"variable\">$value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == moz &#123;</span><br><span class=\"line\">            -moz-#&#123;<span class=\"variable\">$stylename</span>&#125;: #&#123;<span class=\"variable\">$value</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == o &#123;</span><br><span class=\"line\">            -o-#&#123;<span class=\"variable\">$stylename</span>&#125;: #&#123;<span class=\"variable\">$value</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == ms &#123;</span><br><span class=\"line\">            -ms-#&#123;<span class=\"variable\">$stylename</span>&#125;: #&#123;<span class=\"variable\">$value</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> prefix(background, blue);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">编译后的结果：</span><br><span class=\"line\"></span><br><span class=\"line\">``` css</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  -o-<span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  -ms-<span class=\"attribute\">background</span>: blue; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ps:  </p>\n<ol>\n<li>很明显，上述代码中 <code>$stylename</code> 要用 #{} 包起来的。  </li>\n<li>形参中 $options 可以是 [webkit moz o ms]，但是却不能写成数组的形式，这可能是 scss 语法的原因吧。 </li>\n<li>$option 有默认值，所以可以不用传参，若要指定生成哪些浏览器前缀，可以使用 <code>@include prefix(background, blue, webkit moz)</code> </li>\n</ol>\n<p>有的样式值有兼容性该怎么写呢？或者是新增了属性值，而不是属性时，怎么来写呢？</p>\n<p>比如 <code>background</code>, 当值为渐变色时，就存在兼容性，而且是 background 的值是新增的，所以应该写成下图所示的样子。<br><img src=\"/images/201806/WX20180615-115151.png\" alt=\"\"><br>那么此时就只需要：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// @include prefix(background, linear-gradient())</span></span><br><span class=\"line\">    皮一下，很开森。</span><br><span class=\"line\">    其实这种情况下，用这个封装的前缀就不太合适了，还是老老实实分开单独写吧，或者封装一个<span class=\"attribute\">background</span> linear-gradient的mixin。</span><br><span class=\"line\">    因为这里liner-gradient值是不一样的，并不只是前缀的问题。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>写成 <code>left , to right</code> 这种形式各浏览器之间有兼容性问题，所以我们可以改写成 <code>90deg</code> 这种形式。<br><img src=\"/images/201806/WX20180615-143708.png\" alt=\"\"></p>\n<h5 id=\"2-封装一个动画-prefix-frames\"><a href=\"#2-封装一个动画-prefix-frames\" class=\"headerlink\" title=\"2. 封装一个动画 prefix-frames\"></a>2. 封装一个动画 prefix-frames</h5><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> prefix-keyframes(<span class=\"variable\">$name</span>, <span class=\"variable\">$options</span>: [webkit moz o ms]) &#123;</span><br><span class=\"line\">    @keyframes #&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @<span class=\"keyword\">each</span> <span class=\"variable\">$option</span> in <span class=\"variable\">$options</span> &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">if</span> <span class=\"variable\">$option</span> == webkit &#123;</span><br><span class=\"line\">            @-webkit-keyframes #&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">                @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == moz &#123;</span><br><span class=\"line\">            @-moz-keyframes #&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">                @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == o &#123;</span><br><span class=\"line\">            @-o-keyframes #&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">                @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == ms &#123;</span><br><span class=\"line\">            @-ms-keyframes #&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">                @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">include</span> prefix-keyframes(colorchange) &#123;</span><br><span class=\"line\">    from &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>解析后的css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> colorchange &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-<span class=\"keyword\">webkit</span>-<span class=\"keyword\">keyframes</span> colorchange &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-<span class=\"keyword\">moz</span>-<span class=\"keyword\">keyframes</span> colorchange &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-<span class=\"keyword\">o</span>-<span class=\"keyword\">keyframes</span> colorchange &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-<span class=\"keyword\">ms</span>-<span class=\"keyword\">keyframes</span> colorchange &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; &#125; &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-分享几个我常用的-mixin\"><a href=\"#3-分享几个我常用的-mixin\" class=\"headerlink\" title=\"3. 分享几个我常用的 mixin\"></a>3. 分享几个我常用的 mixin</h5><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 浮动</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> float(<span class=\"variable\">$f</span>: left) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: <span class=\"variable\">$f</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> float();</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> float(right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清除浮动</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> clearfix() &#123;</span><br><span class=\"line\">    zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">        <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> clearfix();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 三角形</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> triangle(<span class=\"variable\">$size</span>, <span class=\"variable\">$dir</span>, <span class=\"variable\">$color</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"variable\">$size</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>-#&#123;<span class=\"variable\">$dir</span>&#125;: <span class=\"variable\">$size</span> solid #&#123;<span class=\"variable\">$color</span>&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> triangle(<span class=\"number\">20px</span>, left, red);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置宽高</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> size(<span class=\"variable\">$w</span>, <span class=\"variable\">$h</span>: auto) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"variable\">$w</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"variable\">$h</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> size(<span class=\"number\">200px</span>);</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> size(<span class=\"number\">200px</span>, 200px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 标题一行，多余用省略号</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> text-overflow &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 文字不换行</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> word-break &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">    <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 圆角</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> border-radius(<span class=\"variable\">$radius</span>) &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">    -moz-<span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这样写是不是就更完美了。</span></span><br><span class=\"line\">    <span class=\"comment\">// @include prefix(border-radius, $radius); </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>世界上只有一种真正的英雄主义，那就是在认清生活真相之后依然热爱生活 —— 罗曼罗兰</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>当一个浏览器实现一个新的属性、值或者选择器，而这个特征还不是处于候选推荐标准状态的时候，这属性的前面会添加一个前缀以便于它的渲染引擎识别。</em>  </p>\n<p>浏览器使用前缀来尝试一些新属性、值和选择器，即使他们还没有最终定稿——这是一个好的测试方法，在必要时也可以对他们进行修正或者重新定义。如果浏览器一上来就直接使用标准属性，那他们就会被直接锁定在这个特征的实现上而不易变更。</p>\n<p>开发这可能会立即使用无前缀的属性，而且也会一直期望它能够保持同样的表现不再变更。如果浏览器在之后对这个属性做了变更，不管是由于它的实现存在缺陷，或者是由于规范本身发生了变更，所有现存的使用了这个属性的网站都有可能面临出问题的风险。除了会出现这样的锁定问题外，这种方式也有可能强迫其他浏览器和W3C去适配它的实现。</p>\n<h5 id=\"1-使用-scss-来实现为样式添加浏览器前缀，废话不多说，直接上代码。\"><a href=\"#1-使用-scss-来实现为样式添加浏览器前缀，废话不多说，直接上代码。\" class=\"headerlink\" title=\"1. 使用 scss 来实现为样式添加浏览器前缀，废话不多说，直接上代码。\"></a>1. 使用 scss 来实现为样式添加浏览器前缀，废话不多说，直接上代码。</h5><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> prefix(<span class=\"variable\">$stylename</span>, <span class=\"variable\">$value</span>, <span class=\"variable\">$options</span>: webkit moz o ms) &#123;</span><br><span class=\"line\">    #&#123;<span class=\"variable\">$stylename</span>&#125;: <span class=\"variable\">$value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"keyword\">each</span> <span class=\"variable\">$option</span> in <span class=\"variable\">$options</span> &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">if</span> <span class=\"variable\">$option</span> == webkit &#123;</span><br><span class=\"line\">            -webkit-#&#123;<span class=\"variable\">$stylename</span>&#125;: <span class=\"variable\">$value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == moz &#123;</span><br><span class=\"line\">            -moz-#&#123;<span class=\"variable\">$stylename</span>&#125;: #&#123;<span class=\"variable\">$value</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == o &#123;</span><br><span class=\"line\">            -o-#&#123;<span class=\"variable\">$stylename</span>&#125;: #&#123;<span class=\"variable\">$value</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == ms &#123;</span><br><span class=\"line\">            -ms-#&#123;<span class=\"variable\">$stylename</span>&#125;: #&#123;<span class=\"variable\">$value</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> prefix(background, blue);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">编译后的结果：</span><br><span class=\"line\"></span><br><span class=\"line\">``` css</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  -o-<span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  -ms-<span class=\"attribute\">background</span>: blue; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ps:  </p>\n<ol>\n<li>很明显，上述代码中 <code>$stylename</code> 要用 #{} 包起来的。  </li>\n<li>形参中 $options 可以是 [webkit moz o ms]，但是却不能写成数组的形式，这可能是 scss 语法的原因吧。 </li>\n<li>$option 有默认值，所以可以不用传参，若要指定生成哪些浏览器前缀，可以使用 <code>@include prefix(background, blue, webkit moz)</code> </li>\n</ol>\n<p>有的样式值有兼容性该怎么写呢？或者是新增了属性值，而不是属性时，怎么来写呢？</p>\n<p>比如 <code>background</code>, 当值为渐变色时，就存在兼容性，而且是 background 的值是新增的，所以应该写成下图所示的样子。<br><img src=\"/images/201806/WX20180615-115151.png\" alt=\"\"><br>那么此时就只需要：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// @include prefix(background, linear-gradient())</span></span><br><span class=\"line\">    皮一下，很开森。</span><br><span class=\"line\">    其实这种情况下，用这个封装的前缀就不太合适了，还是老老实实分开单独写吧，或者封装一个<span class=\"attribute\">background</span> linear-gradient的mixin。</span><br><span class=\"line\">    因为这里liner-gradient值是不一样的，并不只是前缀的问题。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>写成 <code>left , to right</code> 这种形式各浏览器之间有兼容性问题，所以我们可以改写成 <code>90deg</code> 这种形式。<br><img src=\"/images/201806/WX20180615-143708.png\" alt=\"\"></p>\n<h5 id=\"2-封装一个动画-prefix-frames\"><a href=\"#2-封装一个动画-prefix-frames\" class=\"headerlink\" title=\"2. 封装一个动画 prefix-frames\"></a>2. 封装一个动画 prefix-frames</h5><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> prefix-keyframes(<span class=\"variable\">$name</span>, <span class=\"variable\">$options</span>: [webkit moz o ms]) &#123;</span><br><span class=\"line\">    @keyframes #&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @<span class=\"keyword\">each</span> <span class=\"variable\">$option</span> in <span class=\"variable\">$options</span> &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">if</span> <span class=\"variable\">$option</span> == webkit &#123;</span><br><span class=\"line\">            @-webkit-keyframes #&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">                @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == moz &#123;</span><br><span class=\"line\">            @-moz-keyframes #&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">                @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == o &#123;</span><br><span class=\"line\">            @-o-keyframes #&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">                @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @<span class=\"keyword\">else</span> if <span class=\"variable\">$option</span> == ms &#123;</span><br><span class=\"line\">            @-ms-keyframes #&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">                @<span class=\"keyword\">content</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">include</span> prefix-keyframes(colorchange) &#123;</span><br><span class=\"line\">    from &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>解析后的css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> colorchange &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-<span class=\"keyword\">webkit</span>-<span class=\"keyword\">keyframes</span> colorchange &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-<span class=\"keyword\">moz</span>-<span class=\"keyword\">keyframes</span> colorchange &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-<span class=\"keyword\">o</span>-<span class=\"keyword\">keyframes</span> colorchange &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@-<span class=\"keyword\">ms</span>-<span class=\"keyword\">keyframes</span> colorchange &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; &#125; &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-分享几个我常用的-mixin\"><a href=\"#3-分享几个我常用的-mixin\" class=\"headerlink\" title=\"3. 分享几个我常用的 mixin\"></a>3. 分享几个我常用的 mixin</h5><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 浮动</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> float(<span class=\"variable\">$f</span>: left) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: <span class=\"variable\">$f</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> float();</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> float(right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清除浮动</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> clearfix() &#123;</span><br><span class=\"line\">    zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">        <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> clearfix();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 三角形</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> triangle(<span class=\"variable\">$size</span>, <span class=\"variable\">$dir</span>, <span class=\"variable\">$color</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"variable\">$size</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>-#&#123;<span class=\"variable\">$dir</span>&#125;: <span class=\"variable\">$size</span> solid #&#123;<span class=\"variable\">$color</span>&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> triangle(<span class=\"number\">20px</span>, left, red);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置宽高</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> size(<span class=\"variable\">$w</span>, <span class=\"variable\">$h</span>: auto) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"variable\">$w</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"variable\">$h</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> size(<span class=\"number\">200px</span>);</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> size(<span class=\"number\">200px</span>, 200px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 标题一行，多余用省略号</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> text-overflow &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 文字不换行</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> word-break &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">    <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 圆角</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> border-radius(<span class=\"variable\">$radius</span>) &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">    -moz-<span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这样写是不是就更完美了。</span></span><br><span class=\"line\">    <span class=\"comment\">// @include prefix(border-radius, $radius); </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>世界上只有一种真正的英雄主义，那就是在认清生活真相之后依然热爱生活 —— 罗曼罗兰</p>\n"},{"title":"前端小问题总结（一）","date":"2018-05-17T13:56:38.000Z","_content":"旨在记录自己在实际项目中遇见的一些小问题，简单做个记录。以便以后翻阅。 \n\n### document.domain\n通常，解决跨域问题的方法有：\n1. document.domain \n2. jsonp  \n3. iframe\n4. 代理\n5. CORS  \n\n用document.domain来指定域，是可以的，但是有局限性，也就是一级域名一致才可以。\n[_**参考document.domain**_](https://blog.csdn.net/yuan_zhikong/article/details/76038222)\n\n### 拖动\nondragstart 事件在用户开始拖动元素或选择的文本时触发。  \n\n**PS:**  \n\n1. 为了让元素可拖动，需要使用 HTML5 `draggable=true` 属性。\n2.  链接和图片默认是可拖动的，不需要 draggable 属性。\n3.  Internet Explorer 8 及更早 IE 版本或 Safari 5.1 及更早版本的浏览器不支持 drag 事件。\n在拖放的过程中会触发以下事件：  \n在拖动目标上触发事件 (源元素):\n+ ondragstart - 用户开始拖动元素时触发\n+ ondrag - 元素正在拖动时触发\n+ ondragend - 用户完成元素拖动后触发\n\n释放目标时触发的事件:\n+ ondragenter - 当被鼠标拖动的对象进入其容器范围内时触发此事件\n+ ondragover - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件\n+ ondragleave - 当被鼠标拖动的对象离开其容器范围内时触发此事件\n+ ondrop - 在一个拖动过程中，释放鼠标键时触发此事件\n\n[关于drag的一个demo](http://www.runoob.com/try/try.php?filename=tryjsref_ondrag_all)\n\n### bind()\n`bind()` 方法的主要作用就是将函数绑定至某个对象，`bind()` 方法会创建一个函数，函数体内this对象的值会被绑定到传入`bind()` 函数的值\n#### 1. 原理\n``` js \nFunction.prototype.bind = function(context) {\n var self = this; // 保存原函数\n return function() { // 返回一个新函数\n  return self.apply(context, arguments); // 执行新函数时，将传入的上下文context作为新函数的this\n }\n}\n```\n#### 2. bind的应用场景\n__实现对象继承__\n\n``` js \nvar A = function(name) {\n this.name = name;\n}\n \nvar B = function() {\n A.bind(this, arguments);\n}\n \nB.prototype.getName = function() {\n return this.name;\n}\n \nvar b = new B(\"hello\");\nconsole.log(b.getName()); // \"hello\"\n```\n__事件处理__\n\n``` javascript\nvar paint = {\n color: \"red\",\n count: 0,\n updateCount: function() {\n  this.count++;\n  console.log(this.count);\n }\n};\n \n// 事件处理函数绑定的错误方法：\ndocument.querySelector('button')\n .addEventListener('click', paint.updateCount); // paint.updateCount函数的this指向变成了该DOM对象\n \n// 事件处理函数绑定的正确方法：\ndocument.querySelector('button')\n .addEventListener('click', paint.updateCount.bind(paint)); // paint.updateCount函数的this指向变成了paint\n```\n\n__时间间隔函数__\n``` js\nvar notify = {\n text: \"Hello World！\",\n beforeRender: function() {\n  console.log(this.text);\n },\n render: function() {\n \n  // 错误方法：\n  setTimeout(this.beforeRender, 0); // undefined\n \n  // 正确方法：\n  setTimeout(this.beforeRender.bind(this), 0); // \"Hello World！\"\n }\n};\n \nnotify.render();\n```\n\n__借用Array的原生方法__\n``` js\nvar a = {};\nArray.prototype.push.bind(a, \"hello\", \"world\")();\n \nconsole.log(a); // \"hello\", \"world\"\n```\n#### 3. 与call/apply的区别\n共同点：  \n\n都可以改变函数执行的上下文环境；\n\n不同点：\n\nbind: 不立即执行函数，一般用在异步调用和事件； call/apply： 立即执行函数。\n\n### console\n1. `console.assert(expression, obj[, obj...])`  \n\n接收至少两个参数，第一个参数的值或返回值为false的时候，将会在控制台上输出后续参数的值. eg: \n``` js\nconsole.assert(1 == 1, object); // 无输出，返回 undefined  \nconsole.assert(1 == 2, object); // 输出 object\n```\n\n2. `console.error(obj[, obj...])`  \n\n用于输出错误信息，用法和常见的console.log一样，不同点在于输出内容会标记为错误的样式，便于分辨。  \n\n3. `console.dir(obj)`  \n\n将传入对象的属性，包括子对象的属性以列表形式输出. eg:\n\n``` js\nvar obj = { name: 'classicemi', college: 'HUST', major: 'ei'};  \nconsole.dir(obj);\n```\n\n4. `console.group()`\n\n能够让控制台输出的语句产生不同的层级嵌套关系，每一个console.group()会增加一层嵌套，相反要减少一层嵌套可以使用console.groupEnd()方法。和console.group()相似的方法是console.groupCollapsed()作用相同，不同点是嵌套的输出内容是折叠状态，在有大段内容输出的时候使用这个方法可以使输出版面不至于太长吧.\n\n5. `console.info(obj[, obj...])`  \n与之前说到的console.error一样，用于输出信息，没有什么特别之处。\n\n6. `console.table()`  \n\n可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的 undefined。实际中感觉用得少。\n\n7. `console.profile([profileLabel])`  \n\n借助控制台以及console.profile()方法我们可以很方便地监控运行性能。\n\n8. `console.time(name)`\n\n将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上，name参数可作为标签名。\n\n9. `console.trace()`  \n\nconsole.trace()用来追踪函数的调用过程。在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，console.trace()方法可以将函数的被调用过程清楚地输出到控制台上。\n\n10. `console.warn(object[, object...])`\n\n输出参数的内容，作为警告提示。\n\n_console对象上的五个直接输出方法，console.log(),console.warn(),console.error(),console.exception()(等同于console.error())和console.info()，都可以使用占位符。支持的占位符有四种，分别是字符(%s)、整数(%d或%i)、浮点数(%f)和对象(%o)。_ eg:\n\n``` js\nconsole.log('%s是%d年%d月%d日', '今天', 2014, 4, 15);\nconsole.log('圆周率是%f', 3.14159);\nvar obj = { name: 'classicemi'}\nconsole.log('%o', obj);\n```\n\n_还有一种特殊的标示符%c，对输出的文字可以附加特殊的样式，当进行大型项目开发的时候，代码中可能有很多其他开发者添加的控制台语句。开发者对自己的输出定制特别的样式就可以方便自己在眼花缭乱的输出结果中一眼看到自己需要的内容。_ eg:\n``` js\nconsole.log('%cMy name is classicemi.', 'color: #fff; background: #f40; font-size: 24px;');\n```\n\n","source":"_posts/前端小问题总结.md","raw":"---\ntitle: 前端小问题总结（一）\ndate: 2018-05-17 21:56:38\ntags: [js, console, 跨域]\n---\n旨在记录自己在实际项目中遇见的一些小问题，简单做个记录。以便以后翻阅。 \n\n### document.domain\n通常，解决跨域问题的方法有：\n1. document.domain \n2. jsonp  \n3. iframe\n4. 代理\n5. CORS  \n\n用document.domain来指定域，是可以的，但是有局限性，也就是一级域名一致才可以。\n[_**参考document.domain**_](https://blog.csdn.net/yuan_zhikong/article/details/76038222)\n\n### 拖动\nondragstart 事件在用户开始拖动元素或选择的文本时触发。  \n\n**PS:**  \n\n1. 为了让元素可拖动，需要使用 HTML5 `draggable=true` 属性。\n2.  链接和图片默认是可拖动的，不需要 draggable 属性。\n3.  Internet Explorer 8 及更早 IE 版本或 Safari 5.1 及更早版本的浏览器不支持 drag 事件。\n在拖放的过程中会触发以下事件：  \n在拖动目标上触发事件 (源元素):\n+ ondragstart - 用户开始拖动元素时触发\n+ ondrag - 元素正在拖动时触发\n+ ondragend - 用户完成元素拖动后触发\n\n释放目标时触发的事件:\n+ ondragenter - 当被鼠标拖动的对象进入其容器范围内时触发此事件\n+ ondragover - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件\n+ ondragleave - 当被鼠标拖动的对象离开其容器范围内时触发此事件\n+ ondrop - 在一个拖动过程中，释放鼠标键时触发此事件\n\n[关于drag的一个demo](http://www.runoob.com/try/try.php?filename=tryjsref_ondrag_all)\n\n### bind()\n`bind()` 方法的主要作用就是将函数绑定至某个对象，`bind()` 方法会创建一个函数，函数体内this对象的值会被绑定到传入`bind()` 函数的值\n#### 1. 原理\n``` js \nFunction.prototype.bind = function(context) {\n var self = this; // 保存原函数\n return function() { // 返回一个新函数\n  return self.apply(context, arguments); // 执行新函数时，将传入的上下文context作为新函数的this\n }\n}\n```\n#### 2. bind的应用场景\n__实现对象继承__\n\n``` js \nvar A = function(name) {\n this.name = name;\n}\n \nvar B = function() {\n A.bind(this, arguments);\n}\n \nB.prototype.getName = function() {\n return this.name;\n}\n \nvar b = new B(\"hello\");\nconsole.log(b.getName()); // \"hello\"\n```\n__事件处理__\n\n``` javascript\nvar paint = {\n color: \"red\",\n count: 0,\n updateCount: function() {\n  this.count++;\n  console.log(this.count);\n }\n};\n \n// 事件处理函数绑定的错误方法：\ndocument.querySelector('button')\n .addEventListener('click', paint.updateCount); // paint.updateCount函数的this指向变成了该DOM对象\n \n// 事件处理函数绑定的正确方法：\ndocument.querySelector('button')\n .addEventListener('click', paint.updateCount.bind(paint)); // paint.updateCount函数的this指向变成了paint\n```\n\n__时间间隔函数__\n``` js\nvar notify = {\n text: \"Hello World！\",\n beforeRender: function() {\n  console.log(this.text);\n },\n render: function() {\n \n  // 错误方法：\n  setTimeout(this.beforeRender, 0); // undefined\n \n  // 正确方法：\n  setTimeout(this.beforeRender.bind(this), 0); // \"Hello World！\"\n }\n};\n \nnotify.render();\n```\n\n__借用Array的原生方法__\n``` js\nvar a = {};\nArray.prototype.push.bind(a, \"hello\", \"world\")();\n \nconsole.log(a); // \"hello\", \"world\"\n```\n#### 3. 与call/apply的区别\n共同点：  \n\n都可以改变函数执行的上下文环境；\n\n不同点：\n\nbind: 不立即执行函数，一般用在异步调用和事件； call/apply： 立即执行函数。\n\n### console\n1. `console.assert(expression, obj[, obj...])`  \n\n接收至少两个参数，第一个参数的值或返回值为false的时候，将会在控制台上输出后续参数的值. eg: \n``` js\nconsole.assert(1 == 1, object); // 无输出，返回 undefined  \nconsole.assert(1 == 2, object); // 输出 object\n```\n\n2. `console.error(obj[, obj...])`  \n\n用于输出错误信息，用法和常见的console.log一样，不同点在于输出内容会标记为错误的样式，便于分辨。  \n\n3. `console.dir(obj)`  \n\n将传入对象的属性，包括子对象的属性以列表形式输出. eg:\n\n``` js\nvar obj = { name: 'classicemi', college: 'HUST', major: 'ei'};  \nconsole.dir(obj);\n```\n\n4. `console.group()`\n\n能够让控制台输出的语句产生不同的层级嵌套关系，每一个console.group()会增加一层嵌套，相反要减少一层嵌套可以使用console.groupEnd()方法。和console.group()相似的方法是console.groupCollapsed()作用相同，不同点是嵌套的输出内容是折叠状态，在有大段内容输出的时候使用这个方法可以使输出版面不至于太长吧.\n\n5. `console.info(obj[, obj...])`  \n与之前说到的console.error一样，用于输出信息，没有什么特别之处。\n\n6. `console.table()`  \n\n可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的 undefined。实际中感觉用得少。\n\n7. `console.profile([profileLabel])`  \n\n借助控制台以及console.profile()方法我们可以很方便地监控运行性能。\n\n8. `console.time(name)`\n\n将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上，name参数可作为标签名。\n\n9. `console.trace()`  \n\nconsole.trace()用来追踪函数的调用过程。在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，console.trace()方法可以将函数的被调用过程清楚地输出到控制台上。\n\n10. `console.warn(object[, object...])`\n\n输出参数的内容，作为警告提示。\n\n_console对象上的五个直接输出方法，console.log(),console.warn(),console.error(),console.exception()(等同于console.error())和console.info()，都可以使用占位符。支持的占位符有四种，分别是字符(%s)、整数(%d或%i)、浮点数(%f)和对象(%o)。_ eg:\n\n``` js\nconsole.log('%s是%d年%d月%d日', '今天', 2014, 4, 15);\nconsole.log('圆周率是%f', 3.14159);\nvar obj = { name: 'classicemi'}\nconsole.log('%o', obj);\n```\n\n_还有一种特殊的标示符%c，对输出的文字可以附加特殊的样式，当进行大型项目开发的时候，代码中可能有很多其他开发者添加的控制台语句。开发者对自己的输出定制特别的样式就可以方便自己在眼花缭乱的输出结果中一眼看到自己需要的内容。_ eg:\n``` js\nconsole.log('%cMy name is classicemi.', 'color: #fff; background: #f40; font-size: 24px;');\n```\n\n","slug":"前端小问题总结","published":1,"updated":"2018-07-27T10:34:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwg1p000k66fyjt76wswj","content":"<p>旨在记录自己在实际项目中遇见的一些小问题，简单做个记录。以便以后翻阅。 </p>\n<h3 id=\"document-domain\"><a href=\"#document-domain\" class=\"headerlink\" title=\"document.domain\"></a>document.domain</h3><p>通常，解决跨域问题的方法有：</p>\n<ol>\n<li>document.domain </li>\n<li>jsonp  </li>\n<li>iframe</li>\n<li>代理</li>\n<li>CORS  </li>\n</ol>\n<p>用document.domain来指定域，是可以的，但是有局限性，也就是一级域名一致才可以。<br><a href=\"https://blog.csdn.net/yuan_zhikong/article/details/76038222\" target=\"_blank\" rel=\"noopener\"><em><strong>参考document.domain</strong></em></a></p>\n<h3 id=\"拖动\"><a href=\"#拖动\" class=\"headerlink\" title=\"拖动\"></a>拖动</h3><p>ondragstart 事件在用户开始拖动元素或选择的文本时触发。  </p>\n<p><strong>PS:</strong>  </p>\n<ol>\n<li>为了让元素可拖动，需要使用 HTML5 <code>draggable=true</code> 属性。</li>\n<li>链接和图片默认是可拖动的，不需要 draggable 属性。</li>\n<li>Internet Explorer 8 及更早 IE 版本或 Safari 5.1 及更早版本的浏览器不支持 drag 事件。<br>在拖放的过程中会触发以下事件：<br>在拖动目标上触发事件 (源元素):</li>\n</ol>\n<ul>\n<li>ondragstart - 用户开始拖动元素时触发</li>\n<li>ondrag - 元素正在拖动时触发</li>\n<li>ondragend - 用户完成元素拖动后触发</li>\n</ul>\n<p>释放目标时触发的事件:</p>\n<ul>\n<li>ondragenter - 当被鼠标拖动的对象进入其容器范围内时触发此事件</li>\n<li>ondragover - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件</li>\n<li>ondragleave - 当被鼠标拖动的对象离开其容器范围内时触发此事件</li>\n<li>ondrop - 在一个拖动过程中，释放鼠标键时触发此事件</li>\n</ul>\n<p><a href=\"http://www.runoob.com/try/try.php?filename=tryjsref_ondrag_all\" target=\"_blank\" rel=\"noopener\">关于drag的一个demo</a></p>\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h3><p><code>bind()</code> 方法的主要作用就是将函数绑定至某个对象，<code>bind()</code> 方法会创建一个函数，函数体内this对象的值会被绑定到传入<code>bind()</code> 函数的值</p>\n<h4 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>; <span class=\"comment\">// 保存原函数</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 返回一个新函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> self.apply(context, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// 执行新函数时，将传入的上下文context作为新函数的this</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-bind的应用场景\"><a href=\"#2-bind的应用场景\" class=\"headerlink\" title=\"2. bind的应用场景\"></a>2. bind的应用场景</h4><p><strong>实现对象继承</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> B = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> A.bind(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">B.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> B(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.getName()); <span class=\"comment\">// \"hello\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>事件处理</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> paint = &#123;</span><br><span class=\"line\"> color: <span class=\"string\">\"red\"</span>,</span><br><span class=\"line\"> count: <span class=\"number\">0</span>,</span><br><span class=\"line\"> updateCount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.count++;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.count);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 事件处理函数绑定的错误方法：</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>)</span><br><span class=\"line\"> .addEventListener(<span class=\"string\">'click'</span>, paint.updateCount); <span class=\"comment\">// paint.updateCount函数的this指向变成了该DOM对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 事件处理函数绑定的正确方法：</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>)</span><br><span class=\"line\"> .addEventListener(<span class=\"string\">'click'</span>, paint.updateCount.bind(paint)); <span class=\"comment\">// paint.updateCount函数的this指向变成了paint</span></span><br></pre></td></tr></table></figure>\n<p><strong>时间间隔函数</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> notify = &#123;</span><br><span class=\"line\"> text: <span class=\"string\">\"Hello World！\"</span>,</span><br><span class=\"line\"> beforeRender: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.text);</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 错误方法：</span></span><br><span class=\"line\">  setTimeout(<span class=\"keyword\">this</span>.beforeRender, <span class=\"number\">0</span>); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 正确方法：</span></span><br><span class=\"line\">  setTimeout(<span class=\"keyword\">this</span>.beforeRender.bind(<span class=\"keyword\">this</span>), <span class=\"number\">0</span>); <span class=\"comment\">// \"Hello World！\"</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">notify.render();</span><br></pre></td></tr></table></figure></p>\n<p><strong>借用Array的原生方法</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.bind(a, <span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>)();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// \"hello\", \"world\"</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-与call-apply的区别\"><a href=\"#3-与call-apply的区别\" class=\"headerlink\" title=\"3. 与call/apply的区别\"></a>3. 与call/apply的区别</h4><p>共同点：  </p>\n<p>都可以改变函数执行的上下文环境；</p>\n<p>不同点：</p>\n<p>bind: 不立即执行函数，一般用在异步调用和事件； call/apply： 立即执行函数。</p>\n<h3 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h3><ol>\n<li><code>console.assert(expression, obj[, obj...])</code>  </li>\n</ol>\n<p>接收至少两个参数，第一个参数的值或返回值为false的时候，将会在控制台上输出后续参数的值. eg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.assert(<span class=\"number\">1</span> == <span class=\"number\">1</span>, object); <span class=\"comment\">// 无输出，返回 undefined  </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.assert(<span class=\"number\">1</span> == <span class=\"number\">2</span>, object); <span class=\"comment\">// 输出 object</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li><code>console.error(obj[, obj...])</code>  </li>\n</ol>\n<p>用于输出错误信息，用法和常见的console.log一样，不同点在于输出内容会标记为错误的样式，便于分辨。  </p>\n<ol start=\"3\">\n<li><code>console.dir(obj)</code>  </li>\n</ol>\n<p>将传入对象的属性，包括子对象的属性以列表形式输出. eg:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'classicemi'</span>, <span class=\"attr\">college</span>: <span class=\"string\">'HUST'</span>, <span class=\"attr\">major</span>: <span class=\"string\">'ei'</span>&#125;;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(obj);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><code>console.group()</code></li>\n</ol>\n<p>能够让控制台输出的语句产生不同的层级嵌套关系，每一个console.group()会增加一层嵌套，相反要减少一层嵌套可以使用console.groupEnd()方法。和console.group()相似的方法是console.groupCollapsed()作用相同，不同点是嵌套的输出内容是折叠状态，在有大段内容输出的时候使用这个方法可以使输出版面不至于太长吧.</p>\n<ol start=\"5\">\n<li><p><code>console.info(obj[, obj...])</code><br>与之前说到的console.error一样，用于输出信息，没有什么特别之处。</p>\n</li>\n<li><p><code>console.table()</code>  </p>\n</li>\n</ol>\n<p>可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的 undefined。实际中感觉用得少。</p>\n<ol start=\"7\">\n<li><code>console.profile([profileLabel])</code>  </li>\n</ol>\n<p>借助控制台以及console.profile()方法我们可以很方便地监控运行性能。</p>\n<ol start=\"8\">\n<li><code>console.time(name)</code></li>\n</ol>\n<p>将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上，name参数可作为标签名。</p>\n<ol start=\"9\">\n<li><code>console.trace()</code>  </li>\n</ol>\n<p>console.trace()用来追踪函数的调用过程。在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，console.trace()方法可以将函数的被调用过程清楚地输出到控制台上。</p>\n<ol start=\"10\">\n<li><code>console.warn(object[, object...])</code></li>\n</ol>\n<p>输出参数的内容，作为警告提示。</p>\n<p><em>console对象上的五个直接输出方法，console.log(),console.warn(),console.error(),console.exception()(等同于console.error())和console.info()，都可以使用占位符。支持的占位符有四种，分别是字符(%s)、整数(%d或%i)、浮点数(%f)和对象(%o)。</em> eg:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'%s是%d年%d月%d日'</span>, <span class=\"string\">'今天'</span>, <span class=\"number\">2014</span>, <span class=\"number\">4</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'圆周率是%f'</span>, <span class=\"number\">3.14159</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'classicemi'</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'%o'</span>, obj);</span><br></pre></td></tr></table></figure>\n<p><em>还有一种特殊的标示符%c，对输出的文字可以附加特殊的样式，当进行大型项目开发的时候，代码中可能有很多其他开发者添加的控制台语句。开发者对自己的输出定制特别的样式就可以方便自己在眼花缭乱的输出结果中一眼看到自己需要的内容。</em> eg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'%cMy name is classicemi.'</span>, <span class=\"string\">'color: #fff; background: #f40; font-size: 24px;'</span>);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>旨在记录自己在实际项目中遇见的一些小问题，简单做个记录。以便以后翻阅。 </p>\n<h3 id=\"document-domain\"><a href=\"#document-domain\" class=\"headerlink\" title=\"document.domain\"></a>document.domain</h3><p>通常，解决跨域问题的方法有：</p>\n<ol>\n<li>document.domain </li>\n<li>jsonp  </li>\n<li>iframe</li>\n<li>代理</li>\n<li>CORS  </li>\n</ol>\n<p>用document.domain来指定域，是可以的，但是有局限性，也就是一级域名一致才可以。<br><a href=\"https://blog.csdn.net/yuan_zhikong/article/details/76038222\" target=\"_blank\" rel=\"noopener\"><em><strong>参考document.domain</strong></em></a></p>\n<h3 id=\"拖动\"><a href=\"#拖动\" class=\"headerlink\" title=\"拖动\"></a>拖动</h3><p>ondragstart 事件在用户开始拖动元素或选择的文本时触发。  </p>\n<p><strong>PS:</strong>  </p>\n<ol>\n<li>为了让元素可拖动，需要使用 HTML5 <code>draggable=true</code> 属性。</li>\n<li>链接和图片默认是可拖动的，不需要 draggable 属性。</li>\n<li>Internet Explorer 8 及更早 IE 版本或 Safari 5.1 及更早版本的浏览器不支持 drag 事件。<br>在拖放的过程中会触发以下事件：<br>在拖动目标上触发事件 (源元素):</li>\n</ol>\n<ul>\n<li>ondragstart - 用户开始拖动元素时触发</li>\n<li>ondrag - 元素正在拖动时触发</li>\n<li>ondragend - 用户完成元素拖动后触发</li>\n</ul>\n<p>释放目标时触发的事件:</p>\n<ul>\n<li>ondragenter - 当被鼠标拖动的对象进入其容器范围内时触发此事件</li>\n<li>ondragover - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件</li>\n<li>ondragleave - 当被鼠标拖动的对象离开其容器范围内时触发此事件</li>\n<li>ondrop - 在一个拖动过程中，释放鼠标键时触发此事件</li>\n</ul>\n<p><a href=\"http://www.runoob.com/try/try.php?filename=tryjsref_ondrag_all\" target=\"_blank\" rel=\"noopener\">关于drag的一个demo</a></p>\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h3><p><code>bind()</code> 方法的主要作用就是将函数绑定至某个对象，<code>bind()</code> 方法会创建一个函数，函数体内this对象的值会被绑定到传入<code>bind()</code> 函数的值</p>\n<h4 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>; <span class=\"comment\">// 保存原函数</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 返回一个新函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> self.apply(context, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// 执行新函数时，将传入的上下文context作为新函数的this</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-bind的应用场景\"><a href=\"#2-bind的应用场景\" class=\"headerlink\" title=\"2. bind的应用场景\"></a>2. bind的应用场景</h4><p><strong>实现对象继承</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> B = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> A.bind(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">B.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> B(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.getName()); <span class=\"comment\">// \"hello\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>事件处理</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> paint = &#123;</span><br><span class=\"line\"> color: <span class=\"string\">\"red\"</span>,</span><br><span class=\"line\"> count: <span class=\"number\">0</span>,</span><br><span class=\"line\"> updateCount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.count++;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.count);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 事件处理函数绑定的错误方法：</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>)</span><br><span class=\"line\"> .addEventListener(<span class=\"string\">'click'</span>, paint.updateCount); <span class=\"comment\">// paint.updateCount函数的this指向变成了该DOM对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 事件处理函数绑定的正确方法：</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>)</span><br><span class=\"line\"> .addEventListener(<span class=\"string\">'click'</span>, paint.updateCount.bind(paint)); <span class=\"comment\">// paint.updateCount函数的this指向变成了paint</span></span><br></pre></td></tr></table></figure>\n<p><strong>时间间隔函数</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> notify = &#123;</span><br><span class=\"line\"> text: <span class=\"string\">\"Hello World！\"</span>,</span><br><span class=\"line\"> beforeRender: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.text);</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 错误方法：</span></span><br><span class=\"line\">  setTimeout(<span class=\"keyword\">this</span>.beforeRender, <span class=\"number\">0</span>); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 正确方法：</span></span><br><span class=\"line\">  setTimeout(<span class=\"keyword\">this</span>.beforeRender.bind(<span class=\"keyword\">this</span>), <span class=\"number\">0</span>); <span class=\"comment\">// \"Hello World！\"</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">notify.render();</span><br></pre></td></tr></table></figure></p>\n<p><strong>借用Array的原生方法</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.bind(a, <span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>)();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// \"hello\", \"world\"</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-与call-apply的区别\"><a href=\"#3-与call-apply的区别\" class=\"headerlink\" title=\"3. 与call/apply的区别\"></a>3. 与call/apply的区别</h4><p>共同点：  </p>\n<p>都可以改变函数执行的上下文环境；</p>\n<p>不同点：</p>\n<p>bind: 不立即执行函数，一般用在异步调用和事件； call/apply： 立即执行函数。</p>\n<h3 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h3><ol>\n<li><code>console.assert(expression, obj[, obj...])</code>  </li>\n</ol>\n<p>接收至少两个参数，第一个参数的值或返回值为false的时候，将会在控制台上输出后续参数的值. eg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.assert(<span class=\"number\">1</span> == <span class=\"number\">1</span>, object); <span class=\"comment\">// 无输出，返回 undefined  </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.assert(<span class=\"number\">1</span> == <span class=\"number\">2</span>, object); <span class=\"comment\">// 输出 object</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li><code>console.error(obj[, obj...])</code>  </li>\n</ol>\n<p>用于输出错误信息，用法和常见的console.log一样，不同点在于输出内容会标记为错误的样式，便于分辨。  </p>\n<ol start=\"3\">\n<li><code>console.dir(obj)</code>  </li>\n</ol>\n<p>将传入对象的属性，包括子对象的属性以列表形式输出. eg:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'classicemi'</span>, <span class=\"attr\">college</span>: <span class=\"string\">'HUST'</span>, <span class=\"attr\">major</span>: <span class=\"string\">'ei'</span>&#125;;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(obj);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><code>console.group()</code></li>\n</ol>\n<p>能够让控制台输出的语句产生不同的层级嵌套关系，每一个console.group()会增加一层嵌套，相反要减少一层嵌套可以使用console.groupEnd()方法。和console.group()相似的方法是console.groupCollapsed()作用相同，不同点是嵌套的输出内容是折叠状态，在有大段内容输出的时候使用这个方法可以使输出版面不至于太长吧.</p>\n<ol start=\"5\">\n<li><p><code>console.info(obj[, obj...])</code><br>与之前说到的console.error一样，用于输出信息，没有什么特别之处。</p>\n</li>\n<li><p><code>console.table()</code>  </p>\n</li>\n</ol>\n<p>可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的 undefined。实际中感觉用得少。</p>\n<ol start=\"7\">\n<li><code>console.profile([profileLabel])</code>  </li>\n</ol>\n<p>借助控制台以及console.profile()方法我们可以很方便地监控运行性能。</p>\n<ol start=\"8\">\n<li><code>console.time(name)</code></li>\n</ol>\n<p>将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上，name参数可作为标签名。</p>\n<ol start=\"9\">\n<li><code>console.trace()</code>  </li>\n</ol>\n<p>console.trace()用来追踪函数的调用过程。在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，console.trace()方法可以将函数的被调用过程清楚地输出到控制台上。</p>\n<ol start=\"10\">\n<li><code>console.warn(object[, object...])</code></li>\n</ol>\n<p>输出参数的内容，作为警告提示。</p>\n<p><em>console对象上的五个直接输出方法，console.log(),console.warn(),console.error(),console.exception()(等同于console.error())和console.info()，都可以使用占位符。支持的占位符有四种，分别是字符(%s)、整数(%d或%i)、浮点数(%f)和对象(%o)。</em> eg:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'%s是%d年%d月%d日'</span>, <span class=\"string\">'今天'</span>, <span class=\"number\">2014</span>, <span class=\"number\">4</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'圆周率是%f'</span>, <span class=\"number\">3.14159</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'classicemi'</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'%o'</span>, obj);</span><br></pre></td></tr></table></figure>\n<p><em>还有一种特殊的标示符%c，对输出的文字可以附加特殊的样式，当进行大型项目开发的时候，代码中可能有很多其他开发者添加的控制台语句。开发者对自己的输出定制特别的样式就可以方便自己在眼花缭乱的输出结果中一眼看到自己需要的内容。</em> eg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'%cMy name is classicemi.'</span>, <span class=\"string\">'color: #fff; background: #f40; font-size: 24px;'</span>);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"常用的linux命令","date":"2018-06-05T09:02:57.000Z","description":"个人工作中遇到的一些linux命令，简单汇总，方便以后查阅。","_content":"\n## 查找某目录下某类文件\n``` bash\nfind . -name \".DS_Store\" -type f -print\n\n# find: 主命令  \n# . : 当前目录下（可变）  \n# -name: 通过名查找  \n# \".DS_Store\": 后缀  \n# -type f: 一般正规文件  \n# -print: 查询结果打印\n```\n  \n\neg： 查找当前目录下所有的`.html`文件， 并打印就应该使用 \n`find . -name \".html\" -type f -print`  \n\n``` bash\nfind . -name \".DS_Store\" -type f -print -exec command {} \\;\n\n# -exec: 命令扩展，查询结束后要执行 command 命令\n# {}: 查询结果放到 {} 中\n# \\;: 扩展命令结束符，表示 到 ; 结束\n```\n\neg: 找到`.html`后,删除所有的查询结果，应使用：\n`find . -name \".DS_Store\" -type f -print -exec rm -rf {} \\;`\n\n## 不让 mac os 生成 .DS_Store 文件 \n``` bash\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores true\n```\n","source":"_posts/常用的linux命令.md","raw":"---\ntitle: 常用的linux命令\ndate: 2018-06-05 17:02:57\ntags: [linux, ques]\ndescription: 个人工作中遇到的一些linux命令，简单汇总，方便以后查阅。\n---\n\n## 查找某目录下某类文件\n``` bash\nfind . -name \".DS_Store\" -type f -print\n\n# find: 主命令  \n# . : 当前目录下（可变）  \n# -name: 通过名查找  \n# \".DS_Store\": 后缀  \n# -type f: 一般正规文件  \n# -print: 查询结果打印\n```\n  \n\neg： 查找当前目录下所有的`.html`文件， 并打印就应该使用 \n`find . -name \".html\" -type f -print`  \n\n``` bash\nfind . -name \".DS_Store\" -type f -print -exec command {} \\;\n\n# -exec: 命令扩展，查询结束后要执行 command 命令\n# {}: 查询结果放到 {} 中\n# \\;: 扩展命令结束符，表示 到 ; 结束\n```\n\neg: 找到`.html`后,删除所有的查询结果，应使用：\n`find . -name \".DS_Store\" -type f -print -exec rm -rf {} \\;`\n\n## 不让 mac os 生成 .DS_Store 文件 \n``` bash\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores true\n```\n","slug":"常用的linux命令","published":1,"updated":"2018-07-27T10:34:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwg2k000m66fyw7hrmw75","content":"<h2 id=\"查找某目录下某类文件\"><a href=\"#查找某目录下某类文件\" class=\"headerlink\" title=\"查找某目录下某类文件\"></a>查找某目录下某类文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">\".DS_Store\"</span> -<span class=\"built_in\">type</span> f -<span class=\"built_in\">print</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># find: 主命令  </span></span><br><span class=\"line\"><span class=\"comment\"># . : 当前目录下（可变）  </span></span><br><span class=\"line\"><span class=\"comment\"># -name: 通过名查找  </span></span><br><span class=\"line\"><span class=\"comment\"># \".DS_Store\": 后缀  </span></span><br><span class=\"line\"><span class=\"comment\"># -type f: 一般正规文件  </span></span><br><span class=\"line\"><span class=\"comment\"># -print: 查询结果打印</span></span><br></pre></td></tr></table></figure>\n<p>eg： 查找当前目录下所有的<code>.html</code>文件， 并打印就应该使用<br><code>find . -name &quot;.html&quot; -type f -print</code>  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">\".DS_Store\"</span> -<span class=\"built_in\">type</span> f -<span class=\"built_in\">print</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">command</span> &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -exec: 命令扩展，查询结束后要执行 command 命令</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;&#125;: 查询结果放到 &#123;&#125; 中</span></span><br><span class=\"line\"><span class=\"comment\"># \\;: 扩展命令结束符，表示 到 ; 结束</span></span><br></pre></td></tr></table></figure>\n<p>eg: 找到<code>.html</code>后,删除所有的查询结果，应使用：<br><code>find . -name &quot;.DS_Store&quot; -type f -print -exec rm -rf {} \\;</code></p>\n<h2 id=\"不让-mac-os-生成-DS-Store-文件\"><a href=\"#不让-mac-os-生成-DS-Store-文件\" class=\"headerlink\" title=\"不让 mac os 生成 .DS_Store 文件\"></a>不让 mac os 生成 .DS_Store 文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.desktopservices DSDontWriteNetworkStores <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查找某目录下某类文件\"><a href=\"#查找某目录下某类文件\" class=\"headerlink\" title=\"查找某目录下某类文件\"></a>查找某目录下某类文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">\".DS_Store\"</span> -<span class=\"built_in\">type</span> f -<span class=\"built_in\">print</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># find: 主命令  </span></span><br><span class=\"line\"><span class=\"comment\"># . : 当前目录下（可变）  </span></span><br><span class=\"line\"><span class=\"comment\"># -name: 通过名查找  </span></span><br><span class=\"line\"><span class=\"comment\"># \".DS_Store\": 后缀  </span></span><br><span class=\"line\"><span class=\"comment\"># -type f: 一般正规文件  </span></span><br><span class=\"line\"><span class=\"comment\"># -print: 查询结果打印</span></span><br></pre></td></tr></table></figure>\n<p>eg： 查找当前目录下所有的<code>.html</code>文件， 并打印就应该使用<br><code>find . -name &quot;.html&quot; -type f -print</code>  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">\".DS_Store\"</span> -<span class=\"built_in\">type</span> f -<span class=\"built_in\">print</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">command</span> &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -exec: 命令扩展，查询结束后要执行 command 命令</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;&#125;: 查询结果放到 &#123;&#125; 中</span></span><br><span class=\"line\"><span class=\"comment\"># \\;: 扩展命令结束符，表示 到 ; 结束</span></span><br></pre></td></tr></table></figure>\n<p>eg: 找到<code>.html</code>后,删除所有的查询结果，应使用：<br><code>find . -name &quot;.DS_Store&quot; -type f -print -exec rm -rf {} \\;</code></p>\n<h2 id=\"不让-mac-os-生成-DS-Store-文件\"><a href=\"#不让-mac-os-生成-DS-Store-文件\" class=\"headerlink\" title=\"不让 mac os 生成 .DS_Store 文件\"></a>不让 mac os 生成 .DS_Store 文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.desktopservices DSDontWriteNetworkStores <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"自己封装myLocalStorage，使其有有效期","date":"2018-07-20T08:30:02.000Z","description":"项目中遇见 cookie 值存不上，what fuck？什么情况，不知道。用$.cookie 和原生的 cookie 都不行，存上值，就被删了一样。找不见地方。考虑到项目比较大，去找得代价，还不如换种实现方式，于是就想起来用 localStorage 了。然后 localStorage 又不像 $.cookie 那样有过期时间。因此需要自己去封装一下，故而，有了这个一个博客。勿喷！","_content":"项目中遇见 cookie 值存不上，what fuck？什么情况，不知道。用$.cookie 和原生的 cookie 都不行，存上值，就被删了一样。找不见地方。考虑到项目比较大，去找得代价，还不如换种实现方式，于是就想起来用 localStorage 了。然后 localStorage 又不像 $.cookie 那样有过期时间。因此需要自己去封装一下，故而，有了这个一个博客。勿喷！  \n\n## 调用方式\n`setItem()`与 $.cookie() 类似，expires 支持传入一个时间对象（object），有效时间的数值（number， 单位：毫秒 或者 天）；  \n当 expires 值类型为 number ，且值小于等于当年的总天数时，表示的为天，否则表示毫秒；  \n光说，不行，看看下面：  \n调用方式:\n```js\nvar myLocalStorage = require('');\nmyLocalStorage.setItem(\"test1\", \"Mobro1\", {expires: 1});\nmyLocalStorage.setItem(\n    \"test2\", \n    \"Mobro2\", \n    {expires: new Date(new Date().getTime() + 1000 * 60 * 60 * 24)}\n    );\nmyLocalStorage.setItem(\"test3\", \"Mobro3\", {expires: 1000 * 60 * 10});\n```\ntest1: 有效期为 1 天。  \ntest2: 有效期为 1 天。  \ntest3: 有效期为 10 分钟。  \n\n`getItem()` 与 $.cookie() 也是类似的，取那个 localStorage 值，只需要传入一个 key 键名就好了。若没有找到 当前 key 对应的 localStorage 值，则返回 null 对象。  \n`removeItem()` 删除一个 localStorage 值，删除成功，返回true，否则返回 false  \n\n继续往下看：\n```js\nmyLocalStorage.getItem(\"test1\")  // Mobro1\nmyLocalStorage.removeItem(\"test1\");  // 如果成功\nmyLocalStorage.getItem(\"test1\")  // null\n```\n\n代码纯属手敲，逻辑上一定会有什么漏洞的，还望各位大牛不吝赐教。\n\n----\n\n只与同好争高下，不与傻瓜论短长。  -- 《欢乐颂》电视剧台词。  \n\n最近看了一部日本的电影，《希望在别处》，感觉还是不错的，给推荐一下。    \n\n\n四川老家大雨，火车拿去压桥了；   \n读大学的地方兰州大雨，车子被冲跑了；  \n工作地北京大雨，天天上班穿拖鞋，每天丢一把伞；   \n哈哈哈哈  \n    >oo<\n\n----\n\n## 完整源码  \n```js\nvar myLocalStorage = {\n    setItem: function(key, value, exp) {\n        var obj = new Object(),\n            expires = exp.expires || null;\n        obj.value = value;\n        obj.time = new Date().getTime();\n\n        // expires 类型\n        if (expires === null) {\n            delete obj.expires;\n        } else if (typeof expires === \"object\") {\n            obj.expires = expires.getTime() - obj.time;\n        } else if (typeof expires === \"number\") {\n            if ((expires | 0) !== expires) {\n                throw new Error(\"expires must be integer number!\");\n            }\n\n            // expires 小于 365、366 则，按天算。否则按时间戳算\n            if (expires <= getYearDays() && expires > 0) {\n                obj.expires = expires * 1000 * 60 * 60 * 24;\n            } else if (expires > getYearDays()) {\n                obj.expires = expires;\n            } else if (expires <= 0) {\n                this.removeItem(key);\n            }\n        }\n        localStorage.setItem(key, JSON.stringify(obj));\n    },\n    getItem: function(key) {\n        var obj = JSON.parse(localStorage.getItem(key));\n        if (obj === \"null\" || obj === null) return null;\n        var expires = obj.expires, \n            now = new Date().getTime(), \n            time = obj.time;\n\n        if (now - time >= expires ||\n            now < time) {\n            localStorage.removeItem(key);\n            return null;\n        } else {\n            return obj.value;\n        }\n    },\n    \n    // 删除成功返回 true， 否则返回 false\n    removeItem: function(key) { \n        if (this.getItem(key) !== null) {\n            localStorage.removeItem(key);\n\n            return this.getItem(key) === null ? true : false;\n        }\n        return true;\n    },\n    keys: function(key) {\n\n    }\n}\nfunction getYearDays () {\n    return new Date().getFullYear() % 4 === 0 ? 366 : 365;\n}\n\n\nmodule.exports = myLocalStorage;\n\n```","source":"_posts/自己封装myLocalStorage，使其有有效期.md","raw":"---\ntitle: 自己封装myLocalStorage，使其有有效期\ndate: 2018-07-20 16:30:02\ntags: [localStorage, cookie]\ndescription: 项目中遇见 cookie 值存不上，what fuck？什么情况，不知道。用$.cookie 和原生的 cookie 都不行，存上值，就被删了一样。找不见地方。考虑到项目比较大，去找得代价，还不如换种实现方式，于是就想起来用 localStorage 了。然后 localStorage 又不像 $.cookie 那样有过期时间。因此需要自己去封装一下，故而，有了这个一个博客。勿喷！\n---\n项目中遇见 cookie 值存不上，what fuck？什么情况，不知道。用$.cookie 和原生的 cookie 都不行，存上值，就被删了一样。找不见地方。考虑到项目比较大，去找得代价，还不如换种实现方式，于是就想起来用 localStorage 了。然后 localStorage 又不像 $.cookie 那样有过期时间。因此需要自己去封装一下，故而，有了这个一个博客。勿喷！  \n\n## 调用方式\n`setItem()`与 $.cookie() 类似，expires 支持传入一个时间对象（object），有效时间的数值（number， 单位：毫秒 或者 天）；  \n当 expires 值类型为 number ，且值小于等于当年的总天数时，表示的为天，否则表示毫秒；  \n光说，不行，看看下面：  \n调用方式:\n```js\nvar myLocalStorage = require('');\nmyLocalStorage.setItem(\"test1\", \"Mobro1\", {expires: 1});\nmyLocalStorage.setItem(\n    \"test2\", \n    \"Mobro2\", \n    {expires: new Date(new Date().getTime() + 1000 * 60 * 60 * 24)}\n    );\nmyLocalStorage.setItem(\"test3\", \"Mobro3\", {expires: 1000 * 60 * 10});\n```\ntest1: 有效期为 1 天。  \ntest2: 有效期为 1 天。  \ntest3: 有效期为 10 分钟。  \n\n`getItem()` 与 $.cookie() 也是类似的，取那个 localStorage 值，只需要传入一个 key 键名就好了。若没有找到 当前 key 对应的 localStorage 值，则返回 null 对象。  \n`removeItem()` 删除一个 localStorage 值，删除成功，返回true，否则返回 false  \n\n继续往下看：\n```js\nmyLocalStorage.getItem(\"test1\")  // Mobro1\nmyLocalStorage.removeItem(\"test1\");  // 如果成功\nmyLocalStorage.getItem(\"test1\")  // null\n```\n\n代码纯属手敲，逻辑上一定会有什么漏洞的，还望各位大牛不吝赐教。\n\n----\n\n只与同好争高下，不与傻瓜论短长。  -- 《欢乐颂》电视剧台词。  \n\n最近看了一部日本的电影，《希望在别处》，感觉还是不错的，给推荐一下。    \n\n\n四川老家大雨，火车拿去压桥了；   \n读大学的地方兰州大雨，车子被冲跑了；  \n工作地北京大雨，天天上班穿拖鞋，每天丢一把伞；   \n哈哈哈哈  \n    >oo<\n\n----\n\n## 完整源码  \n```js\nvar myLocalStorage = {\n    setItem: function(key, value, exp) {\n        var obj = new Object(),\n            expires = exp.expires || null;\n        obj.value = value;\n        obj.time = new Date().getTime();\n\n        // expires 类型\n        if (expires === null) {\n            delete obj.expires;\n        } else if (typeof expires === \"object\") {\n            obj.expires = expires.getTime() - obj.time;\n        } else if (typeof expires === \"number\") {\n            if ((expires | 0) !== expires) {\n                throw new Error(\"expires must be integer number!\");\n            }\n\n            // expires 小于 365、366 则，按天算。否则按时间戳算\n            if (expires <= getYearDays() && expires > 0) {\n                obj.expires = expires * 1000 * 60 * 60 * 24;\n            } else if (expires > getYearDays()) {\n                obj.expires = expires;\n            } else if (expires <= 0) {\n                this.removeItem(key);\n            }\n        }\n        localStorage.setItem(key, JSON.stringify(obj));\n    },\n    getItem: function(key) {\n        var obj = JSON.parse(localStorage.getItem(key));\n        if (obj === \"null\" || obj === null) return null;\n        var expires = obj.expires, \n            now = new Date().getTime(), \n            time = obj.time;\n\n        if (now - time >= expires ||\n            now < time) {\n            localStorage.removeItem(key);\n            return null;\n        } else {\n            return obj.value;\n        }\n    },\n    \n    // 删除成功返回 true， 否则返回 false\n    removeItem: function(key) { \n        if (this.getItem(key) !== null) {\n            localStorage.removeItem(key);\n\n            return this.getItem(key) === null ? true : false;\n        }\n        return true;\n    },\n    keys: function(key) {\n\n    }\n}\nfunction getYearDays () {\n    return new Date().getFullYear() % 4 === 0 ? 366 : 365;\n}\n\n\nmodule.exports = myLocalStorage;\n\n```","slug":"自己封装myLocalStorage，使其有有效期","published":1,"updated":"2018-07-27T10:34:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwg2l000n66fygajk72gg","content":"<p>项目中遇见 cookie 值存不上，what fuck？什么情况，不知道。用$.cookie 和原生的 cookie 都不行，存上值，就被删了一样。找不见地方。考虑到项目比较大，去找得代价，还不如换种实现方式，于是就想起来用 localStorage 了。然后 localStorage 又不像 $.cookie 那样有过期时间。因此需要自己去封装一下，故而，有了这个一个博客。勿喷！  </p>\n<h2 id=\"调用方式\"><a href=\"#调用方式\" class=\"headerlink\" title=\"调用方式\"></a>调用方式</h2><p><code>setItem()</code>与 $.cookie() 类似，expires 支持传入一个时间对象（object），有效时间的数值（number， 单位：毫秒 或者 天）；<br>当 expires 值类型为 number ，且值小于等于当年的总天数时，表示的为天，否则表示毫秒；<br>光说，不行，看看下面：<br>调用方式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myLocalStorage = <span class=\"built_in\">require</span>(<span class=\"string\">''</span>);</span><br><span class=\"line\">myLocalStorage.setItem(<span class=\"string\">\"test1\"</span>, <span class=\"string\">\"Mobro1\"</span>, &#123;<span class=\"attr\">expires</span>: <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">myLocalStorage.setItem(</span><br><span class=\"line\">    <span class=\"string\">\"test2\"</span>, </span><br><span class=\"line\">    <span class=\"string\">\"Mobro2\"</span>, </span><br><span class=\"line\">    &#123;<span class=\"attr\">expires</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>)&#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">myLocalStorage.setItem(<span class=\"string\">\"test3\"</span>, <span class=\"string\">\"Mobro3\"</span>, &#123;<span class=\"attr\">expires</span>: <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">10</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>test1: 有效期为 1 天。<br>test2: 有效期为 1 天。<br>test3: 有效期为 10 分钟。  </p>\n<p><code>getItem()</code> 与 $.cookie() 也是类似的，取那个 localStorage 值，只需要传入一个 key 键名就好了。若没有找到 当前 key 对应的 localStorage 值，则返回 null 对象。<br><code>removeItem()</code> 删除一个 localStorage 值，删除成功，返回true，否则返回 false  </p>\n<p>继续往下看：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myLocalStorage.getItem(<span class=\"string\">\"test1\"</span>)  <span class=\"comment\">// Mobro1</span></span><br><span class=\"line\">myLocalStorage.removeItem(<span class=\"string\">\"test1\"</span>);  <span class=\"comment\">// 如果成功</span></span><br><span class=\"line\">myLocalStorage.getItem(<span class=\"string\">\"test1\"</span>)  <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure></p>\n<p>代码纯属手敲，逻辑上一定会有什么漏洞的，还望各位大牛不吝赐教。</p>\n<hr>\n<p>只与同好争高下，不与傻瓜论短长。  – 《欢乐颂》电视剧台词。  </p>\n<p>最近看了一部日本的电影，《希望在别处》，感觉还是不错的，给推荐一下。    </p>\n<p>四川老家大雨，火车拿去压桥了；<br>读大学的地方兰州大雨，车子被冲跑了；<br>工作地北京大雨，天天上班穿拖鞋，每天丢一把伞；<br>哈哈哈哈<br>    &gt;oo&lt;</p>\n<hr>\n<h2 id=\"完整源码\"><a href=\"#完整源码\" class=\"headerlink\" title=\"完整源码\"></a>完整源码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myLocalStorage = &#123;</span><br><span class=\"line\">    setItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value, exp</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(),</span><br><span class=\"line\">            expires = exp.expires || <span class=\"literal\">null</span>;</span><br><span class=\"line\">        obj.value = value;</span><br><span class=\"line\">        obj.time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// expires 类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (expires === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> obj.expires;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expires === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">            obj.expires = expires.getTime() - obj.time;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expires === <span class=\"string\">\"number\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((expires | <span class=\"number\">0</span>) !== expires) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"expires must be integer number!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// expires 小于 365、366 则，按天算。否则按时间戳算</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (expires &lt;= getYearDays() &amp;&amp; expires &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                obj.expires = expires * <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expires &gt; getYearDays()) &#123;</span><br><span class=\"line\">                obj.expires = expires;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expires &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.removeItem(key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        localStorage.setItem(key, <span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parse(localStorage.getItem(key));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj === <span class=\"string\">\"null\"</span> || obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> expires = obj.expires, </span><br><span class=\"line\">            now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(), </span><br><span class=\"line\">            time = obj.time;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - time &gt;= expires ||</span><br><span class=\"line\">            now &lt; time) &#123;</span><br><span class=\"line\">            localStorage.removeItem(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 删除成功返回 true， 否则返回 false</span></span><br><span class=\"line\">    removeItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getItem(key) !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            localStorage.removeItem(key);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getItem(key) === <span class=\"literal\">null</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    keys: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getYearDays</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() % <span class=\"number\">4</span> === <span class=\"number\">0</span> ? <span class=\"number\">366</span> : <span class=\"number\">365</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = myLocalStorage;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>项目中遇见 cookie 值存不上，what fuck？什么情况，不知道。用$.cookie 和原生的 cookie 都不行，存上值，就被删了一样。找不见地方。考虑到项目比较大，去找得代价，还不如换种实现方式，于是就想起来用 localStorage 了。然后 localStorage 又不像 $.cookie 那样有过期时间。因此需要自己去封装一下，故而，有了这个一个博客。勿喷！  </p>\n<h2 id=\"调用方式\"><a href=\"#调用方式\" class=\"headerlink\" title=\"调用方式\"></a>调用方式</h2><p><code>setItem()</code>与 $.cookie() 类似，expires 支持传入一个时间对象（object），有效时间的数值（number， 单位：毫秒 或者 天）；<br>当 expires 值类型为 number ，且值小于等于当年的总天数时，表示的为天，否则表示毫秒；<br>光说，不行，看看下面：<br>调用方式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myLocalStorage = <span class=\"built_in\">require</span>(<span class=\"string\">''</span>);</span><br><span class=\"line\">myLocalStorage.setItem(<span class=\"string\">\"test1\"</span>, <span class=\"string\">\"Mobro1\"</span>, &#123;<span class=\"attr\">expires</span>: <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">myLocalStorage.setItem(</span><br><span class=\"line\">    <span class=\"string\">\"test2\"</span>, </span><br><span class=\"line\">    <span class=\"string\">\"Mobro2\"</span>, </span><br><span class=\"line\">    &#123;<span class=\"attr\">expires</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() + <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>)&#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">myLocalStorage.setItem(<span class=\"string\">\"test3\"</span>, <span class=\"string\">\"Mobro3\"</span>, &#123;<span class=\"attr\">expires</span>: <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">10</span>&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>test1: 有效期为 1 天。<br>test2: 有效期为 1 天。<br>test3: 有效期为 10 分钟。  </p>\n<p><code>getItem()</code> 与 $.cookie() 也是类似的，取那个 localStorage 值，只需要传入一个 key 键名就好了。若没有找到 当前 key 对应的 localStorage 值，则返回 null 对象。<br><code>removeItem()</code> 删除一个 localStorage 值，删除成功，返回true，否则返回 false  </p>\n<p>继续往下看：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myLocalStorage.getItem(<span class=\"string\">\"test1\"</span>)  <span class=\"comment\">// Mobro1</span></span><br><span class=\"line\">myLocalStorage.removeItem(<span class=\"string\">\"test1\"</span>);  <span class=\"comment\">// 如果成功</span></span><br><span class=\"line\">myLocalStorage.getItem(<span class=\"string\">\"test1\"</span>)  <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure></p>\n<p>代码纯属手敲，逻辑上一定会有什么漏洞的，还望各位大牛不吝赐教。</p>\n<hr>\n<p>只与同好争高下，不与傻瓜论短长。  – 《欢乐颂》电视剧台词。  </p>\n<p>最近看了一部日本的电影，《希望在别处》，感觉还是不错的，给推荐一下。    </p>\n<p>四川老家大雨，火车拿去压桥了；<br>读大学的地方兰州大雨，车子被冲跑了；<br>工作地北京大雨，天天上班穿拖鞋，每天丢一把伞；<br>哈哈哈哈<br>    &gt;oo&lt;</p>\n<hr>\n<h2 id=\"完整源码\"><a href=\"#完整源码\" class=\"headerlink\" title=\"完整源码\"></a>完整源码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myLocalStorage = &#123;</span><br><span class=\"line\">    setItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value, exp</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(),</span><br><span class=\"line\">            expires = exp.expires || <span class=\"literal\">null</span>;</span><br><span class=\"line\">        obj.value = value;</span><br><span class=\"line\">        obj.time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// expires 类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (expires === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> obj.expires;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expires === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">            obj.expires = expires.getTime() - obj.time;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expires === <span class=\"string\">\"number\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((expires | <span class=\"number\">0</span>) !== expires) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"expires must be integer number!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// expires 小于 365、366 则，按天算。否则按时间戳算</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (expires &lt;= getYearDays() &amp;&amp; expires &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                obj.expires = expires * <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expires &gt; getYearDays()) &#123;</span><br><span class=\"line\">                obj.expires = expires;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expires &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.removeItem(key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        localStorage.setItem(key, <span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parse(localStorage.getItem(key));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj === <span class=\"string\">\"null\"</span> || obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> expires = obj.expires, </span><br><span class=\"line\">            now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(), </span><br><span class=\"line\">            time = obj.time;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - time &gt;= expires ||</span><br><span class=\"line\">            now &lt; time) &#123;</span><br><span class=\"line\">            localStorage.removeItem(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 删除成功返回 true， 否则返回 false</span></span><br><span class=\"line\">    removeItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getItem(key) !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            localStorage.removeItem(key);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getItem(key) === <span class=\"literal\">null</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    keys: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getYearDays</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() % <span class=\"number\">4</span> === <span class=\"number\">0</span> ? <span class=\"number\">366</span> : <span class=\"number\">365</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = myLocalStorage;</span><br></pre></td></tr></table></figure>"},{"title":"论Object.keys(), Object.getOwnPropertyNames(), for in, Object.getOwnPropertySymbol()区别","date":"2018-06-12T07:37:26.000Z","_content":"前不久，一朋友求助，让我给解释一波Object.keys(), Object.getOwnPropertyNames(), for in的区别，面试中好几次呗问了。所以，抽了点时间看了看，大概把我看的过程中做的demo记录一下。  \n看了网上一些关于介绍Object.keys(), Object.getOwnPropertyNames(), for in, Object.getOwnPropertySymbol()的区别，都介绍得不是很详细，不容易理解，今天抽空来说说这三者的区别。  \n废话不多说，直接上代码。\n\ndefineProperty() =>  给对象添加单个属性及属性值的，并规定该属性是否可枚举，默认是不可枚举的；所以正常情况下，我们给对象添加单个属性时，只需要用.操作即可。亦，`obj.e = 2`。这种方式添加的属性默认是可枚举的。\n我们通过设置 `enumerable` 的值来设置属性是否可枚举。\n来，下面demo运行起来。\n```js\nvar obj = { a: \"1\", b: \"2\"};\nObject.prototype.protoName = \"proto foobar\";\nvar foo = Symbol(\"foo\");\n// 给obj 添加了一个键名为 c, foo 变量值\nObject.defineProperty(obj, \"c\", {\n    value: \"3\", \n    enumerable: false  // 定义是否可枚举，默认 false\n})\nObject.defineProperty(obj, \"d\", {\n    value: \"4\", \n    enumerable: true  // 定义是否可枚举\n})\nObject.defineProperty(obj, foo, {\n    value: \"foobar\",\n    enumerable:false\n});  \n```\n\n打印的结果为：  \n```js\n{a: \"1\", b: \"2\", d: \"4\", c: \"3\", Symbol(foo): \"foobar\"}\n```\nOK，接下来我们，我们输出日志看看...\n```js\nfor (var i in obj) {\n    console.log(\" for in : \", i); // 输出 a b d protoName\n    if (obj.hasOwnProperty(i)) {\n        console.log(\"obj.hasOwnProperty(i): \", i); // a b d\n    }\n}\nconsole.log(\"Object.keys(obj): \", Object.keys(obj));  // [\"a\", \"b\", \"d\"]\nconsole.log(\"Object.getOwnPropertyNames(obj): \", Object.getOwnPropertyNames(obj));  // [\"a\", \"b\", \"c\", \"d\"]\nconsole.log(\"Object.getOwnPropertySymbols(obj): \", Object.getOwnPropertySymbols(obj)); // [Symbol(foo)]\n// JSON.stringify(obj) 只能将自身的属性转化成字符串\nconsole.log(\"JSON.stringify(obj): \", JSON.stringify(obj));  // {\"a\": \"1\", \"b\": \"2\", \"d\": \"4\"}\n```\n就上面demo，简单总结一下：  \n1. _keys() => 输出为一个数组，取到的是 obj 的所有的自身可枚举属性。其功能和for in + hasOwnProperty（）功能是一致的_\n2. _getOwnPropertyNames() =>  输出为一个数组，取到的是 obj 的所有自身属性。（可枚举、不可枚举，但不包括symbol类型的属性）_\n3. _getOwnPropertySymbol() => 输出为一个数组，取到的是 obj 的所有自身的Symbol属性_\n4. _for in => 遍历 obj 的所有属性，包括自身属性和原型上的所有可枚举的属性_\n5. _JSON.stringify() => 只能将自身的可枚举的属性转化成字符串_  \n\n\nOK, 运行完上面demo后发现，问题是不是轻轻松松地解决了喂，然而，并没有。仔细对比一下上面的日志，然后，来，接着往下走。  \nfor in obj => 能遍历obj的所有属性，包括原型上的属性。（包括原型上的可枚举的属性和方法），有点蒙比了？\n如果确实蒙比了，我们接着往下敲代码  \n```js\nObject.defineProperty(obj, \"func1\", {\n    value: function() {console.log(\"func1\")}\n})\nObject.defineProperty(obj, \"func2\", {\n    value: function() {\n        console.log(\"func2\")\n    },\n    enumerable: true\n})\n\n// 来，我们在在原型上添加一个方法\nObject.prototype.func3 = function() {\n    console.log(\"func3\")\n}\n\nfor (var i in obj) {\n    console.log(\" for in : \", i); // 输出 a b d protoName func2 func3\n    if (obj.hasOwnProperty(i)) {\n        console.log(\"obj.hasOwnProperty(i): \", i); // a b d func2\n    }\n}\nconsole.log(\"Object.keys(obj): \", Object.keys(obj));  // [\"a\", \"b\", \"d\", \"func2\"]\nconsole.log(\"Object.getOwnPropertyNames(obj): \", Object.getOwnPropertyNames(obj));  // [\"a\", \"b\", \"c\", \"d\", \"func1\", \"func2\"]\nconsole.log(\"Object.getOwnPropertySymbols(obj): \", Object.getOwnPropertySymbols(obj)); // [Symbol(foo)]\nconsole.log(\"JSON.stringify(obj): \", JSON.stringify(obj));  //  {\"a\":\"1\",\"b\":\"2\",\"d\":\"4\"}\nconsole.log(\"obj:  \", obj); // {a: \"1\", b : \"2\", d : \"4\", func2 : ƒ (), c : \"3\", func1 : ƒ (), Symbol(foo) : \"foobar\"}\n```\n对比上面输出日志，我不难发现：\n1. _defineProperty() 和 prototype 添加的属性默认是不可枚举的。_\n2. _defineProperty() 添加的属性时属于自身属性。_  \n\n哈哈哈，能读到这儿，我想未来的我，可能没有晕吧。  \n管他呢，简单提个醒吧，方便以后自己更快速地懂这些东西；  \n1. _for in 没有 func1， 是因为defineProperty()定义的是自身属性，且默认不可枚举。protoName 是在原型 prototype 上，所以会有。_\n2. _hasOwnProperty() 是只取自身属性，所以 原型上的 protoName， func3 都没有。_\n3. _keys() 所有的自身可枚举属性， 所以 protoName 和 func3 首先排除了。c 和 func2 是不可枚举。_\n4. _getOwnPropertyNames()  所有自身属性。所以原型上的protoName 和 func3 都被排除了。_\n5. _JSON.stringify()  只要自身的，且可枚举的属性。认真看看，转字符串和直接输出的 obj 有多大区别。_\n\n所以，网上关于深度克隆一个对象的方式 ---- `JSON.parse(JSON.stringify(obj))`，严格来说，是不正确的。  \n然而此时，我就有问题要讲啦。  \n实际项目中我们应该怎么选，如何规避上述的问题呢？  \n还待高人指点迷津，  \n抑或，以后自己去发现。  \n\n\n---\n\n今天被同事骗了，说 `撒拉黑` 是 `你好` 的意思。来了一个男同事，我就对他说了：  \n-- 撒拉黑  \n-- 滚犊子  \n啊，留我一人在风中凌乱...  \n\n\n\n\n       >|=|<","source":"_posts/论Object-keys-Object-getOwnPropertyNames-for-in-Object-getOwnPropertySymbol-区别.md","raw":"---\ntitle: >-\n  论Object.keys(), Object.getOwnPropertyNames(), for in,\n  Object.getOwnPropertySymbol()区别\ndate: 2018-06-12 15:37:26\ntags: es6\n---\n前不久，一朋友求助，让我给解释一波Object.keys(), Object.getOwnPropertyNames(), for in的区别，面试中好几次呗问了。所以，抽了点时间看了看，大概把我看的过程中做的demo记录一下。  \n看了网上一些关于介绍Object.keys(), Object.getOwnPropertyNames(), for in, Object.getOwnPropertySymbol()的区别，都介绍得不是很详细，不容易理解，今天抽空来说说这三者的区别。  \n废话不多说，直接上代码。\n\ndefineProperty() =>  给对象添加单个属性及属性值的，并规定该属性是否可枚举，默认是不可枚举的；所以正常情况下，我们给对象添加单个属性时，只需要用.操作即可。亦，`obj.e = 2`。这种方式添加的属性默认是可枚举的。\n我们通过设置 `enumerable` 的值来设置属性是否可枚举。\n来，下面demo运行起来。\n```js\nvar obj = { a: \"1\", b: \"2\"};\nObject.prototype.protoName = \"proto foobar\";\nvar foo = Symbol(\"foo\");\n// 给obj 添加了一个键名为 c, foo 变量值\nObject.defineProperty(obj, \"c\", {\n    value: \"3\", \n    enumerable: false  // 定义是否可枚举，默认 false\n})\nObject.defineProperty(obj, \"d\", {\n    value: \"4\", \n    enumerable: true  // 定义是否可枚举\n})\nObject.defineProperty(obj, foo, {\n    value: \"foobar\",\n    enumerable:false\n});  \n```\n\n打印的结果为：  \n```js\n{a: \"1\", b: \"2\", d: \"4\", c: \"3\", Symbol(foo): \"foobar\"}\n```\nOK，接下来我们，我们输出日志看看...\n```js\nfor (var i in obj) {\n    console.log(\" for in : \", i); // 输出 a b d protoName\n    if (obj.hasOwnProperty(i)) {\n        console.log(\"obj.hasOwnProperty(i): \", i); // a b d\n    }\n}\nconsole.log(\"Object.keys(obj): \", Object.keys(obj));  // [\"a\", \"b\", \"d\"]\nconsole.log(\"Object.getOwnPropertyNames(obj): \", Object.getOwnPropertyNames(obj));  // [\"a\", \"b\", \"c\", \"d\"]\nconsole.log(\"Object.getOwnPropertySymbols(obj): \", Object.getOwnPropertySymbols(obj)); // [Symbol(foo)]\n// JSON.stringify(obj) 只能将自身的属性转化成字符串\nconsole.log(\"JSON.stringify(obj): \", JSON.stringify(obj));  // {\"a\": \"1\", \"b\": \"2\", \"d\": \"4\"}\n```\n就上面demo，简单总结一下：  \n1. _keys() => 输出为一个数组，取到的是 obj 的所有的自身可枚举属性。其功能和for in + hasOwnProperty（）功能是一致的_\n2. _getOwnPropertyNames() =>  输出为一个数组，取到的是 obj 的所有自身属性。（可枚举、不可枚举，但不包括symbol类型的属性）_\n3. _getOwnPropertySymbol() => 输出为一个数组，取到的是 obj 的所有自身的Symbol属性_\n4. _for in => 遍历 obj 的所有属性，包括自身属性和原型上的所有可枚举的属性_\n5. _JSON.stringify() => 只能将自身的可枚举的属性转化成字符串_  \n\n\nOK, 运行完上面demo后发现，问题是不是轻轻松松地解决了喂，然而，并没有。仔细对比一下上面的日志，然后，来，接着往下走。  \nfor in obj => 能遍历obj的所有属性，包括原型上的属性。（包括原型上的可枚举的属性和方法），有点蒙比了？\n如果确实蒙比了，我们接着往下敲代码  \n```js\nObject.defineProperty(obj, \"func1\", {\n    value: function() {console.log(\"func1\")}\n})\nObject.defineProperty(obj, \"func2\", {\n    value: function() {\n        console.log(\"func2\")\n    },\n    enumerable: true\n})\n\n// 来，我们在在原型上添加一个方法\nObject.prototype.func3 = function() {\n    console.log(\"func3\")\n}\n\nfor (var i in obj) {\n    console.log(\" for in : \", i); // 输出 a b d protoName func2 func3\n    if (obj.hasOwnProperty(i)) {\n        console.log(\"obj.hasOwnProperty(i): \", i); // a b d func2\n    }\n}\nconsole.log(\"Object.keys(obj): \", Object.keys(obj));  // [\"a\", \"b\", \"d\", \"func2\"]\nconsole.log(\"Object.getOwnPropertyNames(obj): \", Object.getOwnPropertyNames(obj));  // [\"a\", \"b\", \"c\", \"d\", \"func1\", \"func2\"]\nconsole.log(\"Object.getOwnPropertySymbols(obj): \", Object.getOwnPropertySymbols(obj)); // [Symbol(foo)]\nconsole.log(\"JSON.stringify(obj): \", JSON.stringify(obj));  //  {\"a\":\"1\",\"b\":\"2\",\"d\":\"4\"}\nconsole.log(\"obj:  \", obj); // {a: \"1\", b : \"2\", d : \"4\", func2 : ƒ (), c : \"3\", func1 : ƒ (), Symbol(foo) : \"foobar\"}\n```\n对比上面输出日志，我不难发现：\n1. _defineProperty() 和 prototype 添加的属性默认是不可枚举的。_\n2. _defineProperty() 添加的属性时属于自身属性。_  \n\n哈哈哈，能读到这儿，我想未来的我，可能没有晕吧。  \n管他呢，简单提个醒吧，方便以后自己更快速地懂这些东西；  \n1. _for in 没有 func1， 是因为defineProperty()定义的是自身属性，且默认不可枚举。protoName 是在原型 prototype 上，所以会有。_\n2. _hasOwnProperty() 是只取自身属性，所以 原型上的 protoName， func3 都没有。_\n3. _keys() 所有的自身可枚举属性， 所以 protoName 和 func3 首先排除了。c 和 func2 是不可枚举。_\n4. _getOwnPropertyNames()  所有自身属性。所以原型上的protoName 和 func3 都被排除了。_\n5. _JSON.stringify()  只要自身的，且可枚举的属性。认真看看，转字符串和直接输出的 obj 有多大区别。_\n\n所以，网上关于深度克隆一个对象的方式 ---- `JSON.parse(JSON.stringify(obj))`，严格来说，是不正确的。  \n然而此时，我就有问题要讲啦。  \n实际项目中我们应该怎么选，如何规避上述的问题呢？  \n还待高人指点迷津，  \n抑或，以后自己去发现。  \n\n\n---\n\n今天被同事骗了，说 `撒拉黑` 是 `你好` 的意思。来了一个男同事，我就对他说了：  \n-- 撒拉黑  \n-- 滚犊子  \n啊，留我一人在风中凌乱...  \n\n\n\n\n       >|=|<","slug":"论Object-keys-Object-getOwnPropertyNames-for-in-Object-getOwnPropertySymbol-区别","published":1,"updated":"2018-07-27T10:34:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwg34000o66fyqdcer6dt","content":"<p>前不久，一朋友求助，让我给解释一波Object.keys(), Object.getOwnPropertyNames(), for in的区别，面试中好几次呗问了。所以，抽了点时间看了看，大概把我看的过程中做的demo记录一下。<br>看了网上一些关于介绍Object.keys(), Object.getOwnPropertyNames(), for in, Object.getOwnPropertySymbol()的区别，都介绍得不是很详细，不容易理解，今天抽空来说说这三者的区别。<br>废话不多说，直接上代码。</p>\n<p>defineProperty() =&gt;  给对象添加单个属性及属性值的，并规定该属性是否可枚举，默认是不可枚举的；所以正常情况下，我们给对象添加单个属性时，只需要用.操作即可。亦，<code>obj.e = 2</code>。这种方式添加的属性默认是可枚举的。<br>我们通过设置 <code>enumerable</code> 的值来设置属性是否可枚举。<br>来，下面demo运行起来。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"string\">\"1\"</span>, <span class=\"attr\">b</span>: <span class=\"string\">\"2\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.protoName = <span class=\"string\">\"proto foobar\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 给obj 添加了一个键名为 c, foo 变量值</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"c\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"3\"</span>, </span><br><span class=\"line\">    enumerable: <span class=\"literal\">false</span>  <span class=\"comment\">// 定义是否可枚举，默认 false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"d\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"4\"</span>, </span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>  <span class=\"comment\">// 定义是否可枚举</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, foo, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"foobar\"</span>,</span><br><span class=\"line\">    enumerable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>打印的结果为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">a</span>: <span class=\"string\">\"1\"</span>, <span class=\"attr\">b</span>: <span class=\"string\">\"2\"</span>, <span class=\"attr\">d</span>: <span class=\"string\">\"4\"</span>, <span class=\"attr\">c</span>: <span class=\"string\">\"3\"</span>, <span class=\"built_in\">Symbol</span>(foo): <span class=\"string\">\"foobar\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>OK，接下来我们，我们输出日志看看…<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\" for in : \"</span>, i); <span class=\"comment\">// 输出 a b d protoName</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"obj.hasOwnProperty(i): \"</span>, i); <span class=\"comment\">// a b d</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.keys(obj): \"</span>, <span class=\"built_in\">Object</span>.keys(obj));  <span class=\"comment\">// [\"a\", \"b\", \"d\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.getOwnPropertyNames(obj): \"</span>, <span class=\"built_in\">Object</span>.getOwnPropertyNames(obj));  <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.getOwnPropertySymbols(obj): \"</span>, <span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj)); <span class=\"comment\">// [Symbol(foo)]</span></span><br><span class=\"line\"><span class=\"comment\">// JSON.stringify(obj) 只能将自身的属性转化成字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"JSON.stringify(obj): \"</span>, <span class=\"built_in\">JSON</span>.stringify(obj));  <span class=\"comment\">// &#123;\"a\": \"1\", \"b\": \"2\", \"d\": \"4\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>就上面demo，简单总结一下：  </p>\n<ol>\n<li><em>keys() =&gt; 输出为一个数组，取到的是 obj 的所有的自身可枚举属性。其功能和for in + hasOwnProperty（）功能是一致的</em></li>\n<li><em>getOwnPropertyNames() =&gt;  输出为一个数组，取到的是 obj 的所有自身属性。（可枚举、不可枚举，但不包括symbol类型的属性）</em></li>\n<li><em>getOwnPropertySymbol() =&gt; 输出为一个数组，取到的是 obj 的所有自身的Symbol属性</em></li>\n<li><em>for in =&gt; 遍历 obj 的所有属性，包括自身属性和原型上的所有可枚举的属性</em></li>\n<li><em>JSON.stringify() =&gt; 只能将自身的可枚举的属性转化成字符串</em>  </li>\n</ol>\n<p>OK, 运行完上面demo后发现，问题是不是轻轻松松地解决了喂，然而，并没有。仔细对比一下上面的日志，然后，来，接着往下走。<br>for in obj =&gt; 能遍历obj的所有属性，包括原型上的属性。（包括原型上的可枚举的属性和方法），有点蒙比了？<br>如果确实蒙比了，我们接着往下敲代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"func1\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"func1\"</span>)&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"func2\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"func2\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 来，我们在在原型上添加一个方法</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.func3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"func3\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\" for in : \"</span>, i); <span class=\"comment\">// 输出 a b d protoName func2 func3</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"obj.hasOwnProperty(i): \"</span>, i); <span class=\"comment\">// a b d func2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.keys(obj): \"</span>, <span class=\"built_in\">Object</span>.keys(obj));  <span class=\"comment\">// [\"a\", \"b\", \"d\", \"func2\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.getOwnPropertyNames(obj): \"</span>, <span class=\"built_in\">Object</span>.getOwnPropertyNames(obj));  <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\", \"func1\", \"func2\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.getOwnPropertySymbols(obj): \"</span>, <span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj)); <span class=\"comment\">// [Symbol(foo)]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"JSON.stringify(obj): \"</span>, <span class=\"built_in\">JSON</span>.stringify(obj));  <span class=\"comment\">//  &#123;\"a\":\"1\",\"b\":\"2\",\"d\":\"4\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"obj:  \"</span>, obj); <span class=\"comment\">// &#123;a: \"1\", b : \"2\", d : \"4\", func2 : ƒ (), c : \"3\", func1 : ƒ (), Symbol(foo) : \"foobar\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>对比上面输出日志，我不难发现：</p>\n<ol>\n<li><em>defineProperty() 和 prototype 添加的属性默认是不可枚举的。</em></li>\n<li><em>defineProperty() 添加的属性时属于自身属性。</em>  </li>\n</ol>\n<p>哈哈哈，能读到这儿，我想未来的我，可能没有晕吧。<br>管他呢，简单提个醒吧，方便以后自己更快速地懂这些东西；  </p>\n<ol>\n<li><em>for in 没有 func1， 是因为defineProperty()定义的是自身属性，且默认不可枚举。protoName 是在原型 prototype 上，所以会有。</em></li>\n<li><em>hasOwnProperty() 是只取自身属性，所以 原型上的 protoName， func3 都没有。</em></li>\n<li><em>keys() 所有的自身可枚举属性， 所以 protoName 和 func3 首先排除了。c 和 func2 是不可枚举。</em></li>\n<li><em>getOwnPropertyNames()  所有自身属性。所以原型上的protoName 和 func3 都被排除了。</em></li>\n<li><em>JSON.stringify()  只要自身的，且可枚举的属性。认真看看，转字符串和直接输出的 obj 有多大区别。</em></li>\n</ol>\n<p>所以，网上关于深度克隆一个对象的方式 —- <code>JSON.parse(JSON.stringify(obj))</code>，严格来说，是不正确的。<br>然而此时，我就有问题要讲啦。<br>实际项目中我们应该怎么选，如何规避上述的问题呢？<br>还待高人指点迷津，<br>抑或，以后自己去发现。  </p>\n<hr>\n<p>今天被同事骗了，说 <code>撒拉黑</code> 是 <code>你好</code> 的意思。来了一个男同事，我就对他说了：<br>– 撒拉黑<br>– 滚犊子<br>啊，留我一人在风中凌乱…  </p>\n<pre><code>&gt;|=|&lt;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>前不久，一朋友求助，让我给解释一波Object.keys(), Object.getOwnPropertyNames(), for in的区别，面试中好几次呗问了。所以，抽了点时间看了看，大概把我看的过程中做的demo记录一下。<br>看了网上一些关于介绍Object.keys(), Object.getOwnPropertyNames(), for in, Object.getOwnPropertySymbol()的区别，都介绍得不是很详细，不容易理解，今天抽空来说说这三者的区别。<br>废话不多说，直接上代码。</p>\n<p>defineProperty() =&gt;  给对象添加单个属性及属性值的，并规定该属性是否可枚举，默认是不可枚举的；所以正常情况下，我们给对象添加单个属性时，只需要用.操作即可。亦，<code>obj.e = 2</code>。这种方式添加的属性默认是可枚举的。<br>我们通过设置 <code>enumerable</code> 的值来设置属性是否可枚举。<br>来，下面demo运行起来。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"string\">\"1\"</span>, <span class=\"attr\">b</span>: <span class=\"string\">\"2\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.protoName = <span class=\"string\">\"proto foobar\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 给obj 添加了一个键名为 c, foo 变量值</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"c\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"3\"</span>, </span><br><span class=\"line\">    enumerable: <span class=\"literal\">false</span>  <span class=\"comment\">// 定义是否可枚举，默认 false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"d\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"4\"</span>, </span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>  <span class=\"comment\">// 定义是否可枚举</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, foo, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"foobar\"</span>,</span><br><span class=\"line\">    enumerable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>打印的结果为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">a</span>: <span class=\"string\">\"1\"</span>, <span class=\"attr\">b</span>: <span class=\"string\">\"2\"</span>, <span class=\"attr\">d</span>: <span class=\"string\">\"4\"</span>, <span class=\"attr\">c</span>: <span class=\"string\">\"3\"</span>, <span class=\"built_in\">Symbol</span>(foo): <span class=\"string\">\"foobar\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>OK，接下来我们，我们输出日志看看…<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\" for in : \"</span>, i); <span class=\"comment\">// 输出 a b d protoName</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"obj.hasOwnProperty(i): \"</span>, i); <span class=\"comment\">// a b d</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.keys(obj): \"</span>, <span class=\"built_in\">Object</span>.keys(obj));  <span class=\"comment\">// [\"a\", \"b\", \"d\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.getOwnPropertyNames(obj): \"</span>, <span class=\"built_in\">Object</span>.getOwnPropertyNames(obj));  <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.getOwnPropertySymbols(obj): \"</span>, <span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj)); <span class=\"comment\">// [Symbol(foo)]</span></span><br><span class=\"line\"><span class=\"comment\">// JSON.stringify(obj) 只能将自身的属性转化成字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"JSON.stringify(obj): \"</span>, <span class=\"built_in\">JSON</span>.stringify(obj));  <span class=\"comment\">// &#123;\"a\": \"1\", \"b\": \"2\", \"d\": \"4\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>就上面demo，简单总结一下：  </p>\n<ol>\n<li><em>keys() =&gt; 输出为一个数组，取到的是 obj 的所有的自身可枚举属性。其功能和for in + hasOwnProperty（）功能是一致的</em></li>\n<li><em>getOwnPropertyNames() =&gt;  输出为一个数组，取到的是 obj 的所有自身属性。（可枚举、不可枚举，但不包括symbol类型的属性）</em></li>\n<li><em>getOwnPropertySymbol() =&gt; 输出为一个数组，取到的是 obj 的所有自身的Symbol属性</em></li>\n<li><em>for in =&gt; 遍历 obj 的所有属性，包括自身属性和原型上的所有可枚举的属性</em></li>\n<li><em>JSON.stringify() =&gt; 只能将自身的可枚举的属性转化成字符串</em>  </li>\n</ol>\n<p>OK, 运行完上面demo后发现，问题是不是轻轻松松地解决了喂，然而，并没有。仔细对比一下上面的日志，然后，来，接着往下走。<br>for in obj =&gt; 能遍历obj的所有属性，包括原型上的属性。（包括原型上的可枚举的属性和方法），有点蒙比了？<br>如果确实蒙比了，我们接着往下敲代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"func1\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">\"func1\"</span>)&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"func2\"</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"func2\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 来，我们在在原型上添加一个方法</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.func3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"func3\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\" for in : \"</span>, i); <span class=\"comment\">// 输出 a b d protoName func2 func3</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"obj.hasOwnProperty(i): \"</span>, i); <span class=\"comment\">// a b d func2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.keys(obj): \"</span>, <span class=\"built_in\">Object</span>.keys(obj));  <span class=\"comment\">// [\"a\", \"b\", \"d\", \"func2\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.getOwnPropertyNames(obj): \"</span>, <span class=\"built_in\">Object</span>.getOwnPropertyNames(obj));  <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\", \"func1\", \"func2\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Object.getOwnPropertySymbols(obj): \"</span>, <span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj)); <span class=\"comment\">// [Symbol(foo)]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"JSON.stringify(obj): \"</span>, <span class=\"built_in\">JSON</span>.stringify(obj));  <span class=\"comment\">//  &#123;\"a\":\"1\",\"b\":\"2\",\"d\":\"4\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"obj:  \"</span>, obj); <span class=\"comment\">// &#123;a: \"1\", b : \"2\", d : \"4\", func2 : ƒ (), c : \"3\", func1 : ƒ (), Symbol(foo) : \"foobar\"&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>对比上面输出日志，我不难发现：</p>\n<ol>\n<li><em>defineProperty() 和 prototype 添加的属性默认是不可枚举的。</em></li>\n<li><em>defineProperty() 添加的属性时属于自身属性。</em>  </li>\n</ol>\n<p>哈哈哈，能读到这儿，我想未来的我，可能没有晕吧。<br>管他呢，简单提个醒吧，方便以后自己更快速地懂这些东西；  </p>\n<ol>\n<li><em>for in 没有 func1， 是因为defineProperty()定义的是自身属性，且默认不可枚举。protoName 是在原型 prototype 上，所以会有。</em></li>\n<li><em>hasOwnProperty() 是只取自身属性，所以 原型上的 protoName， func3 都没有。</em></li>\n<li><em>keys() 所有的自身可枚举属性， 所以 protoName 和 func3 首先排除了。c 和 func2 是不可枚举。</em></li>\n<li><em>getOwnPropertyNames()  所有自身属性。所以原型上的protoName 和 func3 都被排除了。</em></li>\n<li><em>JSON.stringify()  只要自身的，且可枚举的属性。认真看看，转字符串和直接输出的 obj 有多大区别。</em></li>\n</ol>\n<p>所以，网上关于深度克隆一个对象的方式 —- <code>JSON.parse(JSON.stringify(obj))</code>，严格来说，是不正确的。<br>然而此时，我就有问题要讲啦。<br>实际项目中我们应该怎么选，如何规避上述的问题呢？<br>还待高人指点迷津，<br>抑或，以后自己去发现。  </p>\n<hr>\n<p>今天被同事骗了，说 <code>撒拉黑</code> 是 <code>你好</code> 的意思。来了一个男同事，我就对他说了：<br>– 撒拉黑<br>– 滚犊子<br>啊，留我一人在风中凌乱…  </p>\n<pre><code>&gt;|=|&lt;\n</code></pre>"},{"title":"阿里云搭建大概步骤","date":"2018-06-01T08:55:55.000Z","description":"搭建阿里云的大概步骤，方便自己以后翻阅","_content":"\n本文参考了楚狂人的博客 [用苹果电脑mac系统配置阿里云服务器ecs的教程攻略](http://www.chukuangren.com/mac-aliyun-ecs.html), 同时感谢基友 [梧桐](www.baidu.com) 的大力支持，让我少走了不少坑。\n\n## 购买服务器\n\n访问[https://ecs-buy.aliyun.com/wizard/#/prepay/cn-shenzhen](https://ecs-buy.aliyun.com/wizard/#/prepay/cn-shenzhen)，按照自己需求去配置。本次是在阿里云官网首页的[最新活动]中免费领取的云主机，有效期是注册阿里云后6个月内可领取。\n\n一路回车过来，因为是第一次，所以不知道怎么配置。 （这一块待我免费的用完了再来看）\n\n## 购买域名\n\n国内域名购买有很多地方：\n[阿里云](https://wanwang.aliyun.com/?utm_content=se_1000000527)\n[西部数码](https://www.west.cn/active/one/?link=bj_ym&westkey=%u57DF%u540D%u8D2D%u4E70)\n[腾讯云](https://dnspod.cloud.tencent.com/act/yearendsales?from=sem&fromSource=gwzcw.604268.604268.604268)\n[百度云](https://cloud.baidu.com/product/bcd.html?track=cp:nsem|pf:pc|pp:bcd|pu:buy|ci:|kw:40345)\n[GoDaddy](https://sg.godaddy.com/zh/offers/domains/godaddy-nb?isc=gennbacn16&countryview=1&currencytype=CNY&utm_source=baidu&utm_medium=cpc&utm_campaign=zh-cn_dom_sem_base_nb_gd&utm_content=chi_domain_nonbrand_exact&utm_term=%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0&mkwid=109TEkjPM_pcrid_18782177370_pdv_c_) 这一个比较便宜，地区写的是新加坡，但是不影响正常使用的。口碑不是特别好，根据实际情况来吧。\n有很多，就不一一去列举了。自行上网查找，一大片一大片的。  \n\n`.com/.cn` 是必须要备案才能使用的。其他的我也不是很清楚，我注册了一个 `.site` ，不需要备案。\n\n## 登录服务器\n``` ssh\n# 登录到服务器\nsudo ssh root@myIP\n# 设置免密登录\nbrew install ssh-copy-id\n# -i: 指定公钥文件\nssh-copy-id -i ~/.ssh/id_rsa.pub root@120.79.208.103 \n```\n\n## 简单配置\n__修改默认端口__  \n``` ssh\nvim /etc/ssh/sshd_config\n\n# 修改成别的。我修改成了3000\nPort 22  \n\n# 默认可以密码登录，no： 密码不可登录。\n## 等我回去把家里的电脑也连接上了再说。哈哈哈\nPasswordAuthentication yes \n```\n\n然后重启生效  `service ssh restart` / `systemctl restart sshd`(centos 7)\n\n## 安装必要工具\n\n`yum install -y ufw nginx`  \n\n*额外闲谈*  \nyum命令是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更细与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。  更多关于linux命令参考[linux命令大全](http://man.linuxde.net/yum).\n\n## 配置防火墙\n``` ssh\n# 开启防火墙\n ufw enable \n# 禁止所有端口访问  \n ufw default deny # 默认值： incoming\n# 允许80端口tcp协议链接\n ufw allow 80/tcp\n# 443 https\n ufw allow 443/tcp\n ufw allow 修改的sshd_config的Port的端口号/tcp\n# 查看防火墙状态\n ufw status\n# 重启防火墙\n ufw reload\n```\n\n## nginx 配置\n__*centos 下新建文件用*__ `touch 文件名`\n1. `cd /etc/nginx/conf.d`，创建一个 conf 文件，内容如下：\n![](/images/aliyun/WX20180601-105924.png)\n2. /etc/init.d/nginx restart 重启nginx\n3. 在/usr/local/src/ 创建一个 index.html\n4. 输入域名登录，如果成功则显示 index.html 里面的内容。\n\n可以在/etc/nginx/conf.d目录下，多写几个不同的配置，分开管理二级域名，是什么意思？ 接下来要干的事情。\n\n\n\n\n\n\n\n\n","source":"_posts/阿里云搭建大概步骤.md","raw":"---\ntitle: 阿里云搭建大概步骤\ndate: 2018-06-01 16:55:55\ntags: [阿里云]\ndescription: 搭建阿里云的大概步骤，方便自己以后翻阅\n---\n\n本文参考了楚狂人的博客 [用苹果电脑mac系统配置阿里云服务器ecs的教程攻略](http://www.chukuangren.com/mac-aliyun-ecs.html), 同时感谢基友 [梧桐](www.baidu.com) 的大力支持，让我少走了不少坑。\n\n## 购买服务器\n\n访问[https://ecs-buy.aliyun.com/wizard/#/prepay/cn-shenzhen](https://ecs-buy.aliyun.com/wizard/#/prepay/cn-shenzhen)，按照自己需求去配置。本次是在阿里云官网首页的[最新活动]中免费领取的云主机，有效期是注册阿里云后6个月内可领取。\n\n一路回车过来，因为是第一次，所以不知道怎么配置。 （这一块待我免费的用完了再来看）\n\n## 购买域名\n\n国内域名购买有很多地方：\n[阿里云](https://wanwang.aliyun.com/?utm_content=se_1000000527)\n[西部数码](https://www.west.cn/active/one/?link=bj_ym&westkey=%u57DF%u540D%u8D2D%u4E70)\n[腾讯云](https://dnspod.cloud.tencent.com/act/yearendsales?from=sem&fromSource=gwzcw.604268.604268.604268)\n[百度云](https://cloud.baidu.com/product/bcd.html?track=cp:nsem|pf:pc|pp:bcd|pu:buy|ci:|kw:40345)\n[GoDaddy](https://sg.godaddy.com/zh/offers/domains/godaddy-nb?isc=gennbacn16&countryview=1&currencytype=CNY&utm_source=baidu&utm_medium=cpc&utm_campaign=zh-cn_dom_sem_base_nb_gd&utm_content=chi_domain_nonbrand_exact&utm_term=%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0&mkwid=109TEkjPM_pcrid_18782177370_pdv_c_) 这一个比较便宜，地区写的是新加坡，但是不影响正常使用的。口碑不是特别好，根据实际情况来吧。\n有很多，就不一一去列举了。自行上网查找，一大片一大片的。  \n\n`.com/.cn` 是必须要备案才能使用的。其他的我也不是很清楚，我注册了一个 `.site` ，不需要备案。\n\n## 登录服务器\n``` ssh\n# 登录到服务器\nsudo ssh root@myIP\n# 设置免密登录\nbrew install ssh-copy-id\n# -i: 指定公钥文件\nssh-copy-id -i ~/.ssh/id_rsa.pub root@120.79.208.103 \n```\n\n## 简单配置\n__修改默认端口__  \n``` ssh\nvim /etc/ssh/sshd_config\n\n# 修改成别的。我修改成了3000\nPort 22  \n\n# 默认可以密码登录，no： 密码不可登录。\n## 等我回去把家里的电脑也连接上了再说。哈哈哈\nPasswordAuthentication yes \n```\n\n然后重启生效  `service ssh restart` / `systemctl restart sshd`(centos 7)\n\n## 安装必要工具\n\n`yum install -y ufw nginx`  \n\n*额外闲谈*  \nyum命令是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更细与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。  更多关于linux命令参考[linux命令大全](http://man.linuxde.net/yum).\n\n## 配置防火墙\n``` ssh\n# 开启防火墙\n ufw enable \n# 禁止所有端口访问  \n ufw default deny # 默认值： incoming\n# 允许80端口tcp协议链接\n ufw allow 80/tcp\n# 443 https\n ufw allow 443/tcp\n ufw allow 修改的sshd_config的Port的端口号/tcp\n# 查看防火墙状态\n ufw status\n# 重启防火墙\n ufw reload\n```\n\n## nginx 配置\n__*centos 下新建文件用*__ `touch 文件名`\n1. `cd /etc/nginx/conf.d`，创建一个 conf 文件，内容如下：\n![](/images/aliyun/WX20180601-105924.png)\n2. /etc/init.d/nginx restart 重启nginx\n3. 在/usr/local/src/ 创建一个 index.html\n4. 输入域名登录，如果成功则显示 index.html 里面的内容。\n\n可以在/etc/nginx/conf.d目录下，多写几个不同的配置，分开管理二级域名，是什么意思？ 接下来要干的事情。\n\n\n\n\n\n\n\n\n","slug":"阿里云搭建大概步骤","published":1,"updated":"2018-07-27T10:34:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwg36000r66fyxzzj2mir","content":"<p>本文参考了楚狂人的博客 <a href=\"http://www.chukuangren.com/mac-aliyun-ecs.html\" target=\"_blank\" rel=\"noopener\">用苹果电脑mac系统配置阿里云服务器ecs的教程攻略</a>, 同时感谢基友 <a href=\"www.baidu.com\">梧桐</a> 的大力支持，让我少走了不少坑。</p>\n<h2 id=\"购买服务器\"><a href=\"#购买服务器\" class=\"headerlink\" title=\"购买服务器\"></a>购买服务器</h2><p>访问<a href=\"https://ecs-buy.aliyun.com/wizard/#/prepay/cn-shenzhen\" target=\"_blank\" rel=\"noopener\">https://ecs-buy.aliyun.com/wizard/#/prepay/cn-shenzhen</a>，按照自己需求去配置。本次是在阿里云官网首页的[最新活动]中免费领取的云主机，有效期是注册阿里云后6个月内可领取。</p>\n<p>一路回车过来，因为是第一次，所以不知道怎么配置。 （这一块待我免费的用完了再来看）</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>国内域名购买有很多地方：<br><a href=\"https://wanwang.aliyun.com/?utm_content=se_1000000527\" target=\"_blank\" rel=\"noopener\">阿里云</a><br><a href=\"https://www.west.cn/active/one/?link=bj_ym&amp;westkey=%u57DF%u540D%u8D2D%u4E70\" target=\"_blank\" rel=\"noopener\">西部数码</a><br><a href=\"https://dnspod.cloud.tencent.com/act/yearendsales?from=sem&amp;fromSource=gwzcw.604268.604268.604268\" target=\"_blank\" rel=\"noopener\">腾讯云</a><br><a href=\"https://cloud.baidu.com/product/bcd.html?track=cp:nsem|pf:pc|pp:bcd|pu:buy|ci:|kw:40345\" target=\"_blank\" rel=\"noopener\">百度云</a><br><a href=\"https://sg.godaddy.com/zh/offers/domains/godaddy-nb?isc=gennbacn16&amp;countryview=1&amp;currencytype=CNY&amp;utm_source=baidu&amp;utm_medium=cpc&amp;utm_campaign=zh-cn_dom_sem_base_nb_gd&amp;utm_content=chi_domain_nonbrand_exact&amp;utm_term=%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0&amp;mkwid=109TEkjPM_pcrid_18782177370_pdv_c_\" target=\"_blank\" rel=\"noopener\">GoDaddy</a> 这一个比较便宜，地区写的是新加坡，但是不影响正常使用的。口碑不是特别好，根据实际情况来吧。<br>有很多，就不一一去列举了。自行上网查找，一大片一大片的。  </p>\n<p><code>.com/.cn</code> 是必须要备案才能使用的。其他的我也不是很清楚，我注册了一个 <code>.site</code> ，不需要备案。</p>\n<h2 id=\"登录服务器\"><a href=\"#登录服务器\" class=\"headerlink\" title=\"登录服务器\"></a>登录服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 登录到服务器</span><br><span class=\"line\">sudo ssh root@myIP</span><br><span class=\"line\"># 设置免密登录</span><br><span class=\"line\">brew install ssh-copy-id</span><br><span class=\"line\"># -i: 指定公钥文件</span><br><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@120.79.208.103</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单配置\"><a href=\"#简单配置\" class=\"headerlink\" title=\"简单配置\"></a>简单配置</h2><p><strong>修改默认端口</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改成别的。我修改成了3000</span><br><span class=\"line\">Port 22  </span><br><span class=\"line\"></span><br><span class=\"line\"># 默认可以密码登录，no： 密码不可登录。</span><br><span class=\"line\">## 等我回去把家里的电脑也连接上了再说。哈哈哈</span><br><span class=\"line\">PasswordAuthentication yes</span><br></pre></td></tr></table></figure></p>\n<p>然后重启生效  <code>service ssh restart</code> / <code>systemctl restart sshd</code>(centos 7)</p>\n<h2 id=\"安装必要工具\"><a href=\"#安装必要工具\" class=\"headerlink\" title=\"安装必要工具\"></a>安装必要工具</h2><p><code>yum install -y ufw nginx</code>  </p>\n<p><em>额外闲谈</em><br>yum命令是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更细与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。  更多关于linux命令参考<a href=\"http://man.linuxde.net/yum\" target=\"_blank\" rel=\"noopener\">linux命令大全</a>.</p>\n<h2 id=\"配置防火墙\"><a href=\"#配置防火墙\" class=\"headerlink\" title=\"配置防火墙\"></a>配置防火墙</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启防火墙</span><br><span class=\"line\"> ufw enable </span><br><span class=\"line\"># 禁止所有端口访问  </span><br><span class=\"line\"> ufw default deny # 默认值： incoming</span><br><span class=\"line\"># 允许80端口tcp协议链接</span><br><span class=\"line\"> ufw allow 80/tcp</span><br><span class=\"line\"># 443 https</span><br><span class=\"line\"> ufw allow 443/tcp</span><br><span class=\"line\"> ufw allow 修改的sshd_config的Port的端口号/tcp</span><br><span class=\"line\"># 查看防火墙状态</span><br><span class=\"line\"> ufw status</span><br><span class=\"line\"># 重启防火墙</span><br><span class=\"line\"> ufw reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h2><p><strong><em>centos 下新建文件用</em></strong> <code>touch 文件名</code></p>\n<ol>\n<li><code>cd /etc/nginx/conf.d</code>，创建一个 conf 文件，内容如下：<br><img src=\"/images/aliyun/WX20180601-105924.png\" alt=\"\"></li>\n<li>/etc/init.d/nginx restart 重启nginx</li>\n<li>在/usr/local/src/ 创建一个 index.html</li>\n<li>输入域名登录，如果成功则显示 index.html 里面的内容。</li>\n</ol>\n<p>可以在/etc/nginx/conf.d目录下，多写几个不同的配置，分开管理二级域名，是什么意思？ 接下来要干的事情。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文参考了楚狂人的博客 <a href=\"http://www.chukuangren.com/mac-aliyun-ecs.html\" target=\"_blank\" rel=\"noopener\">用苹果电脑mac系统配置阿里云服务器ecs的教程攻略</a>, 同时感谢基友 <a href=\"www.baidu.com\">梧桐</a> 的大力支持，让我少走了不少坑。</p>\n<h2 id=\"购买服务器\"><a href=\"#购买服务器\" class=\"headerlink\" title=\"购买服务器\"></a>购买服务器</h2><p>访问<a href=\"https://ecs-buy.aliyun.com/wizard/#/prepay/cn-shenzhen\" target=\"_blank\" rel=\"noopener\">https://ecs-buy.aliyun.com/wizard/#/prepay/cn-shenzhen</a>，按照自己需求去配置。本次是在阿里云官网首页的[最新活动]中免费领取的云主机，有效期是注册阿里云后6个月内可领取。</p>\n<p>一路回车过来，因为是第一次，所以不知道怎么配置。 （这一块待我免费的用完了再来看）</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>国内域名购买有很多地方：<br><a href=\"https://wanwang.aliyun.com/?utm_content=se_1000000527\" target=\"_blank\" rel=\"noopener\">阿里云</a><br><a href=\"https://www.west.cn/active/one/?link=bj_ym&amp;westkey=%u57DF%u540D%u8D2D%u4E70\" target=\"_blank\" rel=\"noopener\">西部数码</a><br><a href=\"https://dnspod.cloud.tencent.com/act/yearendsales?from=sem&amp;fromSource=gwzcw.604268.604268.604268\" target=\"_blank\" rel=\"noopener\">腾讯云</a><br><a href=\"https://cloud.baidu.com/product/bcd.html?track=cp:nsem|pf:pc|pp:bcd|pu:buy|ci:|kw:40345\" target=\"_blank\" rel=\"noopener\">百度云</a><br><a href=\"https://sg.godaddy.com/zh/offers/domains/godaddy-nb?isc=gennbacn16&amp;countryview=1&amp;currencytype=CNY&amp;utm_source=baidu&amp;utm_medium=cpc&amp;utm_campaign=zh-cn_dom_sem_base_nb_gd&amp;utm_content=chi_domain_nonbrand_exact&amp;utm_term=%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0&amp;mkwid=109TEkjPM_pcrid_18782177370_pdv_c_\" target=\"_blank\" rel=\"noopener\">GoDaddy</a> 这一个比较便宜，地区写的是新加坡，但是不影响正常使用的。口碑不是特别好，根据实际情况来吧。<br>有很多，就不一一去列举了。自行上网查找，一大片一大片的。  </p>\n<p><code>.com/.cn</code> 是必须要备案才能使用的。其他的我也不是很清楚，我注册了一个 <code>.site</code> ，不需要备案。</p>\n<h2 id=\"登录服务器\"><a href=\"#登录服务器\" class=\"headerlink\" title=\"登录服务器\"></a>登录服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 登录到服务器</span><br><span class=\"line\">sudo ssh root@myIP</span><br><span class=\"line\"># 设置免密登录</span><br><span class=\"line\">brew install ssh-copy-id</span><br><span class=\"line\"># -i: 指定公钥文件</span><br><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@120.79.208.103</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单配置\"><a href=\"#简单配置\" class=\"headerlink\" title=\"简单配置\"></a>简单配置</h2><p><strong>修改默认端口</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改成别的。我修改成了3000</span><br><span class=\"line\">Port 22  </span><br><span class=\"line\"></span><br><span class=\"line\"># 默认可以密码登录，no： 密码不可登录。</span><br><span class=\"line\">## 等我回去把家里的电脑也连接上了再说。哈哈哈</span><br><span class=\"line\">PasswordAuthentication yes</span><br></pre></td></tr></table></figure></p>\n<p>然后重启生效  <code>service ssh restart</code> / <code>systemctl restart sshd</code>(centos 7)</p>\n<h2 id=\"安装必要工具\"><a href=\"#安装必要工具\" class=\"headerlink\" title=\"安装必要工具\"></a>安装必要工具</h2><p><code>yum install -y ufw nginx</code>  </p>\n<p><em>额外闲谈</em><br>yum命令是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更细与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。  更多关于linux命令参考<a href=\"http://man.linuxde.net/yum\" target=\"_blank\" rel=\"noopener\">linux命令大全</a>.</p>\n<h2 id=\"配置防火墙\"><a href=\"#配置防火墙\" class=\"headerlink\" title=\"配置防火墙\"></a>配置防火墙</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启防火墙</span><br><span class=\"line\"> ufw enable </span><br><span class=\"line\"># 禁止所有端口访问  </span><br><span class=\"line\"> ufw default deny # 默认值： incoming</span><br><span class=\"line\"># 允许80端口tcp协议链接</span><br><span class=\"line\"> ufw allow 80/tcp</span><br><span class=\"line\"># 443 https</span><br><span class=\"line\"> ufw allow 443/tcp</span><br><span class=\"line\"> ufw allow 修改的sshd_config的Port的端口号/tcp</span><br><span class=\"line\"># 查看防火墙状态</span><br><span class=\"line\"> ufw status</span><br><span class=\"line\"># 重启防火墙</span><br><span class=\"line\"> ufw reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h2><p><strong><em>centos 下新建文件用</em></strong> <code>touch 文件名</code></p>\n<ol>\n<li><code>cd /etc/nginx/conf.d</code>，创建一个 conf 文件，内容如下：<br><img src=\"/images/aliyun/WX20180601-105924.png\" alt=\"\"></li>\n<li>/etc/init.d/nginx restart 重启nginx</li>\n<li>在/usr/local/src/ 创建一个 index.html</li>\n<li>输入域名登录，如果成功则显示 index.html 里面的内容。</li>\n</ol>\n<p>可以在/etc/nginx/conf.d目录下，多写几个不同的配置，分开管理二级域名，是什么意思？ 接下来要干的事情。</p>\n"},{"title":"阿里云服务器搭建所遇见问题","date":"2018-05-31T07:54:59.000Z","_content":"\n关于如何搭建阿里云服务器，我在这儿也就不多说了，网上教程一大片。仅记录一下自己在搭建过程中所遇见的问题，以备以后自己翻阅。  \n参考了楚狂人的博客 [用苹果电脑mac系统配置阿里云服务器ecs的教程攻略](http://www.chukuangren.com/mac-aliyun-ecs.html), 同时感谢基友 [梧桐](www.baidu.com) 的大力支持，让我少走了不少坑。\n\n## 环境：   \n服务器：centOS 7.04  \n本地： MAC OSX 10.13.4\n\n#### __1. Permission denied, please try again.__  \n\n申请服务器成功后，在iterm下登录到远程服务器时，提示`Permission denied, please try again`，具体日志:\n\n![](/images/aliyun/WX20180531-155652.png)\n\n#### 解决方法：\n查看阿里云 ssh 登录时出现错误，发现[解决方法](https://help.aliyun.com/knowledge_detail/41487.html)：\n修改 sshd_config 中的 PermitRootLogin 改成 no 即可。\n注意， vim sshd_config 时，时没有权限的，因此需要加上 `sudo vim sshd_config`,但是，天不遂人意，在我保存时，又报错了。\n![](/images/aliyun/WX20180531-160800.png)\n机智的我看见了一个什么?   \n``` ssh \nwq: command not found    \nshell returned 127\n```\n\n看来英语也还是有点点用处的嘛。是命令没有找到，很明显嘛，我的mac系统中.bashrc是配置了的。且这些配置一般情况下都不需要我们去手动改写的，所以几乎可以排除是环境变量缺失引起的。接着，我突然发现，在我 `:wq` 的时候，看见了 sshd_config 这个配置文件是只读的，因而，想到修改一下这个文件的权限。  \n\n``` ssh\nsudo chomd -R 777\nsudo ssh root@IP  \n# root 为你的用户名，阿里云默认是root，IP是你的服务器IP\n```\n\n什么，还是没有解决掉这个问题。我的天，于是乎，逛了一下论坛，才发现，别人用的 `:wq!`,刚开始并不以为然，知道看见了一个评论，`:!wq`这个事错误的表示。  \n好吧，菜鸟的路一眼望不见尽头...\n![](/images/aliyun/WX20180531-161602.png)\nok，问题解决！\n\n#### __2. zsh: command not found: XXX.__\n[原文解决方式](https://www.jianshu.com/p/bba968ca3957)比较详细，我简单记录一下连接地址。\n\n#### __3. service ssh restart 不成功__  \ncentos 7 不能用 `service ssh restart` 来启动了，改用 `systemctl restart sshd`.  \n\n\n\n","source":"_posts/阿里云服务器搭建所遇见问题.md","raw":"---\ntitle: 阿里云服务器搭建所遇见问题\ndate: 2018-05-31 15:54:59\ntags: [阿里云, ques]\n---\n\n关于如何搭建阿里云服务器，我在这儿也就不多说了，网上教程一大片。仅记录一下自己在搭建过程中所遇见的问题，以备以后自己翻阅。  \n参考了楚狂人的博客 [用苹果电脑mac系统配置阿里云服务器ecs的教程攻略](http://www.chukuangren.com/mac-aliyun-ecs.html), 同时感谢基友 [梧桐](www.baidu.com) 的大力支持，让我少走了不少坑。\n\n## 环境：   \n服务器：centOS 7.04  \n本地： MAC OSX 10.13.4\n\n#### __1. Permission denied, please try again.__  \n\n申请服务器成功后，在iterm下登录到远程服务器时，提示`Permission denied, please try again`，具体日志:\n\n![](/images/aliyun/WX20180531-155652.png)\n\n#### 解决方法：\n查看阿里云 ssh 登录时出现错误，发现[解决方法](https://help.aliyun.com/knowledge_detail/41487.html)：\n修改 sshd_config 中的 PermitRootLogin 改成 no 即可。\n注意， vim sshd_config 时，时没有权限的，因此需要加上 `sudo vim sshd_config`,但是，天不遂人意，在我保存时，又报错了。\n![](/images/aliyun/WX20180531-160800.png)\n机智的我看见了一个什么?   \n``` ssh \nwq: command not found    \nshell returned 127\n```\n\n看来英语也还是有点点用处的嘛。是命令没有找到，很明显嘛，我的mac系统中.bashrc是配置了的。且这些配置一般情况下都不需要我们去手动改写的，所以几乎可以排除是环境变量缺失引起的。接着，我突然发现，在我 `:wq` 的时候，看见了 sshd_config 这个配置文件是只读的，因而，想到修改一下这个文件的权限。  \n\n``` ssh\nsudo chomd -R 777\nsudo ssh root@IP  \n# root 为你的用户名，阿里云默认是root，IP是你的服务器IP\n```\n\n什么，还是没有解决掉这个问题。我的天，于是乎，逛了一下论坛，才发现，别人用的 `:wq!`,刚开始并不以为然，知道看见了一个评论，`:!wq`这个事错误的表示。  \n好吧，菜鸟的路一眼望不见尽头...\n![](/images/aliyun/WX20180531-161602.png)\nok，问题解决！\n\n#### __2. zsh: command not found: XXX.__\n[原文解决方式](https://www.jianshu.com/p/bba968ca3957)比较详细，我简单记录一下连接地址。\n\n#### __3. service ssh restart 不成功__  \ncentos 7 不能用 `service ssh restart` 来启动了，改用 `systemctl restart sshd`.  \n\n\n\n","slug":"阿里云服务器搭建所遇见问题","published":1,"updated":"2018-07-27T10:34:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk3wwg38000s66fycm5y43gj","content":"<p>关于如何搭建阿里云服务器，我在这儿也就不多说了，网上教程一大片。仅记录一下自己在搭建过程中所遇见的问题，以备以后自己翻阅。<br>参考了楚狂人的博客 <a href=\"http://www.chukuangren.com/mac-aliyun-ecs.html\" target=\"_blank\" rel=\"noopener\">用苹果电脑mac系统配置阿里云服务器ecs的教程攻略</a>, 同时感谢基友 <a href=\"www.baidu.com\">梧桐</a> 的大力支持，让我少走了不少坑。</p>\n<h2 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h2><p>服务器：centOS 7.04<br>本地： MAC OSX 10.13.4</p>\n<h4 id=\"1-Permission-denied-please-try-again\"><a href=\"#1-Permission-denied-please-try-again\" class=\"headerlink\" title=\"1. Permission denied, please try again.\"></a><strong>1. Permission denied, please try again.</strong></h4><p>申请服务器成功后，在iterm下登录到远程服务器时，提示<code>Permission denied, please try again</code>，具体日志:</p>\n<p><img src=\"/images/aliyun/WX20180531-155652.png\" alt=\"\"></p>\n<h4 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h4><p>查看阿里云 ssh 登录时出现错误，发现<a href=\"https://help.aliyun.com/knowledge_detail/41487.html\" target=\"_blank\" rel=\"noopener\">解决方法</a>：<br>修改 sshd_config 中的 PermitRootLogin 改成 no 即可。<br>注意， vim sshd_config 时，时没有权限的，因此需要加上 <code>sudo vim sshd_config</code>,但是，天不遂人意，在我保存时，又报错了。<br><img src=\"/images/aliyun/WX20180531-160800.png\" alt=\"\"><br>机智的我看见了一个什么?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wq: command not found    </span><br><span class=\"line\">shell returned 127</span><br></pre></td></tr></table></figure></p>\n<p>看来英语也还是有点点用处的嘛。是命令没有找到，很明显嘛，我的mac系统中.bashrc是配置了的。且这些配置一般情况下都不需要我们去手动改写的，所以几乎可以排除是环境变量缺失引起的。接着，我突然发现，在我 <code>:wq</code> 的时候，看见了 sshd_config 这个配置文件是只读的，因而，想到修改一下这个文件的权限。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chomd -R 777</span><br><span class=\"line\">sudo ssh root@IP  </span><br><span class=\"line\"># root 为你的用户名，阿里云默认是root，IP是你的服务器IP</span><br></pre></td></tr></table></figure>\n<p>什么，还是没有解决掉这个问题。我的天，于是乎，逛了一下论坛，才发现，别人用的 <code>:wq!</code>,刚开始并不以为然，知道看见了一个评论，<code>:!wq</code>这个事错误的表示。<br>好吧，菜鸟的路一眼望不见尽头…<br><img src=\"/images/aliyun/WX20180531-161602.png\" alt=\"\"><br>ok，问题解决！</p>\n<h4 id=\"2-zsh-command-not-found-XXX\"><a href=\"#2-zsh-command-not-found-XXX\" class=\"headerlink\" title=\"2. zsh: command not found: XXX.\"></a><strong>2. zsh: command not found: XXX.</strong></h4><p><a href=\"https://www.jianshu.com/p/bba968ca3957\" target=\"_blank\" rel=\"noopener\">原文解决方式</a>比较详细，我简单记录一下连接地址。</p>\n<h4 id=\"3-service-ssh-restart-不成功\"><a href=\"#3-service-ssh-restart-不成功\" class=\"headerlink\" title=\"3. service ssh restart 不成功\"></a><strong>3. service ssh restart 不成功</strong></h4><p>centos 7 不能用 <code>service ssh restart</code> 来启动了，改用 <code>systemctl restart sshd</code>.  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于如何搭建阿里云服务器，我在这儿也就不多说了，网上教程一大片。仅记录一下自己在搭建过程中所遇见的问题，以备以后自己翻阅。<br>参考了楚狂人的博客 <a href=\"http://www.chukuangren.com/mac-aliyun-ecs.html\" target=\"_blank\" rel=\"noopener\">用苹果电脑mac系统配置阿里云服务器ecs的教程攻略</a>, 同时感谢基友 <a href=\"www.baidu.com\">梧桐</a> 的大力支持，让我少走了不少坑。</p>\n<h2 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h2><p>服务器：centOS 7.04<br>本地： MAC OSX 10.13.4</p>\n<h4 id=\"1-Permission-denied-please-try-again\"><a href=\"#1-Permission-denied-please-try-again\" class=\"headerlink\" title=\"1. Permission denied, please try again.\"></a><strong>1. Permission denied, please try again.</strong></h4><p>申请服务器成功后，在iterm下登录到远程服务器时，提示<code>Permission denied, please try again</code>，具体日志:</p>\n<p><img src=\"/images/aliyun/WX20180531-155652.png\" alt=\"\"></p>\n<h4 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h4><p>查看阿里云 ssh 登录时出现错误，发现<a href=\"https://help.aliyun.com/knowledge_detail/41487.html\" target=\"_blank\" rel=\"noopener\">解决方法</a>：<br>修改 sshd_config 中的 PermitRootLogin 改成 no 即可。<br>注意， vim sshd_config 时，时没有权限的，因此需要加上 <code>sudo vim sshd_config</code>,但是，天不遂人意，在我保存时，又报错了。<br><img src=\"/images/aliyun/WX20180531-160800.png\" alt=\"\"><br>机智的我看见了一个什么?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wq: command not found    </span><br><span class=\"line\">shell returned 127</span><br></pre></td></tr></table></figure></p>\n<p>看来英语也还是有点点用处的嘛。是命令没有找到，很明显嘛，我的mac系统中.bashrc是配置了的。且这些配置一般情况下都不需要我们去手动改写的，所以几乎可以排除是环境变量缺失引起的。接着，我突然发现，在我 <code>:wq</code> 的时候，看见了 sshd_config 这个配置文件是只读的，因而，想到修改一下这个文件的权限。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chomd -R 777</span><br><span class=\"line\">sudo ssh root@IP  </span><br><span class=\"line\"># root 为你的用户名，阿里云默认是root，IP是你的服务器IP</span><br></pre></td></tr></table></figure>\n<p>什么，还是没有解决掉这个问题。我的天，于是乎，逛了一下论坛，才发现，别人用的 <code>:wq!</code>,刚开始并不以为然，知道看见了一个评论，<code>:!wq</code>这个事错误的表示。<br>好吧，菜鸟的路一眼望不见尽头…<br><img src=\"/images/aliyun/WX20180531-161602.png\" alt=\"\"><br>ok，问题解决！</p>\n<h4 id=\"2-zsh-command-not-found-XXX\"><a href=\"#2-zsh-command-not-found-XXX\" class=\"headerlink\" title=\"2. zsh: command not found: XXX.\"></a><strong>2. zsh: command not found: XXX.</strong></h4><p><a href=\"https://www.jianshu.com/p/bba968ca3957\" target=\"_blank\" rel=\"noopener\">原文解决方式</a>比较详细，我简单记录一下连接地址。</p>\n<h4 id=\"3-service-ssh-restart-不成功\"><a href=\"#3-service-ssh-restart-不成功\" class=\"headerlink\" title=\"3. service ssh restart 不成功\"></a><strong>3. service ssh restart 不成功</strong></h4><p>centos 7 不能用 <code>service ssh restart</code> 来启动了，改用 <code>systemctl restart sshd</code>.  </p>\n"},{"title":"vue学习笔记（一）","date":"2018-07-27T10:43:33.000Z","description":"对于 vue 官网给的教程由浅及深，非常容易上手。我之前有过 react 项目开发经验，对 webpack 打包，脚手架这一类的东西并不陌生。所以也是我上手比较快的原因吧。简单将我在学习 vue 中遇见的问题和我觉得比较重要的东西记录一下，增加记忆。先说好，我这是个人笔记，不是教程，不喜勿喷。","_content":"\n*对于 vue 官网给的教程由浅及深，非常容易上手。我之前有过 react 项目开发经验，对 webpack 打包，脚手架这一类的东西并不陌生。所以也是我上手比较快的原因吧。简单将我在学习 vue 中遇见的问题和我觉得比较重要的东西记录一下，增加记忆。先说好，我这是个人笔记，不是教程，不喜勿喷。*\n\n哦，有个特别尴尬，特别严肃的问题。   \n我想说一声  \n读 ： /vjuː/，类似于 view  \n别在读 v u e 了，各位大佬。  \n官网学习地址：[https://cn.vuejs.org/v2/guide](https://cn.vuejs.org/v2/guide)\n\n\n## 简单介绍\n\n一套用于构建用户界面的**渐进式框架**。与其它大型框架不同的是，Vue 被设计为可以**自底向上逐层应用**。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n#### 安装方式\n\n\n```npm\nnpm i -g vue vue-cli\n```\n官网上说对于新手不推荐使用 `vue-cli`，注意学习一下打包工具 webpack， gulp 之类的，了解一下 node 构建流程，然后再回头用 vue-cli，绝壁会醍醐灌顶，如梦初醒，恍然大悟，豁然开朗，茅塞顿开... 没得词语了，书读少了。差不多就是这个意思，站在了一个更高的层面的来学 vue-cli 了。  \n\n然后，新建一个文件夹 vue 用来存放项目的。在 vue 文件夹下打开命令行，用 vue-cli 初始化一个项目。ok， just so\n``` ssh\nvue init webpack 项目名称\n```\n然后一路回车就好了。回车前可以大概看一下，各个选项都是什么意思。\n```js\nProject name (项目名称)： 项目名称\nProject description (A Vue.js project)： 项目描述，可以为空。\nAuthor：作者姓名\nRuntime + Compiler: recommended for most users： 运行加编译\nRuntime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere：回车就好了\nInstall vue-router? (Y/n)： 是否安装vue-router，一般都要安装\nUse ESLint to lint your code? (Y/n)：  是否使用ESLint管理代码，看个人习惯，条条框框太多，个人不愿使用。\n接下来也是选择题Pick an ESLint preset (Use arrow keys)： 选择一个ESLint预设，编写vue项目时的代码风格\nSetup unit tests with Karma + Mocha? (Y/n)： 是否安装单元测试\nSetup e2e tests with Nightwatch？(Y/n)： 是否安装e2e测试 \n```\n\n\n#### 数据与方法\n\n当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。  \n\n_1. 只有当实例被创建时 data 中存在的属性才是响应式的。_\n_2. 唯一的例外是使用 Object.freeze(),这会阻止修改现有属性，系统将无法追踪变化。_\n_3. 除了数据属性，vue实例还会暴露一些有用的实例属性和方法。通常都前缀`$`，以便与用户定义的属性区分开来。如 `$watch`, `$el`, `$data` ..._\n\n``` js\nvar data = {\n    a: 1\n}\nvar vm = new Vue({\n    el: \"#example\",\n    data: data\n})\n\nconsole.log(\n    \"vm.$data === data  \", vm.$data === data, \"\\n\", // true\n    \"vm.$el === document.getElementById('example'): \",  vm.$el === document.getElementById('example') // true\n)\nvm.$watch('a', function(newValue, oldValue) {\n    // 当修改 a 的值时，会执行该方法\n    console.log(\"newValue === oldValue: \", newValue === oldValue)\n})\n    \n```\n再举个栗子：  \n![image]()\n具体可以查看 [API了解更多](https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7)\n\n#### 生命周期\n\n要说，生命周期是最基础，最必须要理解的。和 react 一样，每个实例在被创建时，都会经历几个阶段。beforeCreate，created， beforeMount， mounted， beforeUpdate， updated， beforeDestroy， destroyed\n\n#### 模板语法\n##### # 插值\n数据绑定最常见的形式就是使用“Mustache”语法（双大括号）  ==> 一般用于插入文本\nv-html： Mustache 会将数据解析成普通文本，而非 html 代码。  \n\n```html\n<p>Using mustaches: {{rawHtml}}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\nspan 的内容会被替换成 rawHtml 的值，这种会忽略解析 rawHtml 值中的数据绑定。不能使用 v-html 来复合局部模板，因为 vue 不是基于字符串的模板引擎。  \n\nMustache 语法不能作用在 html 特性上，遇到这种情况应该使用 v-bind 指令；在布尔特性的情况下，v-bind 工作起来略有不同。eg：\n\n```js\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n如果 isButtonDisabled 的值是 null， undefined 或是 false，则 disabled 特性甚至不会被包含在渲染出来的 <button> 元素中。\n\n对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。流控制，语句，语句块都是不会生效的。\n\nPS: 模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。  \n\n##### # 指令\n指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。  \n\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。eg: v-bind, v-on  \n\n```js\n<a v-bind:href=\"url\">aaa</a>\n<a v-on:click=\"doSomething\">bbb</a>\n```\n\n在这里 href 是参数，告知 v-bind 指令将该元素的 href 特性与表达式 url 的值绑定；v-on 用于监听 dom 事件。\n\n对 v-bind 和 v-on 的简写为： `:`, 和 `@`; eg:  \n```js\n<a v-bind:href=\"url\">aaa</a>\n<a :href=\"url\">aaa</a>\n\n<a v-on:click=\"do\">bbb</a>\n<a @click=\"do\">bbb</a>\n```\n\n##### # 计算属性和侦听器\n\nPS: 对于任何复杂逻辑，都应当使用计算属性（computed）;\n\n**计算属性 vs 方法**  \n计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。使用方法，就不会有缓存。\n\n**计算属性 vs 侦听属性**  \nVue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 watch。  \n计算属性默认只有 getter，在需要的时也可以提供一个 setter；\n\n```js\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n**侦听器**（有时间，再了解一下）  \n\n虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。  \n\n在这儿需要学习一下 axios， lodash。  \naxios： 异步请求封装  \nlodash： 限制操作频率\n\n有个问题值得注意一下：\n```js\nVue.component('my-component', {\n  template: '<p class=\"foo bar\">Hi</p>'\n})\n\n<my-component v-bind:class=\"{ active: isActive }\"></my-component>\n\n当 isActive 为 truthy 时， html 将会被渲染成：\n<p class=\"foo bar active\">Hi</p>\n\n```\n尤其注意，这里的 truthy 不是 true 哈。详情参见[MDN](https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy)  \n\n##### # 条件渲染\n**v-show**  \n1. 始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。\n2. v-show 不支持 <template> 元素，也不支持 v-else。\n\n**`v-if` vs `v-show`**  \n+ v-if:   \n1. 会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\n2. v-if 也是惰性的；如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\n+ v-show:   \n不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。  \n\n**_一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。_**  \n\n`v-if` 和 `v-for` 一起使用时，`v-for` 具有比 `v-if` 个更的优先级。  \n##### # 列表渲染\n\n1. 在 v-for 块中，我们拥有对父作用域属性的完全访问权限；  \nquestion： 对祖先级呢？  \n2. 可以用 of 代替 in 作为分隔符。`v-for=\"item of items\"`\n3. 可以用 v-for 遍历对象。可以有三个参数 (value, key, index);\n4. 在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。  \n\nVue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。如下：  \n+ push()\n+ pop()\n+ shift()\n+ unshift()\n+ splice()\n+ sort()\n+ reverse()\n\n变异方法 (mutation method)，顾名思义，会改变被这些方法调用的原始数组。相比之下，也有非变异 (non-mutating method) 方法，例如：filter(), concat() 和 slice() 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组：\n```js\nexample1.items = example1.items.filter(function (item) {\n  return item.message.match(/Foo/)\n})\n```\n你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的、启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。  \n\n---\nPS:   \n由于 JavaScript 的限制，Vue 不能检测以下变动的数组：\n\n1. 当利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue\n2. 当修改数组的长度时，例如：vm.items.length = newLength\n举个栗子：   \n```js\nvar vm = new Vue({\n  data: {\n    items: ['a', 'b', 'c']\n  }\n})\nvm.items[1] = 'x' // 不是响应性的\nvm.items.length = 2 // 不是响应性的\n```   \n解决方法\n```js\n// Vue.set\nVue.set(vm.items, indexOfItem, newValue)\n\n// Array.prototype.splice\nvm.items.splice(indexOfItem, 1, newValue)\n\n// 也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名\nvm.$set(vm.items, indexOfItem, newValue)\n\n// 解决第二类问题\nvm.items.splice(newLength)\n```\n---\n\n\n\n\n\n\n---\n当年吹过得牛逼，如已不然，便全不作数。  -- Mobro\n\n","source":"_posts/vue学习笔记（一）.md","raw":"---\ntitle: vue学习笔记（一）\ndate: 2018-07-27 18:43:33\ntags: [vue, vue-cli]\ndescription: 对于 vue 官网给的教程由浅及深，非常容易上手。我之前有过 react 项目开发经验，对 webpack 打包，脚手架这一类的东西并不陌生。所以也是我上手比较快的原因吧。简单将我在学习 vue 中遇见的问题和我觉得比较重要的东西记录一下，增加记忆。先说好，我这是个人笔记，不是教程，不喜勿喷。\n---\n\n*对于 vue 官网给的教程由浅及深，非常容易上手。我之前有过 react 项目开发经验，对 webpack 打包，脚手架这一类的东西并不陌生。所以也是我上手比较快的原因吧。简单将我在学习 vue 中遇见的问题和我觉得比较重要的东西记录一下，增加记忆。先说好，我这是个人笔记，不是教程，不喜勿喷。*\n\n哦，有个特别尴尬，特别严肃的问题。   \n我想说一声  \n读 ： /vjuː/，类似于 view  \n别在读 v u e 了，各位大佬。  \n官网学习地址：[https://cn.vuejs.org/v2/guide](https://cn.vuejs.org/v2/guide)\n\n\n## 简单介绍\n\n一套用于构建用户界面的**渐进式框架**。与其它大型框架不同的是，Vue 被设计为可以**自底向上逐层应用**。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n#### 安装方式\n\n\n```npm\nnpm i -g vue vue-cli\n```\n官网上说对于新手不推荐使用 `vue-cli`，注意学习一下打包工具 webpack， gulp 之类的，了解一下 node 构建流程，然后再回头用 vue-cli，绝壁会醍醐灌顶，如梦初醒，恍然大悟，豁然开朗，茅塞顿开... 没得词语了，书读少了。差不多就是这个意思，站在了一个更高的层面的来学 vue-cli 了。  \n\n然后，新建一个文件夹 vue 用来存放项目的。在 vue 文件夹下打开命令行，用 vue-cli 初始化一个项目。ok， just so\n``` ssh\nvue init webpack 项目名称\n```\n然后一路回车就好了。回车前可以大概看一下，各个选项都是什么意思。\n```js\nProject name (项目名称)： 项目名称\nProject description (A Vue.js project)： 项目描述，可以为空。\nAuthor：作者姓名\nRuntime + Compiler: recommended for most users： 运行加编译\nRuntime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere：回车就好了\nInstall vue-router? (Y/n)： 是否安装vue-router，一般都要安装\nUse ESLint to lint your code? (Y/n)：  是否使用ESLint管理代码，看个人习惯，条条框框太多，个人不愿使用。\n接下来也是选择题Pick an ESLint preset (Use arrow keys)： 选择一个ESLint预设，编写vue项目时的代码风格\nSetup unit tests with Karma + Mocha? (Y/n)： 是否安装单元测试\nSetup e2e tests with Nightwatch？(Y/n)： 是否安装e2e测试 \n```\n\n\n#### 数据与方法\n\n当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。  \n\n_1. 只有当实例被创建时 data 中存在的属性才是响应式的。_\n_2. 唯一的例外是使用 Object.freeze(),这会阻止修改现有属性，系统将无法追踪变化。_\n_3. 除了数据属性，vue实例还会暴露一些有用的实例属性和方法。通常都前缀`$`，以便与用户定义的属性区分开来。如 `$watch`, `$el`, `$data` ..._\n\n``` js\nvar data = {\n    a: 1\n}\nvar vm = new Vue({\n    el: \"#example\",\n    data: data\n})\n\nconsole.log(\n    \"vm.$data === data  \", vm.$data === data, \"\\n\", // true\n    \"vm.$el === document.getElementById('example'): \",  vm.$el === document.getElementById('example') // true\n)\nvm.$watch('a', function(newValue, oldValue) {\n    // 当修改 a 的值时，会执行该方法\n    console.log(\"newValue === oldValue: \", newValue === oldValue)\n})\n    \n```\n再举个栗子：  \n![image]()\n具体可以查看 [API了解更多](https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7)\n\n#### 生命周期\n\n要说，生命周期是最基础，最必须要理解的。和 react 一样，每个实例在被创建时，都会经历几个阶段。beforeCreate，created， beforeMount， mounted， beforeUpdate， updated， beforeDestroy， destroyed\n\n#### 模板语法\n##### # 插值\n数据绑定最常见的形式就是使用“Mustache”语法（双大括号）  ==> 一般用于插入文本\nv-html： Mustache 会将数据解析成普通文本，而非 html 代码。  \n\n```html\n<p>Using mustaches: {{rawHtml}}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n```\n\nspan 的内容会被替换成 rawHtml 的值，这种会忽略解析 rawHtml 值中的数据绑定。不能使用 v-html 来复合局部模板，因为 vue 不是基于字符串的模板引擎。  \n\nMustache 语法不能作用在 html 特性上，遇到这种情况应该使用 v-bind 指令；在布尔特性的情况下，v-bind 工作起来略有不同。eg：\n\n```js\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n如果 isButtonDisabled 的值是 null， undefined 或是 false，则 disabled 特性甚至不会被包含在渲染出来的 <button> 元素中。\n\n对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。流控制，语句，语句块都是不会生效的。\n\nPS: 模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。  \n\n##### # 指令\n指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。  \n\n一些指令能够接收一个“参数”，在指令名称之后以冒号表示。eg: v-bind, v-on  \n\n```js\n<a v-bind:href=\"url\">aaa</a>\n<a v-on:click=\"doSomething\">bbb</a>\n```\n\n在这里 href 是参数，告知 v-bind 指令将该元素的 href 特性与表达式 url 的值绑定；v-on 用于监听 dom 事件。\n\n对 v-bind 和 v-on 的简写为： `:`, 和 `@`; eg:  \n```js\n<a v-bind:href=\"url\">aaa</a>\n<a :href=\"url\">aaa</a>\n\n<a v-on:click=\"do\">bbb</a>\n<a @click=\"do\">bbb</a>\n```\n\n##### # 计算属性和侦听器\n\nPS: 对于任何复杂逻辑，都应当使用计算属性（computed）;\n\n**计算属性 vs 方法**  \n计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。使用方法，就不会有缓存。\n\n**计算属性 vs 侦听属性**  \nVue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 watch。  \n计算属性默认只有 getter，在需要的时也可以提供一个 setter；\n\n```js\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n**侦听器**（有时间，再了解一下）  \n\n虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。  \n\n在这儿需要学习一下 axios， lodash。  \naxios： 异步请求封装  \nlodash： 限制操作频率\n\n有个问题值得注意一下：\n```js\nVue.component('my-component', {\n  template: '<p class=\"foo bar\">Hi</p>'\n})\n\n<my-component v-bind:class=\"{ active: isActive }\"></my-component>\n\n当 isActive 为 truthy 时， html 将会被渲染成：\n<p class=\"foo bar active\">Hi</p>\n\n```\n尤其注意，这里的 truthy 不是 true 哈。详情参见[MDN](https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy)  \n\n##### # 条件渲染\n**v-show**  \n1. 始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。\n2. v-show 不支持 <template> 元素，也不支持 v-else。\n\n**`v-if` vs `v-show`**  \n+ v-if:   \n1. 会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\n2. v-if 也是惰性的；如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\n+ v-show:   \n不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。  \n\n**_一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。_**  \n\n`v-if` 和 `v-for` 一起使用时，`v-for` 具有比 `v-if` 个更的优先级。  \n##### # 列表渲染\n\n1. 在 v-for 块中，我们拥有对父作用域属性的完全访问权限；  \nquestion： 对祖先级呢？  \n2. 可以用 of 代替 in 作为分隔符。`v-for=\"item of items\"`\n3. 可以用 v-for 遍历对象。可以有三个参数 (value, key, index);\n4. 在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。  \n\nVue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。如下：  \n+ push()\n+ pop()\n+ shift()\n+ unshift()\n+ splice()\n+ sort()\n+ reverse()\n\n变异方法 (mutation method)，顾名思义，会改变被这些方法调用的原始数组。相比之下，也有非变异 (non-mutating method) 方法，例如：filter(), concat() 和 slice() 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组：\n```js\nexample1.items = example1.items.filter(function (item) {\n  return item.message.match(/Foo/)\n})\n```\n你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的、启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。  \n\n---\nPS:   \n由于 JavaScript 的限制，Vue 不能检测以下变动的数组：\n\n1. 当利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue\n2. 当修改数组的长度时，例如：vm.items.length = newLength\n举个栗子：   \n```js\nvar vm = new Vue({\n  data: {\n    items: ['a', 'b', 'c']\n  }\n})\nvm.items[1] = 'x' // 不是响应性的\nvm.items.length = 2 // 不是响应性的\n```   \n解决方法\n```js\n// Vue.set\nVue.set(vm.items, indexOfItem, newValue)\n\n// Array.prototype.splice\nvm.items.splice(indexOfItem, 1, newValue)\n\n// 也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名\nvm.$set(vm.items, indexOfItem, newValue)\n\n// 解决第二类问题\nvm.items.splice(newLength)\n```\n---\n\n\n\n\n\n\n---\n当年吹过得牛逼，如已不然，便全不作数。  -- Mobro\n\n","slug":"vue学习笔记（一）","published":1,"updated":"2018-07-27T11:48:32.000Z","_id":"cjk3wwg3q001c66fyfql5z8dr","comments":1,"layout":"post","photos":[],"link":"","content":"<p><em>对于 vue 官网给的教程由浅及深，非常容易上手。我之前有过 react 项目开发经验，对 webpack 打包，脚手架这一类的东西并不陌生。所以也是我上手比较快的原因吧。简单将我在学习 vue 中遇见的问题和我觉得比较重要的东西记录一下，增加记忆。先说好，我这是个人笔记，不是教程，不喜勿喷。</em></p>\n<p>哦，有个特别尴尬，特别严肃的问题。<br>我想说一声<br>读 ： /vjuː/，类似于 view<br>别在读 v u e 了，各位大佬。<br>官网学习地址：<a href=\"https://cn.vuejs.org/v2/guide\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide</a></p>\n<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h2><p>一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以<strong>自底向上逐层应用</strong>。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<h4 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g vue vue-cli</span><br></pre></td></tr></table></figure>\n<p>官网上说对于新手不推荐使用 <code>vue-cli</code>，注意学习一下打包工具 webpack， gulp 之类的，了解一下 node 构建流程，然后再回头用 vue-cli，绝壁会醍醐灌顶，如梦初醒，恍然大悟，豁然开朗，茅塞顿开… 没得词语了，书读少了。差不多就是这个意思，站在了一个更高的层面的来学 vue-cli 了。  </p>\n<p>然后，新建一个文件夹 vue 用来存放项目的。在 vue 文件夹下打开命令行，用 vue-cli 初始化一个项目。ok， just so<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack 项目名称</span><br></pre></td></tr></table></figure></p>\n<p>然后一路回车就好了。回车前可以大概看一下，各个选项都是什么意思。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Project name (项目名称)： 项目名称</span><br><span class=\"line\">Project description (A Vue.js project)： 项目描述，可以为空。</span><br><span class=\"line\">Author：作者姓名</span><br><span class=\"line\">Runtime + Compiler: recommended <span class=\"keyword\">for</span> most users： 运行加编译</span><br><span class=\"line\">Runtime-only: about <span class=\"number\">6</span>KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed <span class=\"keyword\">in</span> .vue files - render functions are required elsewhere：回车就好了</span><br><span class=\"line\">Install vue-router? (Y/n)： 是否安装vue-router，一般都要安装</span><br><span class=\"line\">Use ESLint to lint your code? (Y/n)：  是否使用ESLint管理代码，看个人习惯，条条框框太多，个人不愿使用。</span><br><span class=\"line\">接下来也是选择题Pick an ESLint preset (Use arrow keys)： 选择一个ESLint预设，编写vue项目时的代码风格</span><br><span class=\"line\">Setup unit tests <span class=\"keyword\">with</span> Karma + Mocha? (Y/n)： 是否安装单元测试</span><br><span class=\"line\">Setup e2e tests <span class=\"keyword\">with</span> Nightwatch？(Y/n)： 是否安装e2e测试</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"数据与方法\"><a href=\"#数据与方法\" class=\"headerlink\" title=\"数据与方法\"></a>数据与方法</h4><p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。  </p>\n<p><em>1. 只有当实例被创建时 data 中存在的属性才是响应式的。</em><br><em>2. 唯一的例外是使用 Object.freeze(),这会阻止修改现有属性，系统将无法追踪变化。</em><br><em>3. 除了数据属性，vue实例还会暴露一些有用的实例属性和方法。通常都前缀<code>$</code>，以便与用户定义的属性区分开来。如 <code>$watch</code>, <code>$el</code>, <code>$data</code> …</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">\"#example\"</span>,</span><br><span class=\"line\">    data: data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">    <span class=\"string\">\"vm.$data === data  \"</span>, vm.$data === data, <span class=\"string\">\"\\n\"</span>, <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"string\">\"vm.$el === document.getElementById('example'): \"</span>,  vm.$el === <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">)</span><br><span class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue, oldValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当修改 a 的值时，会执行该方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"newValue === oldValue: \"</span>, newValue === oldValue)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>再举个栗子：<br><img src=\"\" alt=\"image\"><br>具体可以查看 <a href=\"https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener\">API了解更多</a></p>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>要说，生命周期是最基础，最必须要理解的。和 react 一样，每个实例在被创建时，都会经历几个阶段。beforeCreate，created， beforeMount， mounted， beforeUpdate， updated， beforeDestroy， destroyed</p>\n<h4 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h4><h5 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"# 插值\"></a># 插值</h5><p>数据绑定最常见的形式就是使用“Mustache”语法（双大括号）  ==&gt; 一般用于插入文本<br>v-html： Mustache 会将数据解析成普通文本，而非 html 代码。  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: &#123;&#123;rawHtml&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>span 的内容会被替换成 rawHtml 的值，这种会忽略解析 rawHtml 值中的数据绑定。不能使用 v-html 来复合局部模板，因为 vue 不是基于字符串的模板引擎。  </p>\n<p>Mustache 语法不能作用在 html 特性上，遇到这种情况应该使用 v-bind 指令；在布尔特性的情况下，v-bind 工作起来略有不同。eg：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-bind:disabled=<span class=\"string\">\"isButtonDisabled\"</span>&gt;Button&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果 isButtonDisabled 的值是 null， undefined 或是 false，则 disabled 特性甚至不会被包含在渲染出来的 <button> 元素中。</button></p>\n<p>对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。流控制，语句，语句块都是不会生效的。</p>\n<p>PS: 模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。  </p>\n<h5 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"# 指令\"></a># 指令</h5><p>指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。  </p>\n<p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。eg: v-bind, v-on  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:href=<span class=\"string\">\"url\"</span>&gt;aaa&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;a v-on:click=\"doSomething\"&gt;bbb&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure>\n<p>在这里 href 是参数，告知 v-bind 指令将该元素的 href 特性与表达式 url 的值绑定；v-on 用于监听 dom 事件。</p>\n<p>对 v-bind 和 v-on 的简写为： <code>:</code>, 和 <code>@</code>; eg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:href=<span class=\"string\">\"url\"</span>&gt;aaa&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;a :href=\"url\"&gt;aaa&lt;/</span>a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a v-on:click=<span class=\"string\">\"do\"</span>&gt;bbb&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;a @click=\"do\"&gt;bbb&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"计算属性和侦听器\"><a href=\"#计算属性和侦听器\" class=\"headerlink\" title=\"# 计算属性和侦听器\"></a># 计算属性和侦听器</h5><p>PS: 对于任何复杂逻辑，都应当使用计算属性（computed）;</p>\n<p><strong>计算属性 vs 方法</strong><br>计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。使用方法，就不会有缓存。</p>\n<p><strong>计算属性 vs 侦听属性</strong><br>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 watch。<br>计算属性默认只有 getter，在需要的时也可以提供一个 setter；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  fullName: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>侦听器</strong>（有时间，再了解一下）  </p>\n<p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。  </p>\n<p>在这儿需要学习一下 axios， lodash。<br>axios： 异步请求封装<br>lodash： 限制操作频率</p>\n<p>有个问题值得注意一下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;p class=\"foo bar\"&gt;Hi&lt;/p&gt;'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;my-component v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">当 isActive 为 truthy 时， html 将会被渲染成：</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar active\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>尤其注意，这里的 truthy 不是 true 哈。详情参见<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy\" target=\"_blank\" rel=\"noopener\">MDN</a>  </p>\n<h5 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"# 条件渲染\"></a># 条件渲染</h5><p><strong>v-show</strong>  </p>\n<ol>\n<li>始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。</li>\n<li>v-show 不支持 <template> 元素，也不支持 v-else。</template></li>\n</ol>\n<p><strong><code>v-if</code> vs <code>v-show</code></strong>  </p>\n<ul>\n<li>v-if:   </li>\n</ul>\n<ol>\n<li>会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li>\n<li>v-if 也是惰性的；如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</li>\n</ol>\n<ul>\n<li>v-show:<br>不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。  </li>\n</ul>\n<p><strong><em>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</em></strong>  </p>\n<p><code>v-if</code> 和 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 个更的优先级。  </p>\n<h5 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"# 列表渲染\"></a># 列表渲染</h5><ol>\n<li>在 v-for 块中，我们拥有对父作用域属性的完全访问权限；<br>question： 对祖先级呢？  </li>\n<li>可以用 of 代替 in 作为分隔符。<code>v-for=&quot;item of items&quot;</code></li>\n<li>可以用 v-for 遍历对象。可以有三个参数 (value, key, index);</li>\n<li>在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。  </li>\n</ol>\n<p>Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。如下：  </p>\n<ul>\n<li>push()</li>\n<li>pop()</li>\n<li>shift()</li>\n<li>unshift()</li>\n<li>splice()</li>\n<li>sort()</li>\n<li>reverse()</li>\n</ul>\n<p>变异方法 (mutation method)，顾名思义，会改变被这些方法调用的原始数组。相比之下，也有非变异 (non-mutating method) 方法，例如：filter(), concat() 和 slice() 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example1.items = example1.items.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.message.match(<span class=\"regexp\">/Foo/</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的、启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。  </p>\n<hr>\n<p>PS:<br>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p>\n<ol>\n<li>当利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue</li>\n<li>当修改数组的长度时，例如：vm.items.length = newLength<br>举个栗子：   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    items: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.items[<span class=\"number\">1</span>] = <span class=\"string\">'x'</span> <span class=\"comment\">// 不是响应性的</span></span><br><span class=\"line\">vm.items.length = <span class=\"number\">2</span> <span class=\"comment\">// 不是响应性的</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">解决方法</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"comment\">// Vue.set</span></span><br><span class=\"line\">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.prototype.splice</span></span><br><span class=\"line\">vm.items.splice(indexOfItem, <span class=\"number\">1</span>, newValue)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名</span></span><br><span class=\"line\">vm.$set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决第二类问题</span></span><br><span class=\"line\">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<hr>\n<p>当年吹过得牛逼，如已不然，便全不作数。  – Mobro</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>对于 vue 官网给的教程由浅及深，非常容易上手。我之前有过 react 项目开发经验，对 webpack 打包，脚手架这一类的东西并不陌生。所以也是我上手比较快的原因吧。简单将我在学习 vue 中遇见的问题和我觉得比较重要的东西记录一下，增加记忆。先说好，我这是个人笔记，不是教程，不喜勿喷。</em></p>\n<p>哦，有个特别尴尬，特别严肃的问题。<br>我想说一声<br>读 ： /vjuː/，类似于 view<br>别在读 v u e 了，各位大佬。<br>官网学习地址：<a href=\"https://cn.vuejs.org/v2/guide\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide</a></p>\n<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h2><p>一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以<strong>自底向上逐层应用</strong>。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<h4 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g vue vue-cli</span><br></pre></td></tr></table></figure>\n<p>官网上说对于新手不推荐使用 <code>vue-cli</code>，注意学习一下打包工具 webpack， gulp 之类的，了解一下 node 构建流程，然后再回头用 vue-cli，绝壁会醍醐灌顶，如梦初醒，恍然大悟，豁然开朗，茅塞顿开… 没得词语了，书读少了。差不多就是这个意思，站在了一个更高的层面的来学 vue-cli 了。  </p>\n<p>然后，新建一个文件夹 vue 用来存放项目的。在 vue 文件夹下打开命令行，用 vue-cli 初始化一个项目。ok， just so<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack 项目名称</span><br></pre></td></tr></table></figure></p>\n<p>然后一路回车就好了。回车前可以大概看一下，各个选项都是什么意思。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Project name (项目名称)： 项目名称</span><br><span class=\"line\">Project description (A Vue.js project)： 项目描述，可以为空。</span><br><span class=\"line\">Author：作者姓名</span><br><span class=\"line\">Runtime + Compiler: recommended <span class=\"keyword\">for</span> most users： 运行加编译</span><br><span class=\"line\">Runtime-only: about <span class=\"number\">6</span>KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed <span class=\"keyword\">in</span> .vue files - render functions are required elsewhere：回车就好了</span><br><span class=\"line\">Install vue-router? (Y/n)： 是否安装vue-router，一般都要安装</span><br><span class=\"line\">Use ESLint to lint your code? (Y/n)：  是否使用ESLint管理代码，看个人习惯，条条框框太多，个人不愿使用。</span><br><span class=\"line\">接下来也是选择题Pick an ESLint preset (Use arrow keys)： 选择一个ESLint预设，编写vue项目时的代码风格</span><br><span class=\"line\">Setup unit tests <span class=\"keyword\">with</span> Karma + Mocha? (Y/n)： 是否安装单元测试</span><br><span class=\"line\">Setup e2e tests <span class=\"keyword\">with</span> Nightwatch？(Y/n)： 是否安装e2e测试</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"数据与方法\"><a href=\"#数据与方法\" class=\"headerlink\" title=\"数据与方法\"></a>数据与方法</h4><p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。  </p>\n<p><em>1. 只有当实例被创建时 data 中存在的属性才是响应式的。</em><br><em>2. 唯一的例外是使用 Object.freeze(),这会阻止修改现有属性，系统将无法追踪变化。</em><br><em>3. 除了数据属性，vue实例还会暴露一些有用的实例属性和方法。通常都前缀<code>$</code>，以便与用户定义的属性区分开来。如 <code>$watch</code>, <code>$el</code>, <code>$data</code> …</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">\"#example\"</span>,</span><br><span class=\"line\">    data: data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">    <span class=\"string\">\"vm.$data === data  \"</span>, vm.$data === data, <span class=\"string\">\"\\n\"</span>, <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"string\">\"vm.$el === document.getElementById('example'): \"</span>,  vm.$el === <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">)</span><br><span class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue, oldValue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当修改 a 的值时，会执行该方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"newValue === oldValue: \"</span>, newValue === oldValue)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>再举个栗子：<br><img src=\"\" alt=\"image\"><br>具体可以查看 <a href=\"https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener\">API了解更多</a></p>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>要说，生命周期是最基础，最必须要理解的。和 react 一样，每个实例在被创建时，都会经历几个阶段。beforeCreate，created， beforeMount， mounted， beforeUpdate， updated， beforeDestroy， destroyed</p>\n<h4 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h4><h5 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"# 插值\"></a># 插值</h5><p>数据绑定最常见的形式就是使用“Mustache”语法（双大括号）  ==&gt; 一般用于插入文本<br>v-html： Mustache 会将数据解析成普通文本，而非 html 代码。  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using mustaches: &#123;&#123;rawHtml&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>span 的内容会被替换成 rawHtml 的值，这种会忽略解析 rawHtml 值中的数据绑定。不能使用 v-html 来复合局部模板，因为 vue 不是基于字符串的模板引擎。  </p>\n<p>Mustache 语法不能作用在 html 特性上，遇到这种情况应该使用 v-bind 指令；在布尔特性的情况下，v-bind 工作起来略有不同。eg：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-bind:disabled=<span class=\"string\">\"isButtonDisabled\"</span>&gt;Button&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果 isButtonDisabled 的值是 null， undefined 或是 false，则 disabled 特性甚至不会被包含在渲染出来的 <button> 元素中。</button></p>\n<p>对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。流控制，语句，语句块都是不会生效的。</p>\n<p>PS: 模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。  </p>\n<h5 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"# 指令\"></a># 指令</h5><p>指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。  </p>\n<p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。eg: v-bind, v-on  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:href=<span class=\"string\">\"url\"</span>&gt;aaa&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;a v-on:click=\"doSomething\"&gt;bbb&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure>\n<p>在这里 href 是参数，告知 v-bind 指令将该元素的 href 特性与表达式 url 的值绑定；v-on 用于监听 dom 事件。</p>\n<p>对 v-bind 和 v-on 的简写为： <code>:</code>, 和 <code>@</code>; eg:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:href=<span class=\"string\">\"url\"</span>&gt;aaa&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;a :href=\"url\"&gt;aaa&lt;/</span>a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a v-on:click=<span class=\"string\">\"do\"</span>&gt;bbb&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;a @click=\"do\"&gt;bbb&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"计算属性和侦听器\"><a href=\"#计算属性和侦听器\" class=\"headerlink\" title=\"# 计算属性和侦听器\"></a># 计算属性和侦听器</h5><p>PS: 对于任何复杂逻辑，都应当使用计算属性（computed）;</p>\n<p><strong>计算属性 vs 方法</strong><br>计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。使用方法，就不会有缓存。</p>\n<p><strong>计算属性 vs 侦听属性</strong><br>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 watch。<br>计算属性默认只有 getter，在需要的时也可以提供一个 setter；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  fullName: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// getter</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// setter</span></span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>侦听器</strong>（有时间，再了解一下）  </p>\n<p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。  </p>\n<p>在这儿需要学习一下 axios， lodash。<br>axios： 异步请求封装<br>lodash： 限制操作频率</p>\n<p>有个问题值得注意一下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;p class=\"foo bar\"&gt;Hi&lt;/p&gt;'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;my-component v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">当 isActive 为 truthy 时， html 将会被渲染成：</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foo bar active\"</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>尤其注意，这里的 truthy 不是 true 哈。详情参见<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy\" target=\"_blank\" rel=\"noopener\">MDN</a>  </p>\n<h5 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"# 条件渲染\"></a># 条件渲染</h5><p><strong>v-show</strong>  </p>\n<ol>\n<li>始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。</li>\n<li>v-show 不支持 <template> 元素，也不支持 v-else。</template></li>\n</ol>\n<p><strong><code>v-if</code> vs <code>v-show</code></strong>  </p>\n<ul>\n<li>v-if:   </li>\n</ul>\n<ol>\n<li>会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li>\n<li>v-if 也是惰性的；如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</li>\n</ol>\n<ul>\n<li>v-show:<br>不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。  </li>\n</ul>\n<p><strong><em>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</em></strong>  </p>\n<p><code>v-if</code> 和 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 个更的优先级。  </p>\n<h5 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"# 列表渲染\"></a># 列表渲染</h5><ol>\n<li>在 v-for 块中，我们拥有对父作用域属性的完全访问权限；<br>question： 对祖先级呢？  </li>\n<li>可以用 of 代替 in 作为分隔符。<code>v-for=&quot;item of items&quot;</code></li>\n<li>可以用 v-for 遍历对象。可以有三个参数 (value, key, index);</li>\n<li>在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。  </li>\n</ol>\n<p>Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。如下：  </p>\n<ul>\n<li>push()</li>\n<li>pop()</li>\n<li>shift()</li>\n<li>unshift()</li>\n<li>splice()</li>\n<li>sort()</li>\n<li>reverse()</li>\n</ul>\n<p>变异方法 (mutation method)，顾名思义，会改变被这些方法调用的原始数组。相比之下，也有非变异 (non-mutating method) 方法，例如：filter(), concat() 和 slice() 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example1.items = example1.items.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.message.match(<span class=\"regexp\">/Foo/</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的、启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。  </p>\n<hr>\n<p>PS:<br>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p>\n<ol>\n<li>当利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue</li>\n<li>当修改数组的长度时，例如：vm.items.length = newLength<br>举个栗子：   <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    items: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.items[<span class=\"number\">1</span>] = <span class=\"string\">'x'</span> <span class=\"comment\">// 不是响应性的</span></span><br><span class=\"line\">vm.items.length = <span class=\"number\">2</span> <span class=\"comment\">// 不是响应性的</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">解决方法</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"comment\">// Vue.set</span></span><br><span class=\"line\">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.prototype.splice</span></span><br><span class=\"line\">vm.items.splice(indexOfItem, <span class=\"number\">1</span>, newValue)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名</span></span><br><span class=\"line\">vm.$set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决第二类问题</span></span><br><span class=\"line\">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<hr>\n<p>当年吹过得牛逼，如已不然，便全不作数。  – Mobro</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjk3wwfzq000066fy6clfdjif","tag_id":"cjk3wwfzy000266fy9oafh1jz","_id":"cjk3wwg0j000666fyx07gyax9"},{"post_id":"cjk3wwfzv000166fy0m25x8io","tag_id":"cjk3wwg0j000566fywqu39qzz","_id":"cjk3wwg18000866fydt9jr90w"},{"post_id":"cjk3wwg01000366fymr7u6c9m","tag_id":"cjk3wwg17000766fyl44v1wyq","_id":"cjk3wwg1a000b66fydcw4bmms"},{"post_id":"cjk3wwg01000366fymr7u6c9m","tag_id":"cjk3wwg19000966fym5dz8dlf","_id":"cjk3wwg1a000c66fyqm5gliew"},{"post_id":"cjk3wwg03000466fypuwthzdu","tag_id":"cjk3wwg19000a66fyjxbuztgu","_id":"cjk3wwg1b000e66fyr90s73yf"},{"post_id":"cjk3wwg03000466fypuwthzdu","tag_id":"cjk3wwg1a000d66fy6tnw6k7k","_id":"cjk3wwg1c000f66fyhvn4unns"},{"post_id":"cjk3wwg1j000g66fyftb94nhk","tag_id":"cjk3wwg0j000566fywqu39qzz","_id":"cjk3wwg1p000j66fyzvqwkn8y"},{"post_id":"cjk3wwg1n000i66fy00uh4tj8","tag_id":"cjk3wwg2k000l66fy2x3sb246","_id":"cjk3wwg36000q66fyd7k6slox"},{"post_id":"cjk3wwg1p000k66fyjt76wswj","tag_id":"cjk3wwg35000p66fy078kmeyz","_id":"cjk3wwg3a000w66fyz6m4v4rx"},{"post_id":"cjk3wwg1p000k66fyjt76wswj","tag_id":"cjk3wwg39000t66fyepu0ufap","_id":"cjk3wwg3a000x66fy0r98pnns"},{"post_id":"cjk3wwg1p000k66fyjt76wswj","tag_id":"cjk3wwg3a000u66fy8nqxm36h","_id":"cjk3wwg3a000z66fyey5x7mmy"},{"post_id":"cjk3wwg2k000m66fyw7hrmw75","tag_id":"cjk3wwg3a000v66fym89yd345","_id":"cjk3wwg3b001066fy0ib3vcv7"},{"post_id":"cjk3wwg2k000m66fyw7hrmw75","tag_id":"cjk3wwg19000966fym5dz8dlf","_id":"cjk3wwg3b001266fyfsy4fqf4"},{"post_id":"cjk3wwg2l000n66fygajk72gg","tag_id":"cjk3wwg3a000y66fy0nc48mvr","_id":"cjk3wwg3b001466fyxdq3k21o"},{"post_id":"cjk3wwg2l000n66fygajk72gg","tag_id":"cjk3wwg3b001166fy0ozv56fp","_id":"cjk3wwg3c001566fykmeiuxuh"},{"post_id":"cjk3wwg34000o66fyqdcer6dt","tag_id":"cjk3wwg3b001366fy4cgjp49a","_id":"cjk3wwg3c001766fyu5pbarpl"},{"post_id":"cjk3wwg36000r66fyxzzj2mir","tag_id":"cjk3wwg3c001666fyto4fxrh8","_id":"cjk3wwg3e001966fygih57qxe"},{"post_id":"cjk3wwg38000s66fycm5y43gj","tag_id":"cjk3wwg3c001666fyto4fxrh8","_id":"cjk3wwg3e001a66fyzzo56rb7"},{"post_id":"cjk3wwg38000s66fycm5y43gj","tag_id":"cjk3wwg19000966fym5dz8dlf","_id":"cjk3wwg3e001b66fy5mc3t5li"},{"post_id":"cjk3wwg3q001c66fyfql5z8dr","tag_id":"cjk3wwg3s001d66fy6zvwvse9","_id":"cjk3wwg3u001f66fygac3s3j8"},{"post_id":"cjk3wwg3q001c66fyfql5z8dr","tag_id":"cjk3wwg3t001e66fy7sh0dxs1","_id":"cjk3wwg3u001g66fy52ihwthu"}],"Tag":[{"name":"npm","_id":"cjk3wwfzy000266fy9oafh1jz"},{"name":"git","_id":"cjk3wwg0j000566fywqu39qzz"},{"name":"ssh","_id":"cjk3wwg17000766fyl44v1wyq"},{"name":"ques","_id":"cjk3wwg19000966fym5dz8dlf"},{"name":"jade","_id":"cjk3wwg19000a66fyjxbuztgu"},{"name":"pug","_id":"cjk3wwg1a000d66fy6tnw6k7k"},{"name":"scss","_id":"cjk3wwg2k000l66fy2x3sb246"},{"name":"js","_id":"cjk3wwg35000p66fy078kmeyz"},{"name":"console","_id":"cjk3wwg39000t66fyepu0ufap"},{"name":"跨域","_id":"cjk3wwg3a000u66fy8nqxm36h"},{"name":"linux","_id":"cjk3wwg3a000v66fym89yd345"},{"name":"localStorage","_id":"cjk3wwg3a000y66fy0nc48mvr"},{"name":"cookie","_id":"cjk3wwg3b001166fy0ozv56fp"},{"name":"es6","_id":"cjk3wwg3b001366fy4cgjp49a"},{"name":"阿里云","_id":"cjk3wwg3c001666fyto4fxrh8"},{"name":"vue","_id":"cjk3wwg3s001d66fy6zvwvse9"},{"name":"vue-cli","_id":"cjk3wwg3t001e66fy7sh0dxs1"}]}}